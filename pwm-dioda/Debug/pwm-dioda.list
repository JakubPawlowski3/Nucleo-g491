
pwm-dioda.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007678  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08007858  08007858  00017858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078e8  080078e8  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080078e8  080078e8  000178e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078f0  080078f0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078f0  080078f0  000178f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078f4  080078f4  000178f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080078f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b0  20000068  08007960  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  08007960  00020418  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014eea  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002795  00000000  00000000  00034fc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012c0  00000000  00000000  00037760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e9b  00000000  00000000  00038a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021da9  00000000  00000000  000398bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015507  00000000  00000000  0005b664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4564  00000000  00000000  00070b6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000059c4  00000000  00000000  001550d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0015aa94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007840 	.word	0x08007840

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08007840 	.word	0x08007840

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b970 	b.w	80005c8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9e08      	ldr	r6, [sp, #32]
 8000306:	460d      	mov	r5, r1
 8000308:	4604      	mov	r4, r0
 800030a:	460f      	mov	r7, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4694      	mov	ip, r2
 8000314:	d965      	bls.n	80003e2 <__udivmoddi4+0xe2>
 8000316:	fab2 f382 	clz	r3, r2
 800031a:	b143      	cbz	r3, 800032e <__udivmoddi4+0x2e>
 800031c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000320:	f1c3 0220 	rsb	r2, r3, #32
 8000324:	409f      	lsls	r7, r3
 8000326:	fa20 f202 	lsr.w	r2, r0, r2
 800032a:	4317      	orrs	r7, r2
 800032c:	409c      	lsls	r4, r3
 800032e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000332:	fa1f f58c 	uxth.w	r5, ip
 8000336:	fbb7 f1fe 	udiv	r1, r7, lr
 800033a:	0c22      	lsrs	r2, r4, #16
 800033c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000340:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000344:	fb01 f005 	mul.w	r0, r1, r5
 8000348:	4290      	cmp	r0, r2
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x62>
 800034c:	eb1c 0202 	adds.w	r2, ip, r2
 8000350:	f101 37ff 	add.w	r7, r1, #4294967295
 8000354:	f080 811c 	bcs.w	8000590 <__udivmoddi4+0x290>
 8000358:	4290      	cmp	r0, r2
 800035a:	f240 8119 	bls.w	8000590 <__udivmoddi4+0x290>
 800035e:	3902      	subs	r1, #2
 8000360:	4462      	add	r2, ip
 8000362:	1a12      	subs	r2, r2, r0
 8000364:	b2a4      	uxth	r4, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000372:	fb00 f505 	mul.w	r5, r0, r5
 8000376:	42a5      	cmp	r5, r4
 8000378:	d90a      	bls.n	8000390 <__udivmoddi4+0x90>
 800037a:	eb1c 0404 	adds.w	r4, ip, r4
 800037e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000382:	f080 8107 	bcs.w	8000594 <__udivmoddi4+0x294>
 8000386:	42a5      	cmp	r5, r4
 8000388:	f240 8104 	bls.w	8000594 <__udivmoddi4+0x294>
 800038c:	4464      	add	r4, ip
 800038e:	3802      	subs	r0, #2
 8000390:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000394:	1b64      	subs	r4, r4, r5
 8000396:	2100      	movs	r1, #0
 8000398:	b11e      	cbz	r6, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40dc      	lsrs	r4, r3
 800039c:	2300      	movs	r3, #0
 800039e:	e9c6 4300 	strd	r4, r3, [r6]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0xbc>
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	f000 80ed 	beq.w	800058a <__udivmoddi4+0x28a>
 80003b0:	2100      	movs	r1, #0
 80003b2:	e9c6 0500 	strd	r0, r5, [r6]
 80003b6:	4608      	mov	r0, r1
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	fab3 f183 	clz	r1, r3
 80003c0:	2900      	cmp	r1, #0
 80003c2:	d149      	bne.n	8000458 <__udivmoddi4+0x158>
 80003c4:	42ab      	cmp	r3, r5
 80003c6:	d302      	bcc.n	80003ce <__udivmoddi4+0xce>
 80003c8:	4282      	cmp	r2, r0
 80003ca:	f200 80f8 	bhi.w	80005be <__udivmoddi4+0x2be>
 80003ce:	1a84      	subs	r4, r0, r2
 80003d0:	eb65 0203 	sbc.w	r2, r5, r3
 80003d4:	2001      	movs	r0, #1
 80003d6:	4617      	mov	r7, r2
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d0e2      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	e9c6 4700 	strd	r4, r7, [r6]
 80003e0:	e7df      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003e2:	b902      	cbnz	r2, 80003e6 <__udivmoddi4+0xe6>
 80003e4:	deff      	udf	#255	; 0xff
 80003e6:	fab2 f382 	clz	r3, r2
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8090 	bne.w	8000510 <__udivmoddi4+0x210>
 80003f0:	1a8a      	subs	r2, r1, r2
 80003f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f6:	fa1f fe8c 	uxth.w	lr, ip
 80003fa:	2101      	movs	r1, #1
 80003fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000400:	fb07 2015 	mls	r0, r7, r5, r2
 8000404:	0c22      	lsrs	r2, r4, #16
 8000406:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800040a:	fb0e f005 	mul.w	r0, lr, r5
 800040e:	4290      	cmp	r0, r2
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x124>
 8000412:	eb1c 0202 	adds.w	r2, ip, r2
 8000416:	f105 38ff 	add.w	r8, r5, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x122>
 800041c:	4290      	cmp	r0, r2
 800041e:	f200 80cb 	bhi.w	80005b8 <__udivmoddi4+0x2b8>
 8000422:	4645      	mov	r5, r8
 8000424:	1a12      	subs	r2, r2, r0
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb2 f0f7 	udiv	r0, r2, r7
 800042c:	fb07 2210 	mls	r2, r7, r0, r2
 8000430:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000434:	fb0e fe00 	mul.w	lr, lr, r0
 8000438:	45a6      	cmp	lr, r4
 800043a:	d908      	bls.n	800044e <__udivmoddi4+0x14e>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 32ff 	add.w	r2, r0, #4294967295
 8000444:	d202      	bcs.n	800044c <__udivmoddi4+0x14c>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f200 80bb 	bhi.w	80005c2 <__udivmoddi4+0x2c2>
 800044c:	4610      	mov	r0, r2
 800044e:	eba4 040e 	sub.w	r4, r4, lr
 8000452:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000456:	e79f      	b.n	8000398 <__udivmoddi4+0x98>
 8000458:	f1c1 0720 	rsb	r7, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000462:	ea4c 0c03 	orr.w	ip, ip, r3
 8000466:	fa05 f401 	lsl.w	r4, r5, r1
 800046a:	fa20 f307 	lsr.w	r3, r0, r7
 800046e:	40fd      	lsrs	r5, r7
 8000470:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000474:	4323      	orrs	r3, r4
 8000476:	fbb5 f8f9 	udiv	r8, r5, r9
 800047a:	fa1f fe8c 	uxth.w	lr, ip
 800047e:	fb09 5518 	mls	r5, r9, r8, r5
 8000482:	0c1c      	lsrs	r4, r3, #16
 8000484:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000488:	fb08 f50e 	mul.w	r5, r8, lr
 800048c:	42a5      	cmp	r5, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	fa00 f001 	lsl.w	r0, r0, r1
 8000496:	d90b      	bls.n	80004b0 <__udivmoddi4+0x1b0>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a0:	f080 8088 	bcs.w	80005b4 <__udivmoddi4+0x2b4>
 80004a4:	42a5      	cmp	r5, r4
 80004a6:	f240 8085 	bls.w	80005b4 <__udivmoddi4+0x2b4>
 80004aa:	f1a8 0802 	sub.w	r8, r8, #2
 80004ae:	4464      	add	r4, ip
 80004b0:	1b64      	subs	r4, r4, r5
 80004b2:	b29d      	uxth	r5, r3
 80004b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b8:	fb09 4413 	mls	r4, r9, r3, r4
 80004bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x1da>
 80004c8:	eb1c 0404 	adds.w	r4, ip, r4
 80004cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d0:	d26c      	bcs.n	80005ac <__udivmoddi4+0x2ac>
 80004d2:	45a6      	cmp	lr, r4
 80004d4:	d96a      	bls.n	80005ac <__udivmoddi4+0x2ac>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	4464      	add	r4, ip
 80004da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004de:	fba3 9502 	umull	r9, r5, r3, r2
 80004e2:	eba4 040e 	sub.w	r4, r4, lr
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	46c8      	mov	r8, r9
 80004ea:	46ae      	mov	lr, r5
 80004ec:	d356      	bcc.n	800059c <__udivmoddi4+0x29c>
 80004ee:	d053      	beq.n	8000598 <__udivmoddi4+0x298>
 80004f0:	b156      	cbz	r6, 8000508 <__udivmoddi4+0x208>
 80004f2:	ebb0 0208 	subs.w	r2, r0, r8
 80004f6:	eb64 040e 	sbc.w	r4, r4, lr
 80004fa:	fa04 f707 	lsl.w	r7, r4, r7
 80004fe:	40ca      	lsrs	r2, r1
 8000500:	40cc      	lsrs	r4, r1
 8000502:	4317      	orrs	r7, r2
 8000504:	e9c6 7400 	strd	r7, r4, [r6]
 8000508:	4618      	mov	r0, r3
 800050a:	2100      	movs	r1, #0
 800050c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000510:	f1c3 0120 	rsb	r1, r3, #32
 8000514:	fa02 fc03 	lsl.w	ip, r2, r3
 8000518:	fa20 f201 	lsr.w	r2, r0, r1
 800051c:	fa25 f101 	lsr.w	r1, r5, r1
 8000520:	409d      	lsls	r5, r3
 8000522:	432a      	orrs	r2, r5
 8000524:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000528:	fa1f fe8c 	uxth.w	lr, ip
 800052c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000530:	fb07 1510 	mls	r5, r7, r0, r1
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800053a:	fb00 f50e 	mul.w	r5, r0, lr
 800053e:	428d      	cmp	r5, r1
 8000540:	fa04 f403 	lsl.w	r4, r4, r3
 8000544:	d908      	bls.n	8000558 <__udivmoddi4+0x258>
 8000546:	eb1c 0101 	adds.w	r1, ip, r1
 800054a:	f100 38ff 	add.w	r8, r0, #4294967295
 800054e:	d22f      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000550:	428d      	cmp	r5, r1
 8000552:	d92d      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000554:	3802      	subs	r0, #2
 8000556:	4461      	add	r1, ip
 8000558:	1b49      	subs	r1, r1, r5
 800055a:	b292      	uxth	r2, r2
 800055c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000560:	fb07 1115 	mls	r1, r7, r5, r1
 8000564:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000568:	fb05 f10e 	mul.w	r1, r5, lr
 800056c:	4291      	cmp	r1, r2
 800056e:	d908      	bls.n	8000582 <__udivmoddi4+0x282>
 8000570:	eb1c 0202 	adds.w	r2, ip, r2
 8000574:	f105 38ff 	add.w	r8, r5, #4294967295
 8000578:	d216      	bcs.n	80005a8 <__udivmoddi4+0x2a8>
 800057a:	4291      	cmp	r1, r2
 800057c:	d914      	bls.n	80005a8 <__udivmoddi4+0x2a8>
 800057e:	3d02      	subs	r5, #2
 8000580:	4462      	add	r2, ip
 8000582:	1a52      	subs	r2, r2, r1
 8000584:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000588:	e738      	b.n	80003fc <__udivmoddi4+0xfc>
 800058a:	4631      	mov	r1, r6
 800058c:	4630      	mov	r0, r6
 800058e:	e708      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000590:	4639      	mov	r1, r7
 8000592:	e6e6      	b.n	8000362 <__udivmoddi4+0x62>
 8000594:	4610      	mov	r0, r2
 8000596:	e6fb      	b.n	8000390 <__udivmoddi4+0x90>
 8000598:	4548      	cmp	r0, r9
 800059a:	d2a9      	bcs.n	80004f0 <__udivmoddi4+0x1f0>
 800059c:	ebb9 0802 	subs.w	r8, r9, r2
 80005a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005a4:	3b01      	subs	r3, #1
 80005a6:	e7a3      	b.n	80004f0 <__udivmoddi4+0x1f0>
 80005a8:	4645      	mov	r5, r8
 80005aa:	e7ea      	b.n	8000582 <__udivmoddi4+0x282>
 80005ac:	462b      	mov	r3, r5
 80005ae:	e794      	b.n	80004da <__udivmoddi4+0x1da>
 80005b0:	4640      	mov	r0, r8
 80005b2:	e7d1      	b.n	8000558 <__udivmoddi4+0x258>
 80005b4:	46d0      	mov	r8, sl
 80005b6:	e77b      	b.n	80004b0 <__udivmoddi4+0x1b0>
 80005b8:	3d02      	subs	r5, #2
 80005ba:	4462      	add	r2, ip
 80005bc:	e732      	b.n	8000424 <__udivmoddi4+0x124>
 80005be:	4608      	mov	r0, r1
 80005c0:	e70a      	b.n	80003d8 <__udivmoddi4+0xd8>
 80005c2:	4464      	add	r4, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e742      	b.n	800044e <__udivmoddi4+0x14e>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <HAL_TIM_PeriodElapsedCallback>:
static void MX_ADC3_Init(void);
static void MX_TIM6_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a0d      	ldr	r2, [pc, #52]	; (8000610 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d114      	bne.n	8000608 <HAL_TIM_PeriodElapsedCallback+0x3c>
	{
		  HAL_ADC_PollForConversion(&hadc3, 100);
 80005de:	2164      	movs	r1, #100	; 0x64
 80005e0:	480c      	ldr	r0, [pc, #48]	; (8000614 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80005e2:	f001 fc13 	bl	8001e0c <HAL_ADC_PollForConversion>
		  value = HAL_ADC_GetValue(&hadc3);
 80005e6:	480b      	ldr	r0, [pc, #44]	; (8000614 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80005e8:	f001 fd04 	bl	8001ff4 <HAL_ADC_GetValue>
 80005ec:	4603      	mov	r3, r0
 80005ee:	4a0a      	ldr	r2, [pc, #40]	; (8000618 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80005f0:	6013      	str	r3, [r2, #0]
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, value);
 80005f2:	4b0a      	ldr	r3, [pc, #40]	; (800061c <HAL_TIM_PeriodElapsedCallback+0x50>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a08      	ldr	r2, [pc, #32]	; (8000618 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80005f8:	6812      	ldr	r2, [r2, #0]
 80005fa:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, led);
 80005fc:	4b08      	ldr	r3, [pc, #32]	; (8000620 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	b2da      	uxtb	r2, r3
 8000602:	4b06      	ldr	r3, [pc, #24]	; (800061c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	639a      	str	r2, [r3, #56]	; 0x38
//		if (led > 1000)
//		{
//			led = 100;
//		}
	}
}
 8000608:	bf00      	nop
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40001000 	.word	0x40001000
 8000614:	20000084 	.word	0x20000084
 8000618:	200002a8 	.word	0x200002a8
 800061c:	20000210 	.word	0x20000210
 8000620:	200002ac 	.word	0x200002ac

08000624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000628:	f000 fdd7 	bl	80011da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062c:	f000 f856 	bl	80006dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000630:	f000 fa8a 	bl	8000b48 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000634:	f000 f92c 	bl	8000890 <MX_LPUART1_UART_Init>
  MX_TIM4_Init();
 8000638:	f000 f9c0 	bl	80009bc <MX_TIM4_Init>
  MX_ADC3_Init();
 800063c:	f000 f89a 	bl	8000774 <MX_ADC3_Init>
  MX_TIM6_Init();
 8000640:	f000 fa4a 	bl	8000ad8 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8000644:	f000 f96e 	bl	8000924 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);//niebieski
 8000648:	2100      	movs	r1, #0
 800064a:	481d      	ldr	r0, [pc, #116]	; (80006c0 <main+0x9c>)
 800064c:	f003 ff24 	bl	8004498 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);//zielony
 8000650:	2104      	movs	r1, #4
 8000652:	481b      	ldr	r0, [pc, #108]	; (80006c0 <main+0x9c>)
 8000654:	f003 ff20 	bl	8004498 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);//czerwony
 8000658:	2108      	movs	r1, #8
 800065a:	4819      	ldr	r0, [pc, #100]	; (80006c0 <main+0x9c>)
 800065c:	f003 ff1c 	bl	8004498 <HAL_TIM_PWM_Start>

//  HAL_TIM_Base_Start_IT(&htim6);
  HAL_ADC_Start(&hadc3);
 8000660:	4818      	ldr	r0, [pc, #96]	; (80006c4 <main+0xa0>)
 8000662:	f001 fb09 	bl	8001c78 <HAL_ADC_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_ADC_PollForConversion(&hadc3, 20);
 8000666:	2114      	movs	r1, #20
 8000668:	4816      	ldr	r0, [pc, #88]	; (80006c4 <main+0xa0>)
 800066a:	f001 fbcf 	bl	8001e0c <HAL_ADC_PollForConversion>
	  value = HAL_ADC_GetValue(&hadc3);
 800066e:	4815      	ldr	r0, [pc, #84]	; (80006c4 <main+0xa0>)
 8000670:	f001 fcc0 	bl	8001ff4 <HAL_ADC_GetValue>
 8000674:	4603      	mov	r3, r0
 8000676:	4a14      	ldr	r2, [pc, #80]	; (80006c8 <main+0xa4>)
 8000678:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 800067a:	4814      	ldr	r0, [pc, #80]	; (80006cc <main+0xa8>)
 800067c:	f7ff fdd0 	bl	8000220 <strlen>
 8000680:	4603      	mov	r3, r0
 8000682:	b29a      	uxth	r2, r3
 8000684:	f04f 33ff 	mov.w	r3, #4294967295
 8000688:	4910      	ldr	r1, [pc, #64]	; (80006cc <main+0xa8>)
 800068a:	4811      	ldr	r0, [pc, #68]	; (80006d0 <main+0xac>)
 800068c:	f005 f97e 	bl	800598c <HAL_UART_Transmit>
	  printf("value %lu", value);
 8000690:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <main+0xa4>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4619      	mov	r1, r3
 8000696:	480f      	ldr	r0, [pc, #60]	; (80006d4 <main+0xb0>)
 8000698:	f006 f884 	bl	80067a4 <iprintf>
	  sprintf(msg, "Value: &lu \r \n", value);
 800069c:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <main+0xa4>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	461a      	mov	r2, r3
 80006a2:	490d      	ldr	r1, [pc, #52]	; (80006d8 <main+0xb4>)
 80006a4:	4809      	ldr	r0, [pc, #36]	; (80006cc <main+0xa8>)
 80006a6:	f006 f88f 	bl	80067c8 <siprintf>

	  HAL_Delay(500);
 80006aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006ae:	f000 fe05 	bl	80012bc <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, value);
 80006b2:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <main+0x9c>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a04      	ldr	r2, [pc, #16]	; (80006c8 <main+0xa4>)
 80006b8:	6812      	ldr	r2, [r2, #0]
 80006ba:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_ADC_PollForConversion(&hadc3, 20);
 80006bc:	e7d3      	b.n	8000666 <main+0x42>
 80006be:	bf00      	nop
 80006c0:	20000210 	.word	0x20000210
 80006c4:	20000084 	.word	0x20000084
 80006c8:	200002a8 	.word	0x200002a8
 80006cc:	200002b0 	.word	0x200002b0
 80006d0:	20000180 	.word	0x20000180
 80006d4:	08007858 	.word	0x08007858
 80006d8:	08007864 	.word	0x08007864

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b094      	sub	sp, #80	; 0x50
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 0318 	add.w	r3, r7, #24
 80006e6:	2238      	movs	r2, #56	; 0x38
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f006 f8cf 	bl	800688e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
 80006fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80006fe:	2000      	movs	r0, #0
 8000700:	f002 fdee 	bl	80032e0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000704:	2302      	movs	r3, #2
 8000706:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000708:	f44f 7380 	mov.w	r3, #256	; 0x100
 800070c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800070e:	2340      	movs	r3, #64	; 0x40
 8000710:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000712:	2302      	movs	r3, #2
 8000714:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000716:	2302      	movs	r3, #2
 8000718:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800071a:	2304      	movs	r3, #4
 800071c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800071e:	2355      	movs	r3, #85	; 0x55
 8000720:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000722:	2302      	movs	r3, #2
 8000724:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000726:	2302      	movs	r3, #2
 8000728:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800072a:	2302      	movs	r3, #2
 800072c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072e:	f107 0318 	add.w	r3, r7, #24
 8000732:	4618      	mov	r0, r3
 8000734:	f002 fe88 	bl	8003448 <HAL_RCC_OscConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800073e:	f000 fa89 	bl	8000c54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000742:	230f      	movs	r3, #15
 8000744:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000746:	2303      	movs	r3, #3
 8000748:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800074e:	2300      	movs	r3, #0
 8000750:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	2104      	movs	r1, #4
 800075a:	4618      	mov	r0, r3
 800075c:	f003 f98c 	bl	8003a78 <HAL_RCC_ClockConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000766:	f000 fa75 	bl	8000c54 <Error_Handler>
  }
}
 800076a:	bf00      	nop
 800076c:	3750      	adds	r7, #80	; 0x50
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
	...

08000774 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b090      	sub	sp, #64	; 0x40
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800077a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]
 800078a:	615a      	str	r2, [r3, #20]
 800078c:	619a      	str	r2, [r3, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	2220      	movs	r2, #32
 8000792:	2100      	movs	r1, #0
 8000794:	4618      	mov	r0, r3
 8000796:	f006 f87a 	bl	800688e <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800079a:	4b39      	ldr	r3, [pc, #228]	; (8000880 <MX_ADC3_Init+0x10c>)
 800079c:	4a39      	ldr	r2, [pc, #228]	; (8000884 <MX_ADC3_Init+0x110>)
 800079e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007a0:	4b37      	ldr	r3, [pc, #220]	; (8000880 <MX_ADC3_Init+0x10c>)
 80007a2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80007a6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80007a8:	4b35      	ldr	r3, [pc, #212]	; (8000880 <MX_ADC3_Init+0x10c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007ae:	4b34      	ldr	r3, [pc, #208]	; (8000880 <MX_ADC3_Init+0x10c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 80007b4:	4b32      	ldr	r3, [pc, #200]	; (8000880 <MX_ADC3_Init+0x10c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ba:	4b31      	ldr	r3, [pc, #196]	; (8000880 <MX_ADC3_Init+0x10c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007c0:	4b2f      	ldr	r3, [pc, #188]	; (8000880 <MX_ADC3_Init+0x10c>)
 80007c2:	2204      	movs	r2, #4
 80007c4:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80007c6:	4b2e      	ldr	r3, [pc, #184]	; (8000880 <MX_ADC3_Init+0x10c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80007cc:	4b2c      	ldr	r3, [pc, #176]	; (8000880 <MX_ADC3_Init+0x10c>)
 80007ce:	2201      	movs	r2, #1
 80007d0:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 80007d2:	4b2b      	ldr	r3, [pc, #172]	; (8000880 <MX_ADC3_Init+0x10c>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80007d8:	4b29      	ldr	r3, [pc, #164]	; (8000880 <MX_ADC3_Init+0x10c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007e0:	4b27      	ldr	r3, [pc, #156]	; (8000880 <MX_ADC3_Init+0x10c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007e6:	4b26      	ldr	r3, [pc, #152]	; (8000880 <MX_ADC3_Init+0x10c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80007ec:	4b24      	ldr	r3, [pc, #144]	; (8000880 <MX_ADC3_Init+0x10c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80007f4:	4b22      	ldr	r3, [pc, #136]	; (8000880 <MX_ADC3_Init+0x10c>)
 80007f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007fa:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 80007fc:	4b20      	ldr	r3, [pc, #128]	; (8000880 <MX_ADC3_Init+0x10c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000804:	481e      	ldr	r0, [pc, #120]	; (8000880 <MX_ADC3_Init+0x10c>)
 8000806:	f001 f883 	bl	8001910 <HAL_ADC_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_ADC3_Init+0xa0>
  {
    Error_Handler();
 8000810:	f000 fa20 	bl	8000c54 <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8000814:	4b1c      	ldr	r3, [pc, #112]	; (8000888 <MX_ADC3_Init+0x114>)
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8000818:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 800081c:	62bb      	str	r3, [r7, #40]	; 0x28
  AnalogWDGConfig.Channel = ADC_CHANNEL_1;
 800081e:	4b1b      	ldr	r3, [pc, #108]	; (800088c <MX_ADC3_Init+0x118>)
 8000820:	62fb      	str	r3, [r7, #44]	; 0x2c
  AnalogWDGConfig.ITMode = DISABLE;
 8000822:	2300      	movs	r3, #0
 8000824:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  AnalogWDGConfig.HighThreshold = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	637b      	str	r3, [r7, #52]	; 0x34
  AnalogWDGConfig.LowThreshold = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	63bb      	str	r3, [r7, #56]	; 0x38
  AnalogWDGConfig.FilteringConfig = ADC_AWD_FILTERING_NONE;
 8000830:	2300      	movs	r3, #0
 8000832:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADC_AnalogWDGConfig(&hadc3, &AnalogWDGConfig) != HAL_OK)
 8000834:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000838:	4619      	mov	r1, r3
 800083a:	4811      	ldr	r0, [pc, #68]	; (8000880 <MX_ADC3_Init+0x10c>)
 800083c:	f002 f814 	bl	8002868 <HAL_ADC_AnalogWDGConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_ADC3_Init+0xd6>
  {
    Error_Handler();
 8000846:	f000 fa05 	bl	8000c54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800084a:	4b10      	ldr	r3, [pc, #64]	; (800088c <MX_ADC3_Init+0x118>)
 800084c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800084e:	2306      	movs	r3, #6
 8000850:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000852:	2307      	movs	r3, #7
 8000854:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000856:	237f      	movs	r3, #127	; 0x7f
 8000858:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800085a:	2304      	movs	r3, #4
 800085c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	4619      	mov	r1, r3
 8000866:	4806      	ldr	r0, [pc, #24]	; (8000880 <MX_ADC3_Init+0x10c>)
 8000868:	f001 fbd2 	bl	8002010 <HAL_ADC_ConfigChannel>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_ADC3_Init+0x102>
  {
    Error_Handler();
 8000872:	f000 f9ef 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	3740      	adds	r7, #64	; 0x40
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000084 	.word	0x20000084
 8000884:	50000400 	.word	0x50000400
 8000888:	7dc00000 	.word	0x7dc00000
 800088c:	04300002 	.word	0x04300002

08000890 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000894:	4b21      	ldr	r3, [pc, #132]	; (800091c <MX_LPUART1_UART_Init+0x8c>)
 8000896:	4a22      	ldr	r2, [pc, #136]	; (8000920 <MX_LPUART1_UART_Init+0x90>)
 8000898:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800089a:	4b20      	ldr	r3, [pc, #128]	; (800091c <MX_LPUART1_UART_Init+0x8c>)
 800089c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008a2:	4b1e      	ldr	r3, [pc, #120]	; (800091c <MX_LPUART1_UART_Init+0x8c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80008a8:	4b1c      	ldr	r3, [pc, #112]	; (800091c <MX_LPUART1_UART_Init+0x8c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80008ae:	4b1b      	ldr	r3, [pc, #108]	; (800091c <MX_LPUART1_UART_Init+0x8c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80008b4:	4b19      	ldr	r3, [pc, #100]	; (800091c <MX_LPUART1_UART_Init+0x8c>)
 80008b6:	220c      	movs	r2, #12
 80008b8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ba:	4b18      	ldr	r3, [pc, #96]	; (800091c <MX_LPUART1_UART_Init+0x8c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008c0:	4b16      	ldr	r3, [pc, #88]	; (800091c <MX_LPUART1_UART_Init+0x8c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <MX_LPUART1_UART_Init+0x8c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008cc:	4b13      	ldr	r3, [pc, #76]	; (800091c <MX_LPUART1_UART_Init+0x8c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80008d2:	4812      	ldr	r0, [pc, #72]	; (800091c <MX_LPUART1_UART_Init+0x8c>)
 80008d4:	f005 f80a 	bl	80058ec <HAL_UART_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80008de:	f000 f9b9 	bl	8000c54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008e2:	2100      	movs	r1, #0
 80008e4:	480d      	ldr	r0, [pc, #52]	; (800091c <MX_LPUART1_UART_Init+0x8c>)
 80008e6:	f005 fdd1 	bl	800648c <HAL_UARTEx_SetTxFifoThreshold>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80008f0:	f000 f9b0 	bl	8000c54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f4:	2100      	movs	r1, #0
 80008f6:	4809      	ldr	r0, [pc, #36]	; (800091c <MX_LPUART1_UART_Init+0x8c>)
 80008f8:	f005 fe06 	bl	8006508 <HAL_UARTEx_SetRxFifoThreshold>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000902:	f000 f9a7 	bl	8000c54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_LPUART1_UART_Init+0x8c>)
 8000908:	f005 fd87 	bl	800641a <HAL_UARTEx_DisableFifoMode>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000912:	f000 f99f 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	200000f0 	.word	0x200000f0
 8000920:	40008000 	.word	0x40008000

08000924 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000928:	4b22      	ldr	r3, [pc, #136]	; (80009b4 <MX_USART1_UART_Init+0x90>)
 800092a:	4a23      	ldr	r2, [pc, #140]	; (80009b8 <MX_USART1_UART_Init+0x94>)
 800092c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800092e:	4b21      	ldr	r3, [pc, #132]	; (80009b4 <MX_USART1_UART_Init+0x90>)
 8000930:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000934:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000936:	4b1f      	ldr	r3, [pc, #124]	; (80009b4 <MX_USART1_UART_Init+0x90>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800093c:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <MX_USART1_UART_Init+0x90>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000942:	4b1c      	ldr	r3, [pc, #112]	; (80009b4 <MX_USART1_UART_Init+0x90>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000948:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <MX_USART1_UART_Init+0x90>)
 800094a:	220c      	movs	r2, #12
 800094c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094e:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <MX_USART1_UART_Init+0x90>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000954:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <MX_USART1_UART_Init+0x90>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800095a:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <MX_USART1_UART_Init+0x90>)
 800095c:	2200      	movs	r2, #0
 800095e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000960:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <MX_USART1_UART_Init+0x90>)
 8000962:	2200      	movs	r2, #0
 8000964:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000966:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <MX_USART1_UART_Init+0x90>)
 8000968:	2200      	movs	r2, #0
 800096a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800096c:	4811      	ldr	r0, [pc, #68]	; (80009b4 <MX_USART1_UART_Init+0x90>)
 800096e:	f004 ffbd 	bl	80058ec <HAL_UART_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000978:	f000 f96c 	bl	8000c54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800097c:	2100      	movs	r1, #0
 800097e:	480d      	ldr	r0, [pc, #52]	; (80009b4 <MX_USART1_UART_Init+0x90>)
 8000980:	f005 fd84 	bl	800648c <HAL_UARTEx_SetTxFifoThreshold>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800098a:	f000 f963 	bl	8000c54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800098e:	2100      	movs	r1, #0
 8000990:	4808      	ldr	r0, [pc, #32]	; (80009b4 <MX_USART1_UART_Init+0x90>)
 8000992:	f005 fdb9 	bl	8006508 <HAL_UARTEx_SetRxFifoThreshold>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800099c:	f000 f95a 	bl	8000c54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009a0:	4804      	ldr	r0, [pc, #16]	; (80009b4 <MX_USART1_UART_Init+0x90>)
 80009a2:	f005 fd3a 	bl	800641a <HAL_UARTEx_DisableFifoMode>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80009ac:	f000 f952 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000180 	.word	0x20000180
 80009b8:	40013800 	.word	0x40013800

080009bc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08e      	sub	sp, #56	; 0x38
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d0:	f107 031c 	add.w	r3, r7, #28
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009dc:	463b      	mov	r3, r7
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	60da      	str	r2, [r3, #12]
 80009e8:	611a      	str	r2, [r3, #16]
 80009ea:	615a      	str	r2, [r3, #20]
 80009ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80009ee:	4b38      	ldr	r3, [pc, #224]	; (8000ad0 <MX_TIM4_Init+0x114>)
 80009f0:	4a38      	ldr	r2, [pc, #224]	; (8000ad4 <MX_TIM4_Init+0x118>)
 80009f2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 80009f4:	4b36      	ldr	r3, [pc, #216]	; (8000ad0 <MX_TIM4_Init+0x114>)
 80009f6:	22a9      	movs	r2, #169	; 0xa9
 80009f8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fa:	4b35      	ldr	r3, [pc, #212]	; (8000ad0 <MX_TIM4_Init+0x114>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000a00:	4b33      	ldr	r3, [pc, #204]	; (8000ad0 <MX_TIM4_Init+0x114>)
 8000a02:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a06:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a08:	4b31      	ldr	r3, [pc, #196]	; (8000ad0 <MX_TIM4_Init+0x114>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a0e:	4b30      	ldr	r3, [pc, #192]	; (8000ad0 <MX_TIM4_Init+0x114>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a14:	482e      	ldr	r0, [pc, #184]	; (8000ad0 <MX_TIM4_Init+0x114>)
 8000a16:	f003 fc87 	bl	8004328 <HAL_TIM_Base_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000a20:	f000 f918 	bl	8000c54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a28:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4827      	ldr	r0, [pc, #156]	; (8000ad0 <MX_TIM4_Init+0x114>)
 8000a32:	f004 f8d1 	bl	8004bd8 <HAL_TIM_ConfigClockSource>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000a3c:	f000 f90a 	bl	8000c54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a40:	4823      	ldr	r0, [pc, #140]	; (8000ad0 <MX_TIM4_Init+0x114>)
 8000a42:	f003 fcc8 	bl	80043d6 <HAL_TIM_PWM_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000a4c:	f000 f902 	bl	8000c54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a54:	2300      	movs	r3, #0
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a58:	f107 031c 	add.w	r3, r7, #28
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	481c      	ldr	r0, [pc, #112]	; (8000ad0 <MX_TIM4_Init+0x114>)
 8000a60:	f004 fe70 	bl	8005744 <HAL_TIMEx_MasterConfigSynchronization>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000a6a:	f000 f8f3 	bl	8000c54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a6e:	2360      	movs	r3, #96	; 0x60
 8000a70:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a76:	2300      	movs	r3, #0
 8000a78:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a7e:	463b      	mov	r3, r7
 8000a80:	2200      	movs	r2, #0
 8000a82:	4619      	mov	r1, r3
 8000a84:	4812      	ldr	r0, [pc, #72]	; (8000ad0 <MX_TIM4_Init+0x114>)
 8000a86:	f003 ff93 	bl	80049b0 <HAL_TIM_PWM_ConfigChannel>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000a90:	f000 f8e0 	bl	8000c54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a94:	463b      	mov	r3, r7
 8000a96:	2204      	movs	r2, #4
 8000a98:	4619      	mov	r1, r3
 8000a9a:	480d      	ldr	r0, [pc, #52]	; (8000ad0 <MX_TIM4_Init+0x114>)
 8000a9c:	f003 ff88 	bl	80049b0 <HAL_TIM_PWM_ConfigChannel>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8000aa6:	f000 f8d5 	bl	8000c54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000aaa:	463b      	mov	r3, r7
 8000aac:	2208      	movs	r2, #8
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4807      	ldr	r0, [pc, #28]	; (8000ad0 <MX_TIM4_Init+0x114>)
 8000ab2:	f003 ff7d 	bl	80049b0 <HAL_TIM_PWM_ConfigChannel>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8000abc:	f000 f8ca 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000ac0:	4803      	ldr	r0, [pc, #12]	; (8000ad0 <MX_TIM4_Init+0x114>)
 8000ac2:	f000 fa19 	bl	8000ef8 <HAL_TIM_MspPostInit>

}
 8000ac6:	bf00      	nop
 8000ac8:	3738      	adds	r7, #56	; 0x38
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000210 	.word	0x20000210
 8000ad4:	40000800 	.word	0x40000800

08000ad8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ae8:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <MX_TIM6_Init+0x68>)
 8000aea:	4a16      	ldr	r2, [pc, #88]	; (8000b44 <MX_TIM6_Init+0x6c>)
 8000aec:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16999;
 8000aee:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <MX_TIM6_Init+0x68>)
 8000af0:	f244 2267 	movw	r2, #16999	; 0x4267
 8000af4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af6:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <MX_TIM6_Init+0x68>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8000afc:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <MX_TIM6_Init+0x68>)
 8000afe:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b02:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b04:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <MX_TIM6_Init+0x68>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b0a:	480d      	ldr	r0, [pc, #52]	; (8000b40 <MX_TIM6_Init+0x68>)
 8000b0c:	f003 fc0c 	bl	8004328 <HAL_TIM_Base_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000b16:	f000 f89d 	bl	8000c54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	4619      	mov	r1, r3
 8000b26:	4806      	ldr	r0, [pc, #24]	; (8000b40 <MX_TIM6_Init+0x68>)
 8000b28:	f004 fe0c 	bl	8005744 <HAL_TIMEx_MasterConfigSynchronization>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000b32:	f000 f88f 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b36:	bf00      	nop
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	2000025c 	.word	0x2000025c
 8000b44:	40001000 	.word	0x40001000

08000b48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	; 0x28
 8000b4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
 8000b5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5e:	4b3a      	ldr	r3, [pc, #232]	; (8000c48 <MX_GPIO_Init+0x100>)
 8000b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b62:	4a39      	ldr	r2, [pc, #228]	; (8000c48 <MX_GPIO_Init+0x100>)
 8000b64:	f043 0304 	orr.w	r3, r3, #4
 8000b68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b6a:	4b37      	ldr	r3, [pc, #220]	; (8000c48 <MX_GPIO_Init+0x100>)
 8000b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6e:	f003 0304 	and.w	r3, r3, #4
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b76:	4b34      	ldr	r3, [pc, #208]	; (8000c48 <MX_GPIO_Init+0x100>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7a:	4a33      	ldr	r2, [pc, #204]	; (8000c48 <MX_GPIO_Init+0x100>)
 8000b7c:	f043 0320 	orr.w	r3, r3, #32
 8000b80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b82:	4b31      	ldr	r3, [pc, #196]	; (8000c48 <MX_GPIO_Init+0x100>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b86:	f003 0320 	and.w	r3, r3, #32
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	4b2e      	ldr	r3, [pc, #184]	; (8000c48 <MX_GPIO_Init+0x100>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b92:	4a2d      	ldr	r2, [pc, #180]	; (8000c48 <MX_GPIO_Init+0x100>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b9a:	4b2b      	ldr	r3, [pc, #172]	; (8000c48 <MX_GPIO_Init+0x100>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	60bb      	str	r3, [r7, #8]
 8000ba4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba6:	4b28      	ldr	r3, [pc, #160]	; (8000c48 <MX_GPIO_Init+0x100>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000baa:	4a27      	ldr	r2, [pc, #156]	; (8000c48 <MX_GPIO_Init+0x100>)
 8000bac:	f043 0302 	orr.w	r3, r3, #2
 8000bb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb2:	4b25      	ldr	r3, [pc, #148]	; (8000c48 <MX_GPIO_Init+0x100>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb6:	f003 0302 	and.w	r3, r3, #2
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2120      	movs	r1, #32
 8000bc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc6:	f002 fb4f 	bl	8003268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bd0:	481e      	ldr	r0, [pc, #120]	; (8000c4c <MX_GPIO_Init+0x104>)
 8000bd2:	f002 fb49 	bl	8003268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bdc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000be0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	4619      	mov	r1, r3
 8000bec:	4818      	ldr	r0, [pc, #96]	; (8000c50 <MX_GPIO_Init+0x108>)
 8000bee:	f002 f9b9 	bl	8002f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bf2:	2320      	movs	r3, #32
 8000bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c02:	f107 0314 	add.w	r3, r7, #20
 8000c06:	4619      	mov	r1, r3
 8000c08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c0c:	f002 f9aa 	bl	8002f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c16:	2301      	movs	r3, #1
 8000c18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	4808      	ldr	r0, [pc, #32]	; (8000c4c <MX_GPIO_Init+0x104>)
 8000c2a:	f002 f99b 	bl	8002f64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2100      	movs	r1, #0
 8000c32:	2028      	movs	r0, #40	; 0x28
 8000c34:	f002 f961 	bl	8002efa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c38:	2028      	movs	r0, #40	; 0x28
 8000c3a:	f002 f978 	bl	8002f2e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c3e:	bf00      	nop
 8000c40:	3728      	adds	r7, #40	; 0x28
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	48000400 	.word	0x48000400
 8000c50:	48000800 	.word	0x48000800

08000c54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c58:	b672      	cpsid	i
}
 8000c5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <Error_Handler+0x8>
	...

08000c60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c66:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <HAL_MspInit+0x44>)
 8000c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c6a:	4a0e      	ldr	r2, [pc, #56]	; (8000ca4 <HAL_MspInit+0x44>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6613      	str	r3, [r2, #96]	; 0x60
 8000c72:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <HAL_MspInit+0x44>)
 8000c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7e:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <HAL_MspInit+0x44>)
 8000c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c82:	4a08      	ldr	r2, [pc, #32]	; (8000ca4 <HAL_MspInit+0x44>)
 8000c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c88:	6593      	str	r3, [r2, #88]	; 0x58
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_MspInit+0x44>)
 8000c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c92:	603b      	str	r3, [r7, #0]
 8000c94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c96:	f002 fbc7 	bl	8003428 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40021000 	.word	0x40021000

08000ca8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b09e      	sub	sp, #120	; 0x78
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	2250      	movs	r2, #80	; 0x50
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f005 fde0 	bl	800688e <memset>
  if(hadc->Instance==ADC3)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a1d      	ldr	r2, [pc, #116]	; (8000d48 <HAL_ADC_MspInit+0xa0>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d133      	bne.n	8000d40 <HAL_ADC_MspInit+0x98>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000cd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cdc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000cde:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000ce2:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f003 f8e1 	bl	8003eb0 <HAL_RCCEx_PeriphCLKConfig>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000cf4:	f7ff ffae 	bl	8000c54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC345_CLK_ENABLE();
 8000cf8:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <HAL_ADC_MspInit+0xa4>)
 8000cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfc:	4a13      	ldr	r2, [pc, #76]	; (8000d4c <HAL_ADC_MspInit+0xa4>)
 8000cfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d04:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <HAL_ADC_MspInit+0xa4>)
 8000d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d10:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <HAL_ADC_MspInit+0xa4>)
 8000d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d14:	4a0d      	ldr	r2, [pc, #52]	; (8000d4c <HAL_ADC_MspInit+0xa4>)
 8000d16:	f043 0302 	orr.w	r3, r3, #2
 8000d1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d1c:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <HAL_ADC_MspInit+0xa4>)
 8000d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d20:	f003 0302 	and.w	r3, r3, #2
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PB1     ------> ADC3_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d34:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4805      	ldr	r0, [pc, #20]	; (8000d50 <HAL_ADC_MspInit+0xa8>)
 8000d3c:	f002 f912 	bl	8002f64 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000d40:	bf00      	nop
 8000d42:	3778      	adds	r7, #120	; 0x78
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	50000400 	.word	0x50000400
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	48000400 	.word	0x48000400

08000d54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b0a0      	sub	sp, #128	; 0x80
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d6c:	f107 031c 	add.w	r3, r7, #28
 8000d70:	2250      	movs	r2, #80	; 0x50
 8000d72:	2100      	movs	r1, #0
 8000d74:	4618      	mov	r0, r3
 8000d76:	f005 fd8a 	bl	800688e <memset>
  if(huart->Instance==LPUART1)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a3d      	ldr	r2, [pc, #244]	; (8000e74 <HAL_UART_MspInit+0x120>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d137      	bne.n	8000df4 <HAL_UART_MspInit+0xa0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000d84:	2320      	movs	r3, #32
 8000d86:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d8c:	f107 031c 	add.w	r3, r7, #28
 8000d90:	4618      	mov	r0, r3
 8000d92:	f003 f88d 	bl	8003eb0 <HAL_RCCEx_PeriphCLKConfig>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d9c:	f7ff ff5a 	bl	8000c54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000da0:	4b35      	ldr	r3, [pc, #212]	; (8000e78 <HAL_UART_MspInit+0x124>)
 8000da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000da4:	4a34      	ldr	r2, [pc, #208]	; (8000e78 <HAL_UART_MspInit+0x124>)
 8000da6:	f043 0301 	orr.w	r3, r3, #1
 8000daa:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000dac:	4b32      	ldr	r3, [pc, #200]	; (8000e78 <HAL_UART_MspInit+0x124>)
 8000dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	61bb      	str	r3, [r7, #24]
 8000db6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db8:	4b2f      	ldr	r3, [pc, #188]	; (8000e78 <HAL_UART_MspInit+0x124>)
 8000dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dbc:	4a2e      	ldr	r2, [pc, #184]	; (8000e78 <HAL_UART_MspInit+0x124>)
 8000dbe:	f043 0301 	orr.w	r3, r3, #1
 8000dc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dc4:	4b2c      	ldr	r3, [pc, #176]	; (8000e78 <HAL_UART_MspInit+0x124>)
 8000dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc8:	f003 0301 	and.w	r3, r3, #1
 8000dcc:	617b      	str	r3, [r7, #20]
 8000dce:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000dd0:	230c      	movs	r3, #12
 8000dd2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000de0:	230c      	movs	r3, #12
 8000de2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000de8:	4619      	mov	r1, r3
 8000dea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dee:	f002 f8b9 	bl	8002f64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000df2:	e03a      	b.n	8000e6a <HAL_UART_MspInit+0x116>
  else if(huart->Instance==USART1)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a20      	ldr	r2, [pc, #128]	; (8000e7c <HAL_UART_MspInit+0x128>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d135      	bne.n	8000e6a <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e02:	2300      	movs	r3, #0
 8000e04:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e06:	f107 031c 	add.w	r3, r7, #28
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f003 f850 	bl	8003eb0 <HAL_RCCEx_PeriphCLKConfig>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8000e16:	f7ff ff1d 	bl	8000c54 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e1a:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <HAL_UART_MspInit+0x124>)
 8000e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e1e:	4a16      	ldr	r2, [pc, #88]	; (8000e78 <HAL_UART_MspInit+0x124>)
 8000e20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e24:	6613      	str	r3, [r2, #96]	; 0x60
 8000e26:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <HAL_UART_MspInit+0x124>)
 8000e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e32:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <HAL_UART_MspInit+0x124>)
 8000e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e36:	4a10      	ldr	r2, [pc, #64]	; (8000e78 <HAL_UART_MspInit+0x124>)
 8000e38:	f043 0304 	orr.w	r3, r3, #4
 8000e3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <HAL_UART_MspInit+0x124>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e42:	f003 0304 	and.w	r3, r3, #4
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000e4a:	2330      	movs	r3, #48	; 0x30
 8000e4c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2300      	movs	r3, #0
 8000e58:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e5a:	2307      	movs	r3, #7
 8000e5c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e5e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e62:	4619      	mov	r1, r3
 8000e64:	4806      	ldr	r0, [pc, #24]	; (8000e80 <HAL_UART_MspInit+0x12c>)
 8000e66:	f002 f87d 	bl	8002f64 <HAL_GPIO_Init>
}
 8000e6a:	bf00      	nop
 8000e6c:	3780      	adds	r7, #128	; 0x80
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40008000 	.word	0x40008000
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	40013800 	.word	0x40013800
 8000e80:	48000800 	.word	0x48000800

08000e84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a16      	ldr	r2, [pc, #88]	; (8000eec <HAL_TIM_Base_MspInit+0x68>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d10c      	bne.n	8000eb0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e96:	4b16      	ldr	r3, [pc, #88]	; (8000ef0 <HAL_TIM_Base_MspInit+0x6c>)
 8000e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9a:	4a15      	ldr	r2, [pc, #84]	; (8000ef0 <HAL_TIM_Base_MspInit+0x6c>)
 8000e9c:	f043 0304 	orr.w	r3, r3, #4
 8000ea0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ea2:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <HAL_TIM_Base_MspInit+0x6c>)
 8000ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea6:	f003 0304 	and.w	r3, r3, #4
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000eae:	e018      	b.n	8000ee2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM6)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a0f      	ldr	r2, [pc, #60]	; (8000ef4 <HAL_TIM_Base_MspInit+0x70>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d113      	bne.n	8000ee2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000eba:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <HAL_TIM_Base_MspInit+0x6c>)
 8000ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ebe:	4a0c      	ldr	r2, [pc, #48]	; (8000ef0 <HAL_TIM_Base_MspInit+0x6c>)
 8000ec0:	f043 0310 	orr.w	r3, r3, #16
 8000ec4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <HAL_TIM_Base_MspInit+0x6c>)
 8000ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eca:	f003 0310 	and.w	r3, r3, #16
 8000ece:	60bb      	str	r3, [r7, #8]
 8000ed0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	2036      	movs	r0, #54	; 0x36
 8000ed8:	f002 f80f 	bl	8002efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000edc:	2036      	movs	r0, #54	; 0x36
 8000ede:	f002 f826 	bl	8002f2e <HAL_NVIC_EnableIRQ>
}
 8000ee2:	bf00      	nop
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40000800 	.word	0x40000800
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	40001000 	.word	0x40001000

08000ef8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08a      	sub	sp, #40	; 0x28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a20      	ldr	r2, [pc, #128]	; (8000f98 <HAL_TIM_MspPostInit+0xa0>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d13a      	bne.n	8000f90 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	4b20      	ldr	r3, [pc, #128]	; (8000f9c <HAL_TIM_MspPostInit+0xa4>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1e:	4a1f      	ldr	r2, [pc, #124]	; (8000f9c <HAL_TIM_MspPostInit+0xa4>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f26:	4b1d      	ldr	r3, [pc, #116]	; (8000f9c <HAL_TIM_MspPostInit+0xa4>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f32:	4b1a      	ldr	r3, [pc, #104]	; (8000f9c <HAL_TIM_MspPostInit+0xa4>)
 8000f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f36:	4a19      	ldr	r2, [pc, #100]	; (8000f9c <HAL_TIM_MspPostInit+0xa4>)
 8000f38:	f043 0302 	orr.w	r3, r3, #2
 8000f3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f3e:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <HAL_TIM_MspPostInit+0xa4>)
 8000f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    PB8-BOOT0     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f4a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f50:	2302      	movs	r3, #2
 8000f52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8000f5c:	230a      	movs	r3, #10
 8000f5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	4619      	mov	r1, r3
 8000f66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f6a:	f001 fffb 	bl	8002f64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000f80:	2302      	movs	r3, #2
 8000f82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <HAL_TIM_MspPostInit+0xa8>)
 8000f8c:	f001 ffea 	bl	8002f64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000f90:	bf00      	nop
 8000f92:	3728      	adds	r7, #40	; 0x28
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40000800 	.word	0x40000800
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	48000400 	.word	0x48000400

08000fa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <NMI_Handler+0x4>

08000faa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fae:	e7fe      	b.n	8000fae <HardFault_Handler+0x4>

08000fb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <MemManage_Handler+0x4>

08000fb6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fba:	e7fe      	b.n	8000fba <BusFault_Handler+0x4>

08000fbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <UsageFault_Handler+0x4>

08000fc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff0:	f000 f946 	bl	8001280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ffc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001000:	f002 f94a 	bl	8003298 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}

08001008 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800100c:	4802      	ldr	r0, [pc, #8]	; (8001018 <TIM6_DAC_IRQHandler+0x10>)
 800100e:	f003 fb4f 	bl	80046b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	2000025c 	.word	0x2000025c

0800101c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
 800102c:	e00a      	b.n	8001044 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800102e:	f3af 8000 	nop.w
 8001032:	4601      	mov	r1, r0
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	1c5a      	adds	r2, r3, #1
 8001038:	60ba      	str	r2, [r7, #8]
 800103a:	b2ca      	uxtb	r2, r1
 800103c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	3301      	adds	r3, #1
 8001042:	617b      	str	r3, [r7, #20]
 8001044:	697a      	ldr	r2, [r7, #20]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	429a      	cmp	r2, r3
 800104a:	dbf0      	blt.n	800102e <_read+0x12>
  }

  return len;
 800104c:	687b      	ldr	r3, [r7, #4]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b086      	sub	sp, #24
 800105a:	af00      	add	r7, sp, #0
 800105c:	60f8      	str	r0, [r7, #12]
 800105e:	60b9      	str	r1, [r7, #8]
 8001060:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
 8001066:	e009      	b.n	800107c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	1c5a      	adds	r2, r3, #1
 800106c:	60ba      	str	r2, [r7, #8]
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	4618      	mov	r0, r3
 8001072:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	3301      	adds	r3, #1
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	697a      	ldr	r2, [r7, #20]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	429a      	cmp	r2, r3
 8001082:	dbf1      	blt.n	8001068 <_write+0x12>
  }
  return len;
 8001084:	687b      	ldr	r3, [r7, #4]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <_close>:

int _close(int file)
{
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001096:	f04f 33ff 	mov.w	r3, #4294967295
}
 800109a:	4618      	mov	r0, r3
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010a6:	b480      	push	{r7}
 80010a8:	b083      	sub	sp, #12
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
 80010ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010b6:	605a      	str	r2, [r3, #4]
  return 0;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <_isatty>:

int _isatty(int file)
{
 80010c6:	b480      	push	{r7}
 80010c8:	b083      	sub	sp, #12
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010ce:	2301      	movs	r3, #1
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3714      	adds	r7, #20
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
	...

080010f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001100:	4a14      	ldr	r2, [pc, #80]	; (8001154 <_sbrk+0x5c>)
 8001102:	4b15      	ldr	r3, [pc, #84]	; (8001158 <_sbrk+0x60>)
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800110c:	4b13      	ldr	r3, [pc, #76]	; (800115c <_sbrk+0x64>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d102      	bne.n	800111a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001114:	4b11      	ldr	r3, [pc, #68]	; (800115c <_sbrk+0x64>)
 8001116:	4a12      	ldr	r2, [pc, #72]	; (8001160 <_sbrk+0x68>)
 8001118:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800111a:	4b10      	ldr	r3, [pc, #64]	; (800115c <_sbrk+0x64>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4413      	add	r3, r2
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	429a      	cmp	r2, r3
 8001126:	d207      	bcs.n	8001138 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001128:	f005 fc00 	bl	800692c <__errno>
 800112c:	4603      	mov	r3, r0
 800112e:	220c      	movs	r2, #12
 8001130:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001132:	f04f 33ff 	mov.w	r3, #4294967295
 8001136:	e009      	b.n	800114c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001138:	4b08      	ldr	r3, [pc, #32]	; (800115c <_sbrk+0x64>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800113e:	4b07      	ldr	r3, [pc, #28]	; (800115c <_sbrk+0x64>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4413      	add	r3, r2
 8001146:	4a05      	ldr	r2, [pc, #20]	; (800115c <_sbrk+0x64>)
 8001148:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800114a:	68fb      	ldr	r3, [r7, #12]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	2001c000 	.word	0x2001c000
 8001158:	00000400 	.word	0x00000400
 800115c:	200002c4 	.word	0x200002c4
 8001160:	20000418 	.word	0x20000418

08001164 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <SystemInit+0x20>)
 800116a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800116e:	4a05      	ldr	r2, [pc, #20]	; (8001184 <SystemInit+0x20>)
 8001170:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001174:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001188:	480d      	ldr	r0, [pc, #52]	; (80011c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800118a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800118c:	480d      	ldr	r0, [pc, #52]	; (80011c4 <LoopForever+0x6>)
  ldr r1, =_edata
 800118e:	490e      	ldr	r1, [pc, #56]	; (80011c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001190:	4a0e      	ldr	r2, [pc, #56]	; (80011cc <LoopForever+0xe>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001194:	e002      	b.n	800119c <LoopCopyDataInit>

08001196 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001196:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001198:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800119a:	3304      	adds	r3, #4

0800119c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800119c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800119e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a0:	d3f9      	bcc.n	8001196 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011a2:	4a0b      	ldr	r2, [pc, #44]	; (80011d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011a4:	4c0b      	ldr	r4, [pc, #44]	; (80011d4 <LoopForever+0x16>)
  movs r3, #0
 80011a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a8:	e001      	b.n	80011ae <LoopFillZerobss>

080011aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ac:	3204      	adds	r2, #4

080011ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b0:	d3fb      	bcc.n	80011aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011b2:	f7ff ffd7 	bl	8001164 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011b6:	f005 fbbf 	bl	8006938 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011ba:	f7ff fa33 	bl	8000624 <main>

080011be <LoopForever>:

LoopForever:
    b LoopForever
 80011be:	e7fe      	b.n	80011be <LoopForever>
  ldr   r0, =_estack
 80011c0:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80011c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80011cc:	080078f8 	.word	0x080078f8
  ldr r2, =_sbss
 80011d0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80011d4:	20000418 	.word	0x20000418

080011d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011d8:	e7fe      	b.n	80011d8 <ADC1_2_IRQHandler>

080011da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011e0:	2300      	movs	r3, #0
 80011e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e4:	2003      	movs	r0, #3
 80011e6:	f001 fe7d 	bl	8002ee4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011ea:	2000      	movs	r0, #0
 80011ec:	f000 f80e 	bl	800120c <HAL_InitTick>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d002      	beq.n	80011fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	71fb      	strb	r3, [r7, #7]
 80011fa:	e001      	b.n	8001200 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011fc:	f7ff fd30 	bl	8000c60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001200:	79fb      	ldrb	r3, [r7, #7]

}
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001214:	2300      	movs	r3, #0
 8001216:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001218:	4b16      	ldr	r3, [pc, #88]	; (8001274 <HAL_InitTick+0x68>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d022      	beq.n	8001266 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001220:	4b15      	ldr	r3, [pc, #84]	; (8001278 <HAL_InitTick+0x6c>)
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	4b13      	ldr	r3, [pc, #76]	; (8001274 <HAL_InitTick+0x68>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800122c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001230:	fbb2 f3f3 	udiv	r3, r2, r3
 8001234:	4618      	mov	r0, r3
 8001236:	f001 fe88 	bl	8002f4a <HAL_SYSTICK_Config>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d10f      	bne.n	8001260 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b0f      	cmp	r3, #15
 8001244:	d809      	bhi.n	800125a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001246:	2200      	movs	r2, #0
 8001248:	6879      	ldr	r1, [r7, #4]
 800124a:	f04f 30ff 	mov.w	r0, #4294967295
 800124e:	f001 fe54 	bl	8002efa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001252:	4a0a      	ldr	r2, [pc, #40]	; (800127c <HAL_InitTick+0x70>)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6013      	str	r3, [r2, #0]
 8001258:	e007      	b.n	800126a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	73fb      	strb	r3, [r7, #15]
 800125e:	e004      	b.n	800126a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	73fb      	strb	r3, [r7, #15]
 8001264:	e001      	b.n	800126a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800126a:	7bfb      	ldrb	r3, [r7, #15]
}
 800126c:	4618      	mov	r0, r3
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000008 	.word	0x20000008
 8001278:	20000000 	.word	0x20000000
 800127c:	20000004 	.word	0x20000004

08001280 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <HAL_IncTick+0x1c>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <HAL_IncTick+0x20>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4413      	add	r3, r2
 800128e:	4a03      	ldr	r2, [pc, #12]	; (800129c <HAL_IncTick+0x1c>)
 8001290:	6013      	str	r3, [r2, #0]
}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	200002c8 	.word	0x200002c8
 80012a0:	20000008 	.word	0x20000008

080012a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  return uwTick;
 80012a8:	4b03      	ldr	r3, [pc, #12]	; (80012b8 <HAL_GetTick+0x14>)
 80012aa:	681b      	ldr	r3, [r3, #0]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	200002c8 	.word	0x200002c8

080012bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c4:	f7ff ffee 	bl	80012a4 <HAL_GetTick>
 80012c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d4:	d004      	beq.n	80012e0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80012d6:	4b09      	ldr	r3, [pc, #36]	; (80012fc <HAL_Delay+0x40>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	4413      	add	r3, r2
 80012de:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012e0:	bf00      	nop
 80012e2:	f7ff ffdf 	bl	80012a4 <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	68fa      	ldr	r2, [r7, #12]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d8f7      	bhi.n	80012e2 <HAL_Delay+0x26>
  {
  }
}
 80012f2:	bf00      	nop
 80012f4:	bf00      	nop
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000008 	.word	0x20000008

08001300 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	431a      	orrs	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	609a      	str	r2, [r3, #8]
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001326:	b480      	push	{r7}
 8001328:	b083      	sub	sp, #12
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
 800132e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	431a      	orrs	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	609a      	str	r2, [r3, #8]
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800135c:	4618      	mov	r0, r3
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001368:	b480      	push	{r7}
 800136a:	b087      	sub	sp, #28
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
 8001374:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	3360      	adds	r3, #96	; 0x60
 800137a:	461a      	mov	r2, r3
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4413      	add	r3, r2
 8001382:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4b08      	ldr	r3, [pc, #32]	; (80013ac <LL_ADC_SetOffset+0x44>)
 800138a:	4013      	ands	r3, r2
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	430a      	orrs	r2, r1
 8001396:	4313      	orrs	r3, r2
 8001398:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80013a0:	bf00      	nop
 80013a2:	371c      	adds	r7, #28
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	03fff000 	.word	0x03fff000

080013b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3360      	adds	r3, #96	; 0x60
 80013be:	461a      	mov	r2, r3
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	4413      	add	r3, r2
 80013c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80013dc:	b480      	push	{r7}
 80013de:	b087      	sub	sp, #28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	3360      	adds	r3, #96	; 0x60
 80013ec:	461a      	mov	r2, r3
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	431a      	orrs	r2, r3
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001406:	bf00      	nop
 8001408:	371c      	adds	r7, #28
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001412:	b480      	push	{r7}
 8001414:	b087      	sub	sp, #28
 8001416:	af00      	add	r7, sp, #0
 8001418:	60f8      	str	r0, [r7, #12]
 800141a:	60b9      	str	r1, [r7, #8]
 800141c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	3360      	adds	r3, #96	; 0x60
 8001422:	461a      	mov	r2, r3
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	4413      	add	r3, r2
 800142a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	431a      	orrs	r2, r3
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800143c:	bf00      	nop
 800143e:	371c      	adds	r7, #28
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001448:	b480      	push	{r7}
 800144a:	b087      	sub	sp, #28
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	3360      	adds	r3, #96	; 0x60
 8001458:	461a      	mov	r2, r3
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4413      	add	r3, r2
 8001460:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	431a      	orrs	r2, r3
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001472:	bf00      	nop
 8001474:	371c      	adds	r7, #28
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800147e:	b480      	push	{r7}
 8001480:	b083      	sub	sp, #12
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
 8001486:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	431a      	orrs	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	615a      	str	r2, [r3, #20]
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d101      	bne.n	80014bc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80014b8:	2301      	movs	r3, #1
 80014ba:	e000      	b.n	80014be <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80014ca:	b480      	push	{r7}
 80014cc:	b087      	sub	sp, #28
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	60f8      	str	r0, [r7, #12]
 80014d2:	60b9      	str	r1, [r7, #8]
 80014d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	3330      	adds	r3, #48	; 0x30
 80014da:	461a      	mov	r2, r3
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	0a1b      	lsrs	r3, r3, #8
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	f003 030c 	and.w	r3, r3, #12
 80014e6:	4413      	add	r3, r2
 80014e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	f003 031f 	and.w	r3, r3, #31
 80014f4:	211f      	movs	r1, #31
 80014f6:	fa01 f303 	lsl.w	r3, r1, r3
 80014fa:	43db      	mvns	r3, r3
 80014fc:	401a      	ands	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	0e9b      	lsrs	r3, r3, #26
 8001502:	f003 011f 	and.w	r1, r3, #31
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	f003 031f 	and.w	r3, r3, #31
 800150c:	fa01 f303 	lsl.w	r3, r1, r3
 8001510:	431a      	orrs	r2, r3
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001516:	bf00      	nop
 8001518:	371c      	adds	r7, #28
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001522:	b480      	push	{r7}
 8001524:	b087      	sub	sp, #28
 8001526:	af00      	add	r7, sp, #0
 8001528:	60f8      	str	r0, [r7, #12]
 800152a:	60b9      	str	r1, [r7, #8]
 800152c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	3314      	adds	r3, #20
 8001532:	461a      	mov	r2, r3
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	0e5b      	lsrs	r3, r3, #25
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	f003 0304 	and.w	r3, r3, #4
 800153e:	4413      	add	r3, r2
 8001540:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	0d1b      	lsrs	r3, r3, #20
 800154a:	f003 031f 	and.w	r3, r3, #31
 800154e:	2107      	movs	r1, #7
 8001550:	fa01 f303 	lsl.w	r3, r1, r3
 8001554:	43db      	mvns	r3, r3
 8001556:	401a      	ands	r2, r3
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	0d1b      	lsrs	r3, r3, #20
 800155c:	f003 031f 	and.w	r3, r3, #31
 8001560:	6879      	ldr	r1, [r7, #4]
 8001562:	fa01 f303 	lsl.w	r3, r1, r3
 8001566:	431a      	orrs	r2, r3
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800156c:	bf00      	nop
 800156e:	371c      	adds	r7, #28
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4a0f      	ldr	r2, [pc, #60]	; (80015c4 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d10a      	bne.n	80015a2 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001598:	431a      	orrs	r2, r3
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80015a0:	e00a      	b.n	80015b8 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015ae:	43db      	mvns	r3, r3
 80015b0:	401a      	ands	r2, r3
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80015b8:	bf00      	nop
 80015ba:	3714      	adds	r7, #20
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	407f0000 	.word	0x407f0000

080015c8 <LL_ADC_SetAnalogWDMonitChannels>:
  *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
  *          -  On this STM32 series, all ADCx are not available on all devices. Refer to device datasheet for more details.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b087      	sub	sp, #28
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	330c      	adds	r3, #12
 80015d8:	4618      	mov	r0, r3
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	0d1b      	lsrs	r3, r3, #20
 80015de:	f003 0103 	and.w	r1, r3, #3
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	f003 0201 	and.w	r2, r3, #1
 80015e8:	4613      	mov	r3, r2
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	4413      	add	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	440b      	add	r3, r1
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4403      	add	r3, r0
 80015f6:	617b      	str	r3, [r7, #20]
                                             + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	f023 4302 	bic.w	r3, r3, #2181038080	; 0x82000000
 8001602:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 8001606:	43db      	mvns	r3, r3
 8001608:	401a      	ands	r2, r3
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	400b      	ands	r3, r1
 8001610:	431a      	orrs	r2, r3
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 8001616:	bf00      	nop
 8001618:	371c      	adds	r7, #28
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue,
                                                     uint32_t AWDThresholdLowValue)
{
 8001622:	b480      	push	{r7}
 8001624:	b087      	sub	sp, #28
 8001626:	af00      	add	r7, sp, #0
 8001628:	60f8      	str	r0, [r7, #12]
 800162a:	60b9      	str	r1, [r7, #8]
 800162c:	607a      	str	r2, [r7, #4]
 800162e:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	3320      	adds	r3, #32
 8001634:	461a      	mov	r2, r3
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	0d1b      	lsrs	r3, r3, #20
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	f003 030c 	and.w	r3, r3, #12
 8001640:	4413      	add	r3, r2
 8001642:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 22f0 	and.w	r2, r3, #4026593280	; 0xf000f000
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	0419      	lsls	r1, r3, #16
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	430b      	orrs	r3, r1
 8001654:	431a      	orrs	r2, r3
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	601a      	str	r2, [r3, #0]
             ADC_TR1_HT1 | ADC_TR1_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 800165a:	bf00      	nop
 800165c:	371c      	adds	r7, #28
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001666:	b480      	push	{r7}
 8001668:	b083      	sub	sp, #12
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 031f 	and.w	r3, r3, #31
}
 8001676:	4618      	mov	r0, r3
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001692:	4618      	mov	r0, r3
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80016ae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	6093      	str	r3, [r2, #8]
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80016d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80016d6:	d101      	bne.n	80016dc <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80016d8:	2301      	movs	r3, #1
 80016da:	e000      	b.n	80016de <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80016fa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016fe:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001712:	b480      	push	{r7}
 8001714:	b083      	sub	sp, #12
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001722:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001726:	d101      	bne.n	800172c <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001728:	2301      	movs	r3, #1
 800172a:	e000      	b.n	800172e <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800174a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800174e:	f043 0201 	orr.w	r2, r3, #1
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b01      	cmp	r3, #1
 8001774:	d101      	bne.n	800177a <LL_ADC_IsEnabled+0x18>
 8001776:	2301      	movs	r3, #1
 8001778:	e000      	b.n	800177c <LL_ADC_IsEnabled+0x1a>
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001798:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800179c:	f043 0204 	orr.w	r2, r3, #4
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	2b04      	cmp	r3, #4
 80017c2:	d101      	bne.n	80017c8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80017c4:	2301      	movs	r3, #1
 80017c6:	e000      	b.n	80017ca <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 0308 	and.w	r3, r3, #8
 80017e6:	2b08      	cmp	r3, #8
 80017e8:	d101      	bne.n	80017ee <LL_ADC_INJ_IsConversionOngoing+0x18>
 80017ea:	2301      	movs	r3, #1
 80017ec:	e000      	b.n	80017f0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2280      	movs	r2, #128	; 0x80
 8001808:	601a      	str	r2, [r3, #0]
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 8001816:	b480      	push	{r7}
 8001818:	b083      	sub	sp, #12
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001824:	601a      	str	r2, [r3, #0]
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001840:	601a      	str	r2, [r3, #0]
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 800184e:	b480      	push	{r7}
 8001850:	b083      	sub	sp, #12
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	605a      	str	r2, [r3, #4]
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	605a      	str	r2, [r3, #4]
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	605a      	str	r2, [r3, #4]
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	605a      	str	r2, [r3, #4]
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b083      	sub	sp, #12
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	605a      	str	r2, [r3, #4]
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b083      	sub	sp, #12
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	605a      	str	r2, [r3, #4]
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
	...

08001910 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001910:	b590      	push	{r4, r7, lr}
 8001912:	b089      	sub	sp, #36	; 0x24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001918:	2300      	movs	r3, #0
 800191a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800191c:	2300      	movs	r3, #0
 800191e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e1a1      	b.n	8001c6e <HAL_ADC_Init+0x35e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001934:	2b00      	cmp	r3, #0
 8001936:	d109      	bne.n	800194c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff f9b5 	bl	8000ca8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff feb6 	bl	80016c2 <LL_ADC_IsDeepPowerDownEnabled>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d004      	beq.n	8001966 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff fe9c 	bl	800169e <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff fed1 	bl	8001712 <LL_ADC_IsInternalRegulatorEnabled>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d115      	bne.n	80019a2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff feb5 	bl	80016ea <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001980:	4b9a      	ldr	r3, [pc, #616]	; (8001bec <HAL_ADC_Init+0x2dc>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	099b      	lsrs	r3, r3, #6
 8001986:	4a9a      	ldr	r2, [pc, #616]	; (8001bf0 <HAL_ADC_Init+0x2e0>)
 8001988:	fba2 2303 	umull	r2, r3, r2, r3
 800198c:	099b      	lsrs	r3, r3, #6
 800198e:	3301      	adds	r3, #1
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001994:	e002      	b.n	800199c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	3b01      	subs	r3, #1
 800199a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1f9      	bne.n	8001996 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff feb3 	bl	8001712 <LL_ADC_IsInternalRegulatorEnabled>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d10d      	bne.n	80019ce <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019b6:	f043 0210 	orr.w	r2, r3, #16
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019c2:	f043 0201 	orr.w	r2, r3, #1
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff feec 	bl	80017b0 <LL_ADC_REG_IsConversionOngoing>
 80019d8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019de:	f003 0310 	and.w	r3, r3, #16
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f040 813a 	bne.w	8001c5c <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f040 8136 	bne.w	8001c5c <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80019f8:	f043 0202 	orr.w	r2, r3, #2
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff feac 	bl	8001762 <LL_ADC_IsEnabled>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d137      	bne.n	8001a80 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a18:	d004      	beq.n	8001a24 <HAL_ADC_Init+0x114>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a75      	ldr	r2, [pc, #468]	; (8001bf4 <HAL_ADC_Init+0x2e4>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d10f      	bne.n	8001a44 <HAL_ADC_Init+0x134>
 8001a24:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001a28:	f7ff fe9b 	bl	8001762 <LL_ADC_IsEnabled>
 8001a2c:	4604      	mov	r4, r0
 8001a2e:	4871      	ldr	r0, [pc, #452]	; (8001bf4 <HAL_ADC_Init+0x2e4>)
 8001a30:	f7ff fe97 	bl	8001762 <LL_ADC_IsEnabled>
 8001a34:	4603      	mov	r3, r0
 8001a36:	4323      	orrs	r3, r4
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	bf0c      	ite	eq
 8001a3c:	2301      	moveq	r3, #1
 8001a3e:	2300      	movne	r3, #0
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	e008      	b.n	8001a56 <HAL_ADC_Init+0x146>
 8001a44:	486c      	ldr	r0, [pc, #432]	; (8001bf8 <HAL_ADC_Init+0x2e8>)
 8001a46:	f7ff fe8c 	bl	8001762 <LL_ADC_IsEnabled>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	bf0c      	ite	eq
 8001a50:	2301      	moveq	r3, #1
 8001a52:	2300      	movne	r3, #0
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d012      	beq.n	8001a80 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a62:	d004      	beq.n	8001a6e <HAL_ADC_Init+0x15e>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a62      	ldr	r2, [pc, #392]	; (8001bf4 <HAL_ADC_Init+0x2e4>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d101      	bne.n	8001a72 <HAL_ADC_Init+0x162>
 8001a6e:	4a63      	ldr	r2, [pc, #396]	; (8001bfc <HAL_ADC_Init+0x2ec>)
 8001a70:	e000      	b.n	8001a74 <HAL_ADC_Init+0x164>
 8001a72:	4a63      	ldr	r2, [pc, #396]	; (8001c00 <HAL_ADC_Init+0x2f0>)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4610      	mov	r0, r2
 8001a7c:	f7ff fc40 	bl	8001300 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	7f5b      	ldrb	r3, [r3, #29]
 8001a84:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a8a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001a90:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001a96:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a9e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d106      	bne.n	8001abc <HAL_ADC_Init+0x1ac>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	045b      	lsls	r3, r3, #17
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d009      	beq.n	8001ad8 <HAL_ADC_Init+0x1c8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	68da      	ldr	r2, [r3, #12]
 8001ade:	4b49      	ldr	r3, [pc, #292]	; (8001c04 <HAL_ADC_Init+0x2f4>)
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	6812      	ldr	r2, [r2, #0]
 8001ae6:	69b9      	ldr	r1, [r7, #24]
 8001ae8:	430b      	orrs	r3, r1
 8001aea:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	430a      	orrs	r2, r1
 8001b00:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff fe52 	bl	80017b0 <LL_ADC_REG_IsConversionOngoing>
 8001b0c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fe5f 	bl	80017d6 <LL_ADC_INJ_IsConversionOngoing>
 8001b18:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d17b      	bne.n	8001c18 <HAL_ADC_Init+0x308>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d178      	bne.n	8001c18 <HAL_ADC_Init+0x308>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b2a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b32:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b34:	4313      	orrs	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b42:	f023 0302 	bic.w	r3, r3, #2
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	6812      	ldr	r2, [r2, #0]
 8001b4a:	69b9      	ldr	r1, [r7, #24]
 8001b4c:	430b      	orrs	r3, r1
 8001b4e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d017      	beq.n	8001b88 <HAL_ADC_Init+0x278>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	691a      	ldr	r2, [r3, #16]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001b66:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001b70:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	6911      	ldr	r1, [r2, #16]
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	6812      	ldr	r2, [r2, #0]
 8001b80:	430b      	orrs	r3, r1
 8001b82:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001b86:	e013      	b.n	8001bb0 <HAL_ADC_Init+0x2a0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	691a      	ldr	r2, [r3, #16]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b96:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	6812      	ldr	r2, [r2, #0]
 8001ba4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001ba8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bac:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d126      	bne.n	8001c08 <HAL_ADC_Init+0x2f8>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001bc4:	f023 0304 	bic.w	r3, r3, #4
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001bd0:	4311      	orrs	r1, r2
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001bd6:	4311      	orrs	r1, r2
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	431a      	orrs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f042 0201 	orr.w	r2, r2, #1
 8001be8:	611a      	str	r2, [r3, #16]
 8001bea:	e015      	b.n	8001c18 <HAL_ADC_Init+0x308>
 8001bec:	20000000 	.word	0x20000000
 8001bf0:	053e2d63 	.word	0x053e2d63
 8001bf4:	50000100 	.word	0x50000100
 8001bf8:	50000400 	.word	0x50000400
 8001bfc:	50000300 	.word	0x50000300
 8001c00:	50000700 	.word	0x50000700
 8001c04:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	691a      	ldr	r2, [r3, #16]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 0201 	bic.w	r2, r2, #1
 8001c16:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	695b      	ldr	r3, [r3, #20]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d10c      	bne.n	8001c3a <HAL_ADC_Init+0x32a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	f023 010f 	bic.w	r1, r3, #15
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a1b      	ldr	r3, [r3, #32]
 8001c2e:	1e5a      	subs	r2, r3, #1
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	430a      	orrs	r2, r1
 8001c36:	631a      	str	r2, [r3, #48]	; 0x30
 8001c38:	e007      	b.n	8001c4a <HAL_ADC_Init+0x33a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f022 020f 	bic.w	r2, r2, #15
 8001c48:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c4e:	f023 0303 	bic.w	r3, r3, #3
 8001c52:	f043 0201 	orr.w	r2, r3, #1
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c5a:	e007      	b.n	8001c6c <HAL_ADC_Init+0x35c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c60:	f043 0210 	orr.w	r2, r3, #16
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3724      	adds	r7, #36	; 0x24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd90      	pop	{r4, r7, pc}
 8001c76:	bf00      	nop

08001c78 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c88:	d004      	beq.n	8001c94 <HAL_ADC_Start+0x1c>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a5c      	ldr	r2, [pc, #368]	; (8001e00 <HAL_ADC_Start+0x188>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d101      	bne.n	8001c98 <HAL_ADC_Start+0x20>
 8001c94:	4b5b      	ldr	r3, [pc, #364]	; (8001e04 <HAL_ADC_Start+0x18c>)
 8001c96:	e000      	b.n	8001c9a <HAL_ADC_Start+0x22>
 8001c98:	4b5b      	ldr	r3, [pc, #364]	; (8001e08 <HAL_ADC_Start+0x190>)
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff fce3 	bl	8001666 <LL_ADC_GetMultimode>
 8001ca0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff fd82 	bl	80017b0 <LL_ADC_REG_IsConversionOngoing>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f040 809f 	bne.w	8001df2 <HAL_ADC_Start+0x17a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d101      	bne.n	8001cc2 <HAL_ADC_Start+0x4a>
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	e09a      	b.n	8001df8 <HAL_ADC_Start+0x180>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 ffd8 	bl	8002c80 <ADC_Enable>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001cd4:	7dfb      	ldrb	r3, [r7, #23]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f040 8086 	bne.w	8001de8 <HAL_ADC_Start+0x170>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ce4:	f023 0301 	bic.w	r3, r3, #1
 8001ce8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a42      	ldr	r2, [pc, #264]	; (8001e00 <HAL_ADC_Start+0x188>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d002      	beq.n	8001d00 <HAL_ADC_Start+0x88>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	e001      	b.n	8001d04 <HAL_ADC_Start+0x8c>
 8001d00:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	6812      	ldr	r2, [r2, #0]
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d002      	beq.n	8001d12 <HAL_ADC_Start+0x9a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d105      	bne.n	8001d1e <HAL_ADC_Start+0xa6>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d16:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d2a:	d106      	bne.n	8001d3a <HAL_ADC_Start+0xc2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d30:	f023 0206 	bic.w	r2, r3, #6
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	661a      	str	r2, [r3, #96]	; 0x60
 8001d38:	e002      	b.n	8001d40 <HAL_ADC_Start+0xc8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	221c      	movs	r2, #28
 8001d46:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a2a      	ldr	r2, [pc, #168]	; (8001e00 <HAL_ADC_Start+0x188>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d002      	beq.n	8001d60 <HAL_ADC_Start+0xe8>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	e001      	b.n	8001d64 <HAL_ADC_Start+0xec>
 8001d60:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	6812      	ldr	r2, [r2, #0]
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d008      	beq.n	8001d7e <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d005      	beq.n	8001d7e <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	2b05      	cmp	r3, #5
 8001d76:	d002      	beq.n	8001d7e <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	2b09      	cmp	r3, #9
 8001d7c:	d114      	bne.n	8001da8 <HAL_ADC_Start+0x130>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d007      	beq.n	8001d9c <HAL_ADC_Start+0x124>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d90:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d94:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff fcf1 	bl	8001788 <LL_ADC_REG_StartConversion>
 8001da6:	e026      	b.n	8001df6 <HAL_ADC_Start+0x17e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dac:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a11      	ldr	r2, [pc, #68]	; (8001e00 <HAL_ADC_Start+0x188>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d002      	beq.n	8001dc4 <HAL_ADC_Start+0x14c>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	e001      	b.n	8001dc8 <HAL_ADC_Start+0x150>
 8001dc4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001dc8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d00f      	beq.n	8001df6 <HAL_ADC_Start+0x17e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dda:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001dde:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	65da      	str	r2, [r3, #92]	; 0x5c
 8001de6:	e006      	b.n	8001df6 <HAL_ADC_Start+0x17e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001df0:	e001      	b.n	8001df6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001df2:	2302      	movs	r3, #2
 8001df4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3718      	adds	r7, #24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	50000100 	.word	0x50000100
 8001e04:	50000300 	.word	0x50000300
 8001e08:	50000700 	.word	0x50000700

08001e0c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b088      	sub	sp, #32
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e1e:	d004      	beq.n	8001e2a <HAL_ADC_PollForConversion+0x1e>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a70      	ldr	r2, [pc, #448]	; (8001fe8 <HAL_ADC_PollForConversion+0x1dc>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d101      	bne.n	8001e2e <HAL_ADC_PollForConversion+0x22>
 8001e2a:	4b70      	ldr	r3, [pc, #448]	; (8001fec <HAL_ADC_PollForConversion+0x1e0>)
 8001e2c:	e000      	b.n	8001e30 <HAL_ADC_PollForConversion+0x24>
 8001e2e:	4b70      	ldr	r3, [pc, #448]	; (8001ff0 <HAL_ADC_PollForConversion+0x1e4>)
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff fc18 	bl	8001666 <LL_ADC_GetMultimode>
 8001e36:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	2b08      	cmp	r3, #8
 8001e3e:	d102      	bne.n	8001e46 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001e40:	2308      	movs	r3, #8
 8001e42:	61fb      	str	r3, [r7, #28]
 8001e44:	e037      	b.n	8001eb6 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d005      	beq.n	8001e58 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	2b05      	cmp	r3, #5
 8001e50:	d002      	beq.n	8001e58 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	2b09      	cmp	r3, #9
 8001e56:	d111      	bne.n	8001e7c <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d007      	beq.n	8001e76 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e6a:	f043 0220 	orr.w	r2, r3, #32
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e0b3      	b.n	8001fde <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001e76:	2304      	movs	r3, #4
 8001e78:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001e7a:	e01c      	b.n	8001eb6 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e84:	d004      	beq.n	8001e90 <HAL_ADC_PollForConversion+0x84>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a57      	ldr	r2, [pc, #348]	; (8001fe8 <HAL_ADC_PollForConversion+0x1dc>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d101      	bne.n	8001e94 <HAL_ADC_PollForConversion+0x88>
 8001e90:	4b56      	ldr	r3, [pc, #344]	; (8001fec <HAL_ADC_PollForConversion+0x1e0>)
 8001e92:	e000      	b.n	8001e96 <HAL_ADC_PollForConversion+0x8a>
 8001e94:	4b56      	ldr	r3, [pc, #344]	; (8001ff0 <HAL_ADC_PollForConversion+0x1e4>)
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff fbf3 	bl	8001682 <LL_ADC_GetMultiDMATransfer>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d007      	beq.n	8001eb2 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea6:	f043 0220 	orr.w	r2, r3, #32
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e095      	b.n	8001fde <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001eb2:	2304      	movs	r3, #4
 8001eb4:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001eb6:	f7ff f9f5 	bl	80012a4 <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001ebc:	e021      	b.n	8001f02 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec4:	d01d      	beq.n	8001f02 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001ec6:	f7ff f9ed 	bl	80012a4 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d302      	bcc.n	8001edc <HAL_ADC_PollForConversion+0xd0>
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d112      	bne.n	8001f02 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10b      	bne.n	8001f02 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eee:	f043 0204 	orr.w	r2, r3, #4
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e06d      	b.n	8001fde <HAL_ADC_PollForConversion+0x1d2>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d0d6      	beq.n	8001ebe <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f14:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff fabf 	bl	80014a4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d01c      	beq.n	8001f66 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	7f5b      	ldrb	r3, [r3, #29]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d118      	bne.n	8001f66 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	2b08      	cmp	r3, #8
 8001f40:	d111      	bne.n	8001f66 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d105      	bne.n	8001f66 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f5e:	f043 0201 	orr.w	r2, r3, #1
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a1f      	ldr	r2, [pc, #124]	; (8001fe8 <HAL_ADC_PollForConversion+0x1dc>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d002      	beq.n	8001f76 <HAL_ADC_PollForConversion+0x16a>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	e001      	b.n	8001f7a <HAL_ADC_PollForConversion+0x16e>
 8001f76:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	6812      	ldr	r2, [r2, #0]
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d008      	beq.n	8001f94 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d005      	beq.n	8001f94 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	2b05      	cmp	r3, #5
 8001f8c:	d002      	beq.n	8001f94 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	2b09      	cmp	r3, #9
 8001f92:	d104      	bne.n	8001f9e <HAL_ADC_PollForConversion+0x192>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	61bb      	str	r3, [r7, #24]
 8001f9c:	e00d      	b.n	8001fba <HAL_ADC_PollForConversion+0x1ae>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a11      	ldr	r2, [pc, #68]	; (8001fe8 <HAL_ADC_PollForConversion+0x1dc>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d002      	beq.n	8001fae <HAL_ADC_PollForConversion+0x1a2>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	e001      	b.n	8001fb2 <HAL_ADC_PollForConversion+0x1a6>
 8001fae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001fb2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	2b08      	cmp	r3, #8
 8001fbe:	d104      	bne.n	8001fca <HAL_ADC_PollForConversion+0x1be>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2208      	movs	r2, #8
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	e008      	b.n	8001fdc <HAL_ADC_PollForConversion+0x1d0>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d103      	bne.n	8001fdc <HAL_ADC_PollForConversion+0x1d0>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	220c      	movs	r2, #12
 8001fda:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3720      	adds	r7, #32
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	50000100 	.word	0x50000100
 8001fec:	50000300 	.word	0x50000300
 8001ff0:	50000700 	.word	0x50000700

08001ff4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002002:	4618      	mov	r0, r3
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
	...

08002010 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b0b6      	sub	sp, #216	; 0xd8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800201a:	2300      	movs	r3, #0
 800201c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002020:	2300      	movs	r3, #0
 8002022:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800202a:	2b01      	cmp	r3, #1
 800202c:	d102      	bne.n	8002034 <HAL_ADC_ConfigChannel+0x24>
 800202e:	2302      	movs	r3, #2
 8002030:	f000 bc04 	b.w	800283c <HAL_ADC_ConfigChannel+0x82c>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff fbb5 	bl	80017b0 <LL_ADC_REG_IsConversionOngoing>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	f040 83e8 	bne.w	800281e <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6818      	ldr	r0, [r3, #0]
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	6859      	ldr	r1, [r3, #4]
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	461a      	mov	r2, r3
 800205c:	f7ff fa35 	bl	80014ca <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff fba3 	bl	80017b0 <LL_ADC_REG_IsConversionOngoing>
 800206a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff fbaf 	bl	80017d6 <LL_ADC_INJ_IsConversionOngoing>
 8002078:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800207c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002080:	2b00      	cmp	r3, #0
 8002082:	f040 81d9 	bne.w	8002438 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002086:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800208a:	2b00      	cmp	r3, #0
 800208c:	f040 81d4 	bne.w	8002438 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002098:	d10f      	bne.n	80020ba <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6818      	ldr	r0, [r3, #0]
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2200      	movs	r2, #0
 80020a4:	4619      	mov	r1, r3
 80020a6:	f7ff fa3c 	bl	8001522 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff f9e3 	bl	800147e <LL_ADC_SetSamplingTimeCommonConfig>
 80020b8:	e00e      	b.n	80020d8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6818      	ldr	r0, [r3, #0]
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	6819      	ldr	r1, [r3, #0]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	461a      	mov	r2, r3
 80020c8:	f7ff fa2b 	bl	8001522 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2100      	movs	r1, #0
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff f9d3 	bl	800147e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	695a      	ldr	r2, [r3, #20]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	08db      	lsrs	r3, r3, #3
 80020e4:	f003 0303 	and.w	r3, r3, #3
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	d022      	beq.n	8002140 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6818      	ldr	r0, [r3, #0]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	6919      	ldr	r1, [r3, #16]
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800210a:	f7ff f92d 	bl	8001368 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6818      	ldr	r0, [r3, #0]
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	6919      	ldr	r1, [r3, #16]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	461a      	mov	r2, r3
 800211c:	f7ff f979 	bl	8001412 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6818      	ldr	r0, [r3, #0]
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	6919      	ldr	r1, [r3, #16]
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	7f1b      	ldrb	r3, [r3, #28]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d102      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x126>
 8002130:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002134:	e000      	b.n	8002138 <HAL_ADC_ConfigChannel+0x128>
 8002136:	2300      	movs	r3, #0
 8002138:	461a      	mov	r2, r3
 800213a:	f7ff f985 	bl	8001448 <LL_ADC_SetOffsetSaturation>
 800213e:	e17b      	b.n	8002438 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2100      	movs	r1, #0
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff f932 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 800214c:	4603      	mov	r3, r0
 800214e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002152:	2b00      	cmp	r3, #0
 8002154:	d10a      	bne.n	800216c <HAL_ADC_ConfigChannel+0x15c>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2100      	movs	r1, #0
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff f927 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 8002162:	4603      	mov	r3, r0
 8002164:	0e9b      	lsrs	r3, r3, #26
 8002166:	f003 021f 	and.w	r2, r3, #31
 800216a:	e01e      	b.n	80021aa <HAL_ADC_ConfigChannel+0x19a>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2100      	movs	r1, #0
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff f91c 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 8002178:	4603      	mov	r3, r0
 800217a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002182:	fa93 f3a3 	rbit	r3, r3
 8002186:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800218a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800218e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002192:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800219a:	2320      	movs	r3, #32
 800219c:	e004      	b.n	80021a8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800219e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021a2:	fab3 f383 	clz	r3, r3
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d105      	bne.n	80021c2 <HAL_ADC_ConfigChannel+0x1b2>
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	0e9b      	lsrs	r3, r3, #26
 80021bc:	f003 031f 	and.w	r3, r3, #31
 80021c0:	e018      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x1e4>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80021ce:	fa93 f3a3 	rbit	r3, r3
 80021d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80021d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80021da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80021de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80021e6:	2320      	movs	r3, #32
 80021e8:	e004      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80021ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80021ee:	fab3 f383 	clz	r3, r3
 80021f2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d106      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2200      	movs	r2, #0
 80021fe:	2100      	movs	r1, #0
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff f8eb 	bl	80013dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2101      	movs	r1, #1
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff f8cf 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 8002212:	4603      	mov	r3, r0
 8002214:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002218:	2b00      	cmp	r3, #0
 800221a:	d10a      	bne.n	8002232 <HAL_ADC_ConfigChannel+0x222>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2101      	movs	r1, #1
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff f8c4 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 8002228:	4603      	mov	r3, r0
 800222a:	0e9b      	lsrs	r3, r3, #26
 800222c:	f003 021f 	and.w	r2, r3, #31
 8002230:	e01e      	b.n	8002270 <HAL_ADC_ConfigChannel+0x260>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2101      	movs	r1, #1
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff f8b9 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 800223e:	4603      	mov	r3, r0
 8002240:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002244:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002248:	fa93 f3a3 	rbit	r3, r3
 800224c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002250:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002254:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002258:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800225c:	2b00      	cmp	r3, #0
 800225e:	d101      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002260:	2320      	movs	r3, #32
 8002262:	e004      	b.n	800226e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002264:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002268:	fab3 f383 	clz	r3, r3
 800226c:	b2db      	uxtb	r3, r3
 800226e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002278:	2b00      	cmp	r3, #0
 800227a:	d105      	bne.n	8002288 <HAL_ADC_ConfigChannel+0x278>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	0e9b      	lsrs	r3, r3, #26
 8002282:	f003 031f 	and.w	r3, r3, #31
 8002286:	e018      	b.n	80022ba <HAL_ADC_ConfigChannel+0x2aa>
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002290:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002294:	fa93 f3a3 	rbit	r3, r3
 8002298:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800229c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80022a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80022a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d101      	bne.n	80022b0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80022ac:	2320      	movs	r3, #32
 80022ae:	e004      	b.n	80022ba <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80022b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022b4:	fab3 f383 	clz	r3, r3
 80022b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d106      	bne.n	80022cc <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2200      	movs	r2, #0
 80022c4:	2101      	movs	r1, #1
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff f888 	bl	80013dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2102      	movs	r1, #2
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff f86c 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 80022d8:	4603      	mov	r3, r0
 80022da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10a      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x2e8>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2102      	movs	r1, #2
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff f861 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 80022ee:	4603      	mov	r3, r0
 80022f0:	0e9b      	lsrs	r3, r3, #26
 80022f2:	f003 021f 	and.w	r2, r3, #31
 80022f6:	e01e      	b.n	8002336 <HAL_ADC_ConfigChannel+0x326>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2102      	movs	r1, #2
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff f856 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 8002304:	4603      	mov	r3, r0
 8002306:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800230e:	fa93 f3a3 	rbit	r3, r3
 8002312:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002316:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800231a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800231e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002326:	2320      	movs	r3, #32
 8002328:	e004      	b.n	8002334 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800232a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800232e:	fab3 f383 	clz	r3, r3
 8002332:	b2db      	uxtb	r3, r3
 8002334:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800233e:	2b00      	cmp	r3, #0
 8002340:	d105      	bne.n	800234e <HAL_ADC_ConfigChannel+0x33e>
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	0e9b      	lsrs	r3, r3, #26
 8002348:	f003 031f 	and.w	r3, r3, #31
 800234c:	e016      	b.n	800237c <HAL_ADC_ConfigChannel+0x36c>
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002356:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800235a:	fa93 f3a3 	rbit	r3, r3
 800235e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002360:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002362:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002366:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800236e:	2320      	movs	r3, #32
 8002370:	e004      	b.n	800237c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002372:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002376:	fab3 f383 	clz	r3, r3
 800237a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800237c:	429a      	cmp	r2, r3
 800237e:	d106      	bne.n	800238e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2200      	movs	r2, #0
 8002386:	2102      	movs	r1, #2
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff f827 	bl	80013dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2103      	movs	r1, #3
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff f80b 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 800239a:	4603      	mov	r3, r0
 800239c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d10a      	bne.n	80023ba <HAL_ADC_ConfigChannel+0x3aa>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2103      	movs	r1, #3
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff f800 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 80023b0:	4603      	mov	r3, r0
 80023b2:	0e9b      	lsrs	r3, r3, #26
 80023b4:	f003 021f 	and.w	r2, r3, #31
 80023b8:	e017      	b.n	80023ea <HAL_ADC_ConfigChannel+0x3da>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2103      	movs	r1, #3
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7fe fff5 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 80023c6:	4603      	mov	r3, r0
 80023c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023cc:	fa93 f3a3 	rbit	r3, r3
 80023d0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80023d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023d4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80023d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80023dc:	2320      	movs	r3, #32
 80023de:	e003      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80023e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023e2:	fab3 f383 	clz	r3, r3
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d105      	bne.n	8002402 <HAL_ADC_ConfigChannel+0x3f2>
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	0e9b      	lsrs	r3, r3, #26
 80023fc:	f003 031f 	and.w	r3, r3, #31
 8002400:	e011      	b.n	8002426 <HAL_ADC_ConfigChannel+0x416>
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002408:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800240a:	fa93 f3a3 	rbit	r3, r3
 800240e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002410:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002412:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800241a:	2320      	movs	r3, #32
 800241c:	e003      	b.n	8002426 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800241e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002420:	fab3 f383 	clz	r3, r3
 8002424:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002426:	429a      	cmp	r2, r3
 8002428:	d106      	bne.n	8002438 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2200      	movs	r2, #0
 8002430:	2103      	movs	r1, #3
 8002432:	4618      	mov	r0, r3
 8002434:	f7fe ffd2 	bl	80013dc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff f990 	bl	8001762 <LL_ADC_IsEnabled>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	f040 813d 	bne.w	80026c4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6818      	ldr	r0, [r3, #0]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	6819      	ldr	r1, [r3, #0]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	461a      	mov	r2, r3
 8002458:	f7ff f88e 	bl	8001578 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	4aa2      	ldr	r2, [pc, #648]	; (80026ec <HAL_ADC_ConfigChannel+0x6dc>)
 8002462:	4293      	cmp	r3, r2
 8002464:	f040 812e 	bne.w	80026c4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002474:	2b00      	cmp	r3, #0
 8002476:	d10b      	bne.n	8002490 <HAL_ADC_ConfigChannel+0x480>
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	0e9b      	lsrs	r3, r3, #26
 800247e:	3301      	adds	r3, #1
 8002480:	f003 031f 	and.w	r3, r3, #31
 8002484:	2b09      	cmp	r3, #9
 8002486:	bf94      	ite	ls
 8002488:	2301      	movls	r3, #1
 800248a:	2300      	movhi	r3, #0
 800248c:	b2db      	uxtb	r3, r3
 800248e:	e019      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x4b4>
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002496:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002498:	fa93 f3a3 	rbit	r3, r3
 800249c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800249e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024a0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80024a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80024a8:	2320      	movs	r3, #32
 80024aa:	e003      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80024ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024ae:	fab3 f383 	clz	r3, r3
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	3301      	adds	r3, #1
 80024b6:	f003 031f 	and.w	r3, r3, #31
 80024ba:	2b09      	cmp	r3, #9
 80024bc:	bf94      	ite	ls
 80024be:	2301      	movls	r3, #1
 80024c0:	2300      	movhi	r3, #0
 80024c2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d079      	beq.n	80025bc <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d107      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0x4d4>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	0e9b      	lsrs	r3, r3, #26
 80024da:	3301      	adds	r3, #1
 80024dc:	069b      	lsls	r3, r3, #26
 80024de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024e2:	e015      	b.n	8002510 <HAL_ADC_ConfigChannel+0x500>
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024ec:	fa93 f3a3 	rbit	r3, r3
 80024f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80024f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024f4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80024f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d101      	bne.n	8002500 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80024fc:	2320      	movs	r3, #32
 80024fe:	e003      	b.n	8002508 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002500:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002502:	fab3 f383 	clz	r3, r3
 8002506:	b2db      	uxtb	r3, r3
 8002508:	3301      	adds	r3, #1
 800250a:	069b      	lsls	r3, r3, #26
 800250c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002518:	2b00      	cmp	r3, #0
 800251a:	d109      	bne.n	8002530 <HAL_ADC_ConfigChannel+0x520>
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	0e9b      	lsrs	r3, r3, #26
 8002522:	3301      	adds	r3, #1
 8002524:	f003 031f 	and.w	r3, r3, #31
 8002528:	2101      	movs	r1, #1
 800252a:	fa01 f303 	lsl.w	r3, r1, r3
 800252e:	e017      	b.n	8002560 <HAL_ADC_ConfigChannel+0x550>
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002536:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002538:	fa93 f3a3 	rbit	r3, r3
 800253c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800253e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002540:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002542:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002548:	2320      	movs	r3, #32
 800254a:	e003      	b.n	8002554 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800254c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800254e:	fab3 f383 	clz	r3, r3
 8002552:	b2db      	uxtb	r3, r3
 8002554:	3301      	adds	r3, #1
 8002556:	f003 031f 	and.w	r3, r3, #31
 800255a:	2101      	movs	r1, #1
 800255c:	fa01 f303 	lsl.w	r3, r1, r3
 8002560:	ea42 0103 	orr.w	r1, r2, r3
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10a      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x576>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	0e9b      	lsrs	r3, r3, #26
 8002576:	3301      	adds	r3, #1
 8002578:	f003 021f 	and.w	r2, r3, #31
 800257c:	4613      	mov	r3, r2
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	4413      	add	r3, r2
 8002582:	051b      	lsls	r3, r3, #20
 8002584:	e018      	b.n	80025b8 <HAL_ADC_ConfigChannel+0x5a8>
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800258e:	fa93 f3a3 	rbit	r3, r3
 8002592:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002596:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800259e:	2320      	movs	r3, #32
 80025a0:	e003      	b.n	80025aa <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80025a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025a4:	fab3 f383 	clz	r3, r3
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	3301      	adds	r3, #1
 80025ac:	f003 021f 	and.w	r2, r3, #31
 80025b0:	4613      	mov	r3, r2
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	4413      	add	r3, r2
 80025b6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025b8:	430b      	orrs	r3, r1
 80025ba:	e07e      	b.n	80026ba <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d107      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x5c8>
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	0e9b      	lsrs	r3, r3, #26
 80025ce:	3301      	adds	r3, #1
 80025d0:	069b      	lsls	r3, r3, #26
 80025d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025d6:	e015      	b.n	8002604 <HAL_ADC_ConfigChannel+0x5f4>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e0:	fa93 f3a3 	rbit	r3, r3
 80025e4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80025e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80025ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80025f0:	2320      	movs	r3, #32
 80025f2:	e003      	b.n	80025fc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80025f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f6:	fab3 f383 	clz	r3, r3
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	3301      	adds	r3, #1
 80025fe:	069b      	lsls	r3, r3, #26
 8002600:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800260c:	2b00      	cmp	r3, #0
 800260e:	d109      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x614>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	0e9b      	lsrs	r3, r3, #26
 8002616:	3301      	adds	r3, #1
 8002618:	f003 031f 	and.w	r3, r3, #31
 800261c:	2101      	movs	r1, #1
 800261e:	fa01 f303 	lsl.w	r3, r1, r3
 8002622:	e017      	b.n	8002654 <HAL_ADC_ConfigChannel+0x644>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262a:	6a3b      	ldr	r3, [r7, #32]
 800262c:	fa93 f3a3 	rbit	r3, r3
 8002630:	61fb      	str	r3, [r7, #28]
  return result;
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800263c:	2320      	movs	r3, #32
 800263e:	e003      	b.n	8002648 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002642:	fab3 f383 	clz	r3, r3
 8002646:	b2db      	uxtb	r3, r3
 8002648:	3301      	adds	r3, #1
 800264a:	f003 031f 	and.w	r3, r3, #31
 800264e:	2101      	movs	r1, #1
 8002650:	fa01 f303 	lsl.w	r3, r1, r3
 8002654:	ea42 0103 	orr.w	r1, r2, r3
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002660:	2b00      	cmp	r3, #0
 8002662:	d10d      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x670>
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	0e9b      	lsrs	r3, r3, #26
 800266a:	3301      	adds	r3, #1
 800266c:	f003 021f 	and.w	r2, r3, #31
 8002670:	4613      	mov	r3, r2
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	4413      	add	r3, r2
 8002676:	3b1e      	subs	r3, #30
 8002678:	051b      	lsls	r3, r3, #20
 800267a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800267e:	e01b      	b.n	80026b8 <HAL_ADC_ConfigChannel+0x6a8>
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	fa93 f3a3 	rbit	r3, r3
 800268c:	613b      	str	r3, [r7, #16]
  return result;
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002698:	2320      	movs	r3, #32
 800269a:	e003      	b.n	80026a4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	fab3 f383 	clz	r3, r3
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	3301      	adds	r3, #1
 80026a6:	f003 021f 	and.w	r2, r3, #31
 80026aa:	4613      	mov	r3, r2
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	4413      	add	r3, r2
 80026b0:	3b1e      	subs	r3, #30
 80026b2:	051b      	lsls	r3, r3, #20
 80026b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026b8:	430b      	orrs	r3, r1
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	6892      	ldr	r2, [r2, #8]
 80026be:	4619      	mov	r1, r3
 80026c0:	f7fe ff2f 	bl	8001522 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	4b09      	ldr	r3, [pc, #36]	; (80026f0 <HAL_ADC_ConfigChannel+0x6e0>)
 80026ca:	4013      	ands	r3, r2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 80af 	beq.w	8002830 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026da:	d004      	beq.n	80026e6 <HAL_ADC_ConfigChannel+0x6d6>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a04      	ldr	r2, [pc, #16]	; (80026f4 <HAL_ADC_ConfigChannel+0x6e4>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d10a      	bne.n	80026fc <HAL_ADC_ConfigChannel+0x6ec>
 80026e6:	4b04      	ldr	r3, [pc, #16]	; (80026f8 <HAL_ADC_ConfigChannel+0x6e8>)
 80026e8:	e009      	b.n	80026fe <HAL_ADC_ConfigChannel+0x6ee>
 80026ea:	bf00      	nop
 80026ec:	407f0000 	.word	0x407f0000
 80026f0:	80080000 	.word	0x80080000
 80026f4:	50000100 	.word	0x50000100
 80026f8:	50000300 	.word	0x50000300
 80026fc:	4b51      	ldr	r3, [pc, #324]	; (8002844 <HAL_ADC_ConfigChannel+0x834>)
 80026fe:	4618      	mov	r0, r3
 8002700:	f7fe fe24 	bl	800134c <LL_ADC_GetCommonPathInternalCh>
 8002704:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a4e      	ldr	r2, [pc, #312]	; (8002848 <HAL_ADC_ConfigChannel+0x838>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d004      	beq.n	800271c <HAL_ADC_ConfigChannel+0x70c>
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a4d      	ldr	r2, [pc, #308]	; (800284c <HAL_ADC_ConfigChannel+0x83c>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d134      	bne.n	8002786 <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800271c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002720:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d12e      	bne.n	8002786 <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002730:	d17e      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800273a:	d004      	beq.n	8002746 <HAL_ADC_ConfigChannel+0x736>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a43      	ldr	r2, [pc, #268]	; (8002850 <HAL_ADC_ConfigChannel+0x840>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d101      	bne.n	800274a <HAL_ADC_ConfigChannel+0x73a>
 8002746:	4a43      	ldr	r2, [pc, #268]	; (8002854 <HAL_ADC_ConfigChannel+0x844>)
 8002748:	e000      	b.n	800274c <HAL_ADC_ConfigChannel+0x73c>
 800274a:	4a3e      	ldr	r2, [pc, #248]	; (8002844 <HAL_ADC_ConfigChannel+0x834>)
 800274c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002750:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002754:	4619      	mov	r1, r3
 8002756:	4610      	mov	r0, r2
 8002758:	f7fe fde5 	bl	8001326 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800275c:	4b3e      	ldr	r3, [pc, #248]	; (8002858 <HAL_ADC_ConfigChannel+0x848>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	099b      	lsrs	r3, r3, #6
 8002762:	4a3e      	ldr	r2, [pc, #248]	; (800285c <HAL_ADC_ConfigChannel+0x84c>)
 8002764:	fba2 2303 	umull	r2, r3, r2, r3
 8002768:	099b      	lsrs	r3, r3, #6
 800276a:	1c5a      	adds	r2, r3, #1
 800276c:	4613      	mov	r3, r2
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	4413      	add	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002776:	e002      	b.n	800277e <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	3b01      	subs	r3, #1
 800277c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1f9      	bne.n	8002778 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002784:	e054      	b.n	8002830 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a35      	ldr	r2, [pc, #212]	; (8002860 <HAL_ADC_ConfigChannel+0x850>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d120      	bne.n	80027d2 <HAL_ADC_ConfigChannel+0x7c2>
 8002790:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002794:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d11a      	bne.n	80027d2 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027a4:	d144      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027ae:	d004      	beq.n	80027ba <HAL_ADC_ConfigChannel+0x7aa>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a26      	ldr	r2, [pc, #152]	; (8002850 <HAL_ADC_ConfigChannel+0x840>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d101      	bne.n	80027be <HAL_ADC_ConfigChannel+0x7ae>
 80027ba:	4a26      	ldr	r2, [pc, #152]	; (8002854 <HAL_ADC_ConfigChannel+0x844>)
 80027bc:	e000      	b.n	80027c0 <HAL_ADC_ConfigChannel+0x7b0>
 80027be:	4a21      	ldr	r2, [pc, #132]	; (8002844 <HAL_ADC_ConfigChannel+0x834>)
 80027c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027c8:	4619      	mov	r1, r3
 80027ca:	4610      	mov	r0, r2
 80027cc:	f7fe fdab 	bl	8001326 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027d0:	e02e      	b.n	8002830 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a23      	ldr	r2, [pc, #140]	; (8002864 <HAL_ADC_ConfigChannel+0x854>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d129      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d123      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a18      	ldr	r2, [pc, #96]	; (8002850 <HAL_ADC_ConfigChannel+0x840>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d01e      	beq.n	8002830 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027fa:	d004      	beq.n	8002806 <HAL_ADC_ConfigChannel+0x7f6>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a13      	ldr	r2, [pc, #76]	; (8002850 <HAL_ADC_ConfigChannel+0x840>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d101      	bne.n	800280a <HAL_ADC_ConfigChannel+0x7fa>
 8002806:	4a13      	ldr	r2, [pc, #76]	; (8002854 <HAL_ADC_ConfigChannel+0x844>)
 8002808:	e000      	b.n	800280c <HAL_ADC_ConfigChannel+0x7fc>
 800280a:	4a0e      	ldr	r2, [pc, #56]	; (8002844 <HAL_ADC_ConfigChannel+0x834>)
 800280c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002810:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002814:	4619      	mov	r1, r3
 8002816:	4610      	mov	r0, r2
 8002818:	f7fe fd85 	bl	8001326 <LL_ADC_SetCommonPathInternalCh>
 800281c:	e008      	b.n	8002830 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002822:	f043 0220 	orr.w	r2, r3, #32
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002838:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800283c:	4618      	mov	r0, r3
 800283e:	37d8      	adds	r7, #216	; 0xd8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	50000700 	.word	0x50000700
 8002848:	c3210000 	.word	0xc3210000
 800284c:	90c00010 	.word	0x90c00010
 8002850:	50000100 	.word	0x50000100
 8002854:	50000300 	.word	0x50000300
 8002858:	20000000 	.word	0x20000000
 800285c:	053e2d63 	.word	0x053e2d63
 8002860:	c7520000 	.word	0xc7520000
 8002864:	cb840000 	.word	0xcb840000

08002868 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b08e      	sub	sp, #56	; 0x38
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002872:	2300      	movs	r3, #0
 8002874:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_ADC_ANALOG_WATCHDOG_FILTERING_MODE(AnalogWDGConfig->FilteringConfig));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));

  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002880:	d003      	beq.n	800288a <HAL_ADC_AnalogWDGConfig+0x22>
      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8002886:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002890:	2b01      	cmp	r3, #1
 8002892:	d101      	bne.n	8002898 <HAL_ADC_AnalogWDGConfig+0x30>
 8002894:	2302      	movs	r3, #2
 8002896:	e1ea      	b.n	8002c6e <HAL_ADC_AnalogWDGConfig+0x406>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7fe ff83 	bl	80017b0 <LL_ADC_REG_IsConversionOngoing>
 80028aa:	62b8      	str	r0, [r7, #40]	; 0x28
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7fe ff90 	bl	80017d6 <LL_ADC_INJ_IsConversionOngoing>
 80028b6:	6278      	str	r0, [r7, #36]	; 0x24
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f040 8175 	bne.w	8002baa <HAL_ADC_AnalogWDGConfig+0x342>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f040 8171 	bne.w	8002baa <HAL_ADC_AnalogWDGConfig+0x342>
     )
  {
    /* Analog watchdog configuration */
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a90      	ldr	r2, [pc, #576]	; (8002b10 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	f040 808d 	bne.w	80029ee <HAL_ADC_AnalogWDGConfig+0x186>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (AnalogWDGConfig->WatchdogMode)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80028dc:	d034      	beq.n	8002948 <HAL_ADC_AnalogWDGConfig+0xe0>
 80028de:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80028e2:	d856      	bhi.n	8002992 <HAL_ADC_AnalogWDGConfig+0x12a>
 80028e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028e8:	d04b      	beq.n	8002982 <HAL_ADC_AnalogWDGConfig+0x11a>
 80028ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028ee:	d850      	bhi.n	8002992 <HAL_ADC_AnalogWDGConfig+0x12a>
 80028f0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80028f4:	d01b      	beq.n	800292e <HAL_ADC_AnalogWDGConfig+0xc6>
 80028f6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80028fa:	d84a      	bhi.n	8002992 <HAL_ADC_AnalogWDGConfig+0x12a>
 80028fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002900:	d037      	beq.n	8002972 <HAL_ADC_AnalogWDGConfig+0x10a>
 8002902:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002906:	d844      	bhi.n	8002992 <HAL_ADC_AnalogWDGConfig+0x12a>
 8002908:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800290c:	d029      	beq.n	8002962 <HAL_ADC_AnalogWDGConfig+0xfa>
 800290e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002912:	d13e      	bne.n	8002992 <HAL_ADC_AnalogWDGConfig+0x12a>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6818      	ldr	r0, [r3, #0]
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8002920:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8002924:	461a      	mov	r2, r3
 8002926:	497a      	ldr	r1, [pc, #488]	; (8002b10 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8002928:	f7fe fe4e 	bl	80015c8 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR));
          break;
 800292c:	e039      	b.n	80029a2 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6818      	ldr	r0, [r3, #0]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800293a:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
 800293e:	461a      	mov	r2, r3
 8002940:	4973      	ldr	r1, [pc, #460]	; (8002b10 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8002942:	f7fe fe41 	bl	80015c8 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_INJECTED));
          break;
 8002946:	e02c      	b.n	80029a2 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6818      	ldr	r0, [r3, #0]
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8002954:	f043 73e0 	orr.w	r3, r3, #29360128	; 0x1c00000
 8002958:	461a      	mov	r2, r3
 800295a:	496d      	ldr	r1, [pc, #436]	; (8002b10 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 800295c:	f7fe fe34 	bl	80015c8 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 8002960:	e01f      	b.n	80029a2 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a6b      	ldr	r2, [pc, #428]	; (8002b14 <HAL_ADC_AnalogWDGConfig+0x2ac>)
 8002968:	4969      	ldr	r1, [pc, #420]	; (8002b10 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 800296a:	4618      	mov	r0, r3
 800296c:	f7fe fe2c 	bl	80015c8 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002970:	e017      	b.n	80029a2 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a68      	ldr	r2, [pc, #416]	; (8002b18 <HAL_ADC_AnalogWDGConfig+0x2b0>)
 8002978:	4965      	ldr	r1, [pc, #404]	; (8002b10 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 800297a:	4618      	mov	r0, r3
 800297c:	f7fe fe24 	bl	80015c8 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002980:	e00f      	b.n	80029a2 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a65      	ldr	r2, [pc, #404]	; (8002b1c <HAL_ADC_AnalogWDGConfig+0x2b4>)
 8002988:	4961      	ldr	r1, [pc, #388]	; (8002b10 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 800298a:	4618      	mov	r0, r3
 800298c:	f7fe fe1c 	bl	80015c8 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002990:	e007      	b.n	80029a2 <HAL_ADC_AnalogWDGConfig+0x13a>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2200      	movs	r2, #0
 8002998:	495d      	ldr	r1, [pc, #372]	; (8002b10 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 800299a:	4618      	mov	r0, r3
 800299c:	f7fe fe14 	bl	80015c8 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80029a0:	bf00      	nop
      }

      /* Set the filtering configuration */
      MODIFY_REG(hadc->Instance->TR1,
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	699a      	ldr	r2, [r3, #24]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	621a      	str	r2, [r3, #32]
                 ADC_TR1_AWDFILT,
                 AnalogWDGConfig->FilteringConfig);

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7fe ff17 	bl	80017fc <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (AnalogWDGConfig->ITMode == ENABLE)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	7b1b      	ldrb	r3, [r3, #12]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d105      	bne.n	80029e2 <HAL_ADC_AnalogWDGConfig+0x17a>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fe ff37 	bl	800184e <LL_ADC_EnableIT_AWD1>
 80029e0:	e0e3      	b.n	8002baa <HAL_ADC_AnalogWDGConfig+0x342>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7fe ff61 	bl	80018ae <LL_ADC_DisableIT_AWD1>
 80029ec:	e0dd      	b.n	8002baa <HAL_ADC_AnalogWDGConfig+0x342>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (AnalogWDGConfig->WatchdogMode)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80029f6:	d01d      	beq.n	8002a34 <HAL_ADC_AnalogWDGConfig+0x1cc>
 80029f8:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80029fc:	f200 8092 	bhi.w	8002b24 <HAL_ADC_AnalogWDGConfig+0x2bc>
 8002a00:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a04:	d07b      	beq.n	8002afe <HAL_ADC_AnalogWDGConfig+0x296>
 8002a06:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a0a:	f200 808b 	bhi.w	8002b24 <HAL_ADC_AnalogWDGConfig+0x2bc>
 8002a0e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8002a12:	d00f      	beq.n	8002a34 <HAL_ADC_AnalogWDGConfig+0x1cc>
 8002a14:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8002a18:	f200 8084 	bhi.w	8002b24 <HAL_ADC_AnalogWDGConfig+0x2bc>
 8002a1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a20:	d06d      	beq.n	8002afe <HAL_ADC_AnalogWDGConfig+0x296>
 8002a22:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a26:	d87d      	bhi.n	8002b24 <HAL_ADC_AnalogWDGConfig+0x2bc>
 8002a28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a2c:	d067      	beq.n	8002afe <HAL_ADC_AnalogWDGConfig+0x296>
 8002a2e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a32:	d177      	bne.n	8002b24 <HAL_ADC_AnalogWDGConfig+0x2bc>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a39      	ldr	r2, [pc, #228]	; (8002b20 <HAL_ADC_AnalogWDGConfig+0x2b8>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d12f      	bne.n	8002a9e <HAL_ADC_AnalogWDGConfig+0x236>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d108      	bne.n	8002a5c <HAL_ADC_AnalogWDGConfig+0x1f4>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	0e9b      	lsrs	r3, r3, #26
 8002a50:	f003 031f 	and.w	r3, r3, #31
 8002a54:	2201      	movs	r2, #1
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	e016      	b.n	8002a8a <HAL_ADC_AnalogWDGConfig+0x222>
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	fa93 f3a3 	rbit	r3, r3
 8002a68:	61bb      	str	r3, [r7, #24]
  return result;
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002a6e:	6a3b      	ldr	r3, [r7, #32]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <HAL_ADC_AnalogWDGConfig+0x210>
    return 32U;
 8002a74:	2320      	movs	r3, #32
 8002a76:	e003      	b.n	8002a80 <HAL_ADC_AnalogWDGConfig+0x218>
  return __builtin_clz(value);
 8002a78:	6a3b      	ldr	r3, [r7, #32]
 8002a7a:	fab3 f383 	clz	r3, r3
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	f003 031f 	and.w	r3, r3, #31
 8002a84:	2201      	movs	r2, #1
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6812      	ldr	r2, [r2, #0]
 8002a8e:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	6812      	ldr	r2, [r2, #0]
 8002a96:	430b      	orrs	r3, r1
 8002a98:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 8002a9c:	e04b      	b.n	8002b36 <HAL_ADC_AnalogWDGConfig+0x2ce>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d108      	bne.n	8002abc <HAL_ADC_AnalogWDGConfig+0x254>
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	0e9b      	lsrs	r3, r3, #26
 8002ab0:	f003 031f 	and.w	r3, r3, #31
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	e016      	b.n	8002aea <HAL_ADC_AnalogWDGConfig+0x282>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	fa93 f3a3 	rbit	r3, r3
 8002ac8:	60fb      	str	r3, [r7, #12]
  return result;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <HAL_ADC_AnalogWDGConfig+0x270>
    return 32U;
 8002ad4:	2320      	movs	r3, #32
 8002ad6:	e003      	b.n	8002ae0 <HAL_ADC_AnalogWDGConfig+0x278>
  return __builtin_clz(value);
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	fab3 f383 	clz	r3, r3
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	f003 031f 	and.w	r3, r3, #31
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6812      	ldr	r2, [r2, #0]
 8002aee:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	6812      	ldr	r2, [r2, #0]
 8002af6:	430b      	orrs	r3, r1
 8002af8:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 8002afc:	e01b      	b.n	8002b36 <HAL_ADC_AnalogWDGConfig+0x2ce>

        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6818      	ldr	r0, [r3, #0]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a05      	ldr	r2, [pc, #20]	; (8002b1c <HAL_ADC_AnalogWDGConfig+0x2b4>)
 8002b08:	4619      	mov	r1, r3
 8002b0a:	f7fe fd5d 	bl	80015c8 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002b0e:	e012      	b.n	8002b36 <HAL_ADC_AnalogWDGConfig+0x2ce>
 8002b10:	7dc00000 	.word	0x7dc00000
 8002b14:	0087ffff 	.word	0x0087ffff
 8002b18:	0107ffff 	.word	0x0107ffff
 8002b1c:	0187ffff 	.word	0x0187ffff
 8002b20:	0017ffff 	.word	0x0017ffff

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6818      	ldr	r0, [r3, #0]
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	4619      	mov	r1, r3
 8002b30:	f7fe fd4a 	bl	80015c8 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002b34:	bf00      	nop
      }

      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a4f      	ldr	r2, [pc, #316]	; (8002c78 <HAL_ADC_AnalogWDGConfig+0x410>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d11a      	bne.n	8002b76 <HAL_ADC_AnalogWDGConfig+0x30e>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b44:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7fe fe60 	bl	8001816 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	7b1b      	ldrb	r3, [r3, #12]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d105      	bne.n	8002b6a <HAL_ADC_AnalogWDGConfig+0x302>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7fe fe83 	bl	800186e <LL_ADC_EnableIT_AWD2>
 8002b68:	e01f      	b.n	8002baa <HAL_ADC_AnalogWDGConfig+0x342>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7fe fead 	bl	80018ce <LL_ADC_DisableIT_AWD2>
 8002b74:	e019      	b.n	8002baa <HAL_ADC_AnalogWDGConfig+0x342>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7fe fe53 	bl	8001832 <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	7b1b      	ldrb	r3, [r3, #12]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d105      	bne.n	8002ba0 <HAL_ADC_AnalogWDGConfig+0x338>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7fe fe78 	bl	800188e <LL_ADC_EnableIT_AWD3>
 8002b9e:	e004      	b.n	8002baa <HAL_ADC_AnalogWDGConfig+0x342>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7fe fea2 	bl	80018ee <LL_ADC_DisableIT_AWD3>
    }

  }

  /* Analog watchdog thresholds configuration */
  if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a33      	ldr	r2, [pc, #204]	; (8002c7c <HAL_ADC_AnalogWDGConfig+0x414>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d118      	bne.n	8002be6 <HAL_ADC_AnalogWDGConfig+0x37e>
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	691a      	ldr	r2, [r3, #16]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	08db      	lsrs	r3, r3, #3
 8002bc0:	f003 0303 	and.w	r3, r3, #3
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	637b      	str	r3, [r7, #52]	; 0x34
    tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	695a      	ldr	r2, [r3, #20]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	08db      	lsrs	r3, r3, #3
 8002bd8:	f003 0303 	and.w	r3, r3, #3
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	633b      	str	r3, [r7, #48]	; 0x30
 8002be4:	e035      	b.n	8002c52 <HAL_ADC_AnalogWDGConfig+0x3ea>
  else
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 7, the LSB (right bits)    */
    /* are set to 0.                                                        */
    tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	f003 0318 	and.w	r3, r3, #24
 8002bf0:	2b18      	cmp	r3, #24
 8002bf2:	d00f      	beq.n	8002c14 <HAL_ADC_AnalogWDGConfig+0x3ac>
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	691a      	ldr	r2, [r3, #16]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	08db      	lsrs	r3, r3, #3
 8002c00:	f003 0303 	and.w	r3, r3, #3
 8002c04:	f1c3 0302 	rsb	r3, r3, #2
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	f003 031e 	and.w	r3, r3, #30
 8002c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c12:	e002      	b.n	8002c1a <HAL_ADC_AnalogWDGConfig+0x3b2>
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	637b      	str	r3, [r7, #52]	; 0x34
    tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	f003 0318 	and.w	r3, r3, #24
 8002c26:	2b18      	cmp	r3, #24
 8002c28:	d00f      	beq.n	8002c4a <HAL_ADC_AnalogWDGConfig+0x3e2>
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	695a      	ldr	r2, [r3, #20]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	08db      	lsrs	r3, r3, #3
 8002c36:	f003 0303 	and.w	r3, r3, #3
 8002c3a:	f1c3 0302 	rsb	r3, r3, #2
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	f003 031e 	and.w	r3, r3, #30
 8002c44:	fa22 f303 	lsr.w	r3, r2, r3
 8002c48:	e002      	b.n	8002c50 <HAL_ADC_AnalogWDGConfig+0x3e8>
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	633b      	str	r3, [r7, #48]	; 0x30
  }

  /* Set ADC analog watchdog thresholds value of both thresholds high and low */
  LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted,
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6818      	ldr	r0, [r3, #0]
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	6819      	ldr	r1, [r3, #0]
 8002c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c5e:	f7fe fce0 	bl	8001622 <LL_ADC_ConfigAnalogWDThresholds>
                                  tmpAWDLowThresholdShifted);

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002c6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3738      	adds	r7, #56	; 0x38
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	0017ffff 	.word	0x0017ffff
 8002c7c:	7dc00000 	.word	0x7dc00000

08002c80 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7fe fd68 	bl	8001762 <LL_ADC_IsEnabled>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d14d      	bne.n	8002d34 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689a      	ldr	r2, [r3, #8]
 8002c9e:	4b28      	ldr	r3, [pc, #160]	; (8002d40 <ADC_Enable+0xc0>)
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00d      	beq.n	8002cc2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002caa:	f043 0210 	orr.w	r2, r3, #16
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cb6:	f043 0201 	orr.w	r2, r3, #1
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e039      	b.n	8002d36 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fe fd37 	bl	800173a <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002ccc:	f7fe faea 	bl	80012a4 <HAL_GetTick>
 8002cd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cd2:	e028      	b.n	8002d26 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7fe fd42 	bl	8001762 <LL_ADC_IsEnabled>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d104      	bne.n	8002cee <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7fe fd26 	bl	800173a <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002cee:	f7fe fad9 	bl	80012a4 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d914      	bls.n	8002d26 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d00d      	beq.n	8002d26 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d0e:	f043 0210 	orr.w	r2, r3, #16
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d1a:	f043 0201 	orr.w	r2, r3, #1
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e007      	b.n	8002d36 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d1cf      	bne.n	8002cd4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	8000003f 	.word	0x8000003f

08002d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f003 0307 	and.w	r3, r3, #7
 8002d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d54:	4b0c      	ldr	r3, [pc, #48]	; (8002d88 <__NVIC_SetPriorityGrouping+0x44>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d5a:	68ba      	ldr	r2, [r7, #8]
 8002d5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d60:	4013      	ands	r3, r2
 8002d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d76:	4a04      	ldr	r2, [pc, #16]	; (8002d88 <__NVIC_SetPriorityGrouping+0x44>)
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	60d3      	str	r3, [r2, #12]
}
 8002d7c:	bf00      	nop
 8002d7e:	3714      	adds	r7, #20
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr
 8002d88:	e000ed00 	.word	0xe000ed00

08002d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d90:	4b04      	ldr	r3, [pc, #16]	; (8002da4 <__NVIC_GetPriorityGrouping+0x18>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	0a1b      	lsrs	r3, r3, #8
 8002d96:	f003 0307 	and.w	r3, r3, #7
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	e000ed00 	.word	0xe000ed00

08002da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	4603      	mov	r3, r0
 8002db0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	db0b      	blt.n	8002dd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dba:	79fb      	ldrb	r3, [r7, #7]
 8002dbc:	f003 021f 	and.w	r2, r3, #31
 8002dc0:	4907      	ldr	r1, [pc, #28]	; (8002de0 <__NVIC_EnableIRQ+0x38>)
 8002dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc6:	095b      	lsrs	r3, r3, #5
 8002dc8:	2001      	movs	r0, #1
 8002dca:	fa00 f202 	lsl.w	r2, r0, r2
 8002dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	e000e100 	.word	0xe000e100

08002de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	4603      	mov	r3, r0
 8002dec:	6039      	str	r1, [r7, #0]
 8002dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	db0a      	blt.n	8002e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	490c      	ldr	r1, [pc, #48]	; (8002e30 <__NVIC_SetPriority+0x4c>)
 8002dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e02:	0112      	lsls	r2, r2, #4
 8002e04:	b2d2      	uxtb	r2, r2
 8002e06:	440b      	add	r3, r1
 8002e08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e0c:	e00a      	b.n	8002e24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	4908      	ldr	r1, [pc, #32]	; (8002e34 <__NVIC_SetPriority+0x50>)
 8002e14:	79fb      	ldrb	r3, [r7, #7]
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	3b04      	subs	r3, #4
 8002e1c:	0112      	lsls	r2, r2, #4
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	440b      	add	r3, r1
 8002e22:	761a      	strb	r2, [r3, #24]
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	e000e100 	.word	0xe000e100
 8002e34:	e000ed00 	.word	0xe000ed00

08002e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b089      	sub	sp, #36	; 0x24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	f1c3 0307 	rsb	r3, r3, #7
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	bf28      	it	cs
 8002e56:	2304      	movcs	r3, #4
 8002e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	3304      	adds	r3, #4
 8002e5e:	2b06      	cmp	r3, #6
 8002e60:	d902      	bls.n	8002e68 <NVIC_EncodePriority+0x30>
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	3b03      	subs	r3, #3
 8002e66:	e000      	b.n	8002e6a <NVIC_EncodePriority+0x32>
 8002e68:	2300      	movs	r3, #0
 8002e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	43da      	mvns	r2, r3
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	401a      	ands	r2, r3
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e80:	f04f 31ff 	mov.w	r1, #4294967295
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8a:	43d9      	mvns	r1, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e90:	4313      	orrs	r3, r2
         );
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3724      	adds	r7, #36	; 0x24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
	...

08002ea0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002eb0:	d301      	bcc.n	8002eb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e00f      	b.n	8002ed6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eb6:	4a0a      	ldr	r2, [pc, #40]	; (8002ee0 <SysTick_Config+0x40>)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ebe:	210f      	movs	r1, #15
 8002ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ec4:	f7ff ff8e 	bl	8002de4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ec8:	4b05      	ldr	r3, [pc, #20]	; (8002ee0 <SysTick_Config+0x40>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ece:	4b04      	ldr	r3, [pc, #16]	; (8002ee0 <SysTick_Config+0x40>)
 8002ed0:	2207      	movs	r2, #7
 8002ed2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	e000e010 	.word	0xe000e010

08002ee4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f7ff ff29 	bl	8002d44 <__NVIC_SetPriorityGrouping>
}
 8002ef2:	bf00      	nop
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b086      	sub	sp, #24
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	4603      	mov	r3, r0
 8002f02:	60b9      	str	r1, [r7, #8]
 8002f04:	607a      	str	r2, [r7, #4]
 8002f06:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f08:	f7ff ff40 	bl	8002d8c <__NVIC_GetPriorityGrouping>
 8002f0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	68b9      	ldr	r1, [r7, #8]
 8002f12:	6978      	ldr	r0, [r7, #20]
 8002f14:	f7ff ff90 	bl	8002e38 <NVIC_EncodePriority>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f1e:	4611      	mov	r1, r2
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff ff5f 	bl	8002de4 <__NVIC_SetPriority>
}
 8002f26:	bf00      	nop
 8002f28:	3718      	adds	r7, #24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b082      	sub	sp, #8
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	4603      	mov	r3, r0
 8002f36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7ff ff33 	bl	8002da8 <__NVIC_EnableIRQ>
}
 8002f42:	bf00      	nop
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b082      	sub	sp, #8
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7ff ffa4 	bl	8002ea0 <SysTick_Config>
 8002f58:	4603      	mov	r3, r0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
	...

08002f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b087      	sub	sp, #28
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002f72:	e15a      	b.n	800322a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	2101      	movs	r1, #1
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f80:	4013      	ands	r3, r2
 8002f82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f000 814c 	beq.w	8003224 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f003 0303 	and.w	r3, r3, #3
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d005      	beq.n	8002fa4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d130      	bne.n	8003006 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	2203      	movs	r2, #3
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	43db      	mvns	r3, r3
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	68da      	ldr	r2, [r3, #12]
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fda:	2201      	movs	r2, #1
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	43db      	mvns	r3, r3
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	091b      	lsrs	r3, r3, #4
 8002ff0:	f003 0201 	and.w	r2, r3, #1
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f003 0303 	and.w	r3, r3, #3
 800300e:	2b03      	cmp	r3, #3
 8003010:	d017      	beq.n	8003042 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	2203      	movs	r2, #3
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	43db      	mvns	r3, r3
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	4013      	ands	r3, r2
 8003028:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	689a      	ldr	r2, [r3, #8]
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	fa02 f303 	lsl.w	r3, r2, r3
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	4313      	orrs	r3, r2
 800303a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f003 0303 	and.w	r3, r3, #3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d123      	bne.n	8003096 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	08da      	lsrs	r2, r3, #3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	3208      	adds	r2, #8
 8003056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800305a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	f003 0307 	and.w	r3, r3, #7
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	220f      	movs	r2, #15
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	43db      	mvns	r3, r3
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	4013      	ands	r3, r2
 8003070:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	691a      	ldr	r2, [r3, #16]
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	4313      	orrs	r3, r2
 8003086:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	08da      	lsrs	r2, r3, #3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	3208      	adds	r2, #8
 8003090:	6939      	ldr	r1, [r7, #16]
 8003092:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	2203      	movs	r2, #3
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	43db      	mvns	r3, r3
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	4013      	ands	r3, r2
 80030ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f003 0203 	and.w	r2, r3, #3
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f000 80a6 	beq.w	8003224 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030d8:	4b5b      	ldr	r3, [pc, #364]	; (8003248 <HAL_GPIO_Init+0x2e4>)
 80030da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030dc:	4a5a      	ldr	r2, [pc, #360]	; (8003248 <HAL_GPIO_Init+0x2e4>)
 80030de:	f043 0301 	orr.w	r3, r3, #1
 80030e2:	6613      	str	r3, [r2, #96]	; 0x60
 80030e4:	4b58      	ldr	r3, [pc, #352]	; (8003248 <HAL_GPIO_Init+0x2e4>)
 80030e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	60bb      	str	r3, [r7, #8]
 80030ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030f0:	4a56      	ldr	r2, [pc, #344]	; (800324c <HAL_GPIO_Init+0x2e8>)
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	089b      	lsrs	r3, r3, #2
 80030f6:	3302      	adds	r3, #2
 80030f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f003 0303 	and.w	r3, r3, #3
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	220f      	movs	r2, #15
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	43db      	mvns	r3, r3
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	4013      	ands	r3, r2
 8003112:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800311a:	d01f      	beq.n	800315c <HAL_GPIO_Init+0x1f8>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a4c      	ldr	r2, [pc, #304]	; (8003250 <HAL_GPIO_Init+0x2ec>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d019      	beq.n	8003158 <HAL_GPIO_Init+0x1f4>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a4b      	ldr	r2, [pc, #300]	; (8003254 <HAL_GPIO_Init+0x2f0>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d013      	beq.n	8003154 <HAL_GPIO_Init+0x1f0>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a4a      	ldr	r2, [pc, #296]	; (8003258 <HAL_GPIO_Init+0x2f4>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d00d      	beq.n	8003150 <HAL_GPIO_Init+0x1ec>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a49      	ldr	r2, [pc, #292]	; (800325c <HAL_GPIO_Init+0x2f8>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d007      	beq.n	800314c <HAL_GPIO_Init+0x1e8>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a48      	ldr	r2, [pc, #288]	; (8003260 <HAL_GPIO_Init+0x2fc>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d101      	bne.n	8003148 <HAL_GPIO_Init+0x1e4>
 8003144:	2305      	movs	r3, #5
 8003146:	e00a      	b.n	800315e <HAL_GPIO_Init+0x1fa>
 8003148:	2306      	movs	r3, #6
 800314a:	e008      	b.n	800315e <HAL_GPIO_Init+0x1fa>
 800314c:	2304      	movs	r3, #4
 800314e:	e006      	b.n	800315e <HAL_GPIO_Init+0x1fa>
 8003150:	2303      	movs	r3, #3
 8003152:	e004      	b.n	800315e <HAL_GPIO_Init+0x1fa>
 8003154:	2302      	movs	r3, #2
 8003156:	e002      	b.n	800315e <HAL_GPIO_Init+0x1fa>
 8003158:	2301      	movs	r3, #1
 800315a:	e000      	b.n	800315e <HAL_GPIO_Init+0x1fa>
 800315c:	2300      	movs	r3, #0
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	f002 0203 	and.w	r2, r2, #3
 8003164:	0092      	lsls	r2, r2, #2
 8003166:	4093      	lsls	r3, r2
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	4313      	orrs	r3, r2
 800316c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800316e:	4937      	ldr	r1, [pc, #220]	; (800324c <HAL_GPIO_Init+0x2e8>)
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	089b      	lsrs	r3, r3, #2
 8003174:	3302      	adds	r3, #2
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800317c:	4b39      	ldr	r3, [pc, #228]	; (8003264 <HAL_GPIO_Init+0x300>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	43db      	mvns	r3, r3
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	4013      	ands	r3, r2
 800318a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d003      	beq.n	80031a0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	4313      	orrs	r3, r2
 800319e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80031a0:	4a30      	ldr	r2, [pc, #192]	; (8003264 <HAL_GPIO_Init+0x300>)
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80031a6:	4b2f      	ldr	r3, [pc, #188]	; (8003264 <HAL_GPIO_Init+0x300>)
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	43db      	mvns	r3, r3
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	4013      	ands	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d003      	beq.n	80031ca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80031ca:	4a26      	ldr	r2, [pc, #152]	; (8003264 <HAL_GPIO_Init+0x300>)
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80031d0:	4b24      	ldr	r3, [pc, #144]	; (8003264 <HAL_GPIO_Init+0x300>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	43db      	mvns	r3, r3
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	4013      	ands	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d003      	beq.n	80031f4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80031f4:	4a1b      	ldr	r2, [pc, #108]	; (8003264 <HAL_GPIO_Init+0x300>)
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80031fa:	4b1a      	ldr	r3, [pc, #104]	; (8003264 <HAL_GPIO_Init+0x300>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	43db      	mvns	r3, r3
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	4013      	ands	r3, r2
 8003208:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4313      	orrs	r3, r2
 800321c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800321e:	4a11      	ldr	r2, [pc, #68]	; (8003264 <HAL_GPIO_Init+0x300>)
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	3301      	adds	r3, #1
 8003228:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	fa22 f303 	lsr.w	r3, r2, r3
 8003234:	2b00      	cmp	r3, #0
 8003236:	f47f ae9d 	bne.w	8002f74 <HAL_GPIO_Init+0x10>
  }
}
 800323a:	bf00      	nop
 800323c:	bf00      	nop
 800323e:	371c      	adds	r7, #28
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	40021000 	.word	0x40021000
 800324c:	40010000 	.word	0x40010000
 8003250:	48000400 	.word	0x48000400
 8003254:	48000800 	.word	0x48000800
 8003258:	48000c00 	.word	0x48000c00
 800325c:	48001000 	.word	0x48001000
 8003260:	48001400 	.word	0x48001400
 8003264:	40010400 	.word	0x40010400

08003268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	460b      	mov	r3, r1
 8003272:	807b      	strh	r3, [r7, #2]
 8003274:	4613      	mov	r3, r2
 8003276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003278:	787b      	ldrb	r3, [r7, #1]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d003      	beq.n	8003286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800327e:	887a      	ldrh	r2, [r7, #2]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003284:	e002      	b.n	800328c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003286:	887a      	ldrh	r2, [r7, #2]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	4603      	mov	r3, r0
 80032a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80032a2:	4b08      	ldr	r3, [pc, #32]	; (80032c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032a4:	695a      	ldr	r2, [r3, #20]
 80032a6:	88fb      	ldrh	r3, [r7, #6]
 80032a8:	4013      	ands	r3, r2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d006      	beq.n	80032bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032ae:	4a05      	ldr	r2, [pc, #20]	; (80032c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032b0:	88fb      	ldrh	r3, [r7, #6]
 80032b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032b4:	88fb      	ldrh	r3, [r7, #6]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 f806 	bl	80032c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80032bc:	bf00      	nop
 80032be:	3708      	adds	r7, #8
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	40010400 	.word	0x40010400

080032c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	4603      	mov	r3, r0
 80032d0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80032d2:	bf00      	nop
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
	...

080032e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d141      	bne.n	8003372 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80032ee:	4b4b      	ldr	r3, [pc, #300]	; (800341c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032fa:	d131      	bne.n	8003360 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032fc:	4b47      	ldr	r3, [pc, #284]	; (800341c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003302:	4a46      	ldr	r2, [pc, #280]	; (800341c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003304:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003308:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800330c:	4b43      	ldr	r3, [pc, #268]	; (800341c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003314:	4a41      	ldr	r2, [pc, #260]	; (800341c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003316:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800331a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800331c:	4b40      	ldr	r3, [pc, #256]	; (8003420 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2232      	movs	r2, #50	; 0x32
 8003322:	fb02 f303 	mul.w	r3, r2, r3
 8003326:	4a3f      	ldr	r2, [pc, #252]	; (8003424 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003328:	fba2 2303 	umull	r2, r3, r2, r3
 800332c:	0c9b      	lsrs	r3, r3, #18
 800332e:	3301      	adds	r3, #1
 8003330:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003332:	e002      	b.n	800333a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	3b01      	subs	r3, #1
 8003338:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800333a:	4b38      	ldr	r3, [pc, #224]	; (800341c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003342:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003346:	d102      	bne.n	800334e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1f2      	bne.n	8003334 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800334e:	4b33      	ldr	r3, [pc, #204]	; (800341c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003356:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800335a:	d158      	bne.n	800340e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e057      	b.n	8003410 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003360:	4b2e      	ldr	r3, [pc, #184]	; (800341c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003362:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003366:	4a2d      	ldr	r2, [pc, #180]	; (800341c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003368:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800336c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003370:	e04d      	b.n	800340e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003378:	d141      	bne.n	80033fe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800337a:	4b28      	ldr	r3, [pc, #160]	; (800341c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003382:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003386:	d131      	bne.n	80033ec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003388:	4b24      	ldr	r3, [pc, #144]	; (800341c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800338a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800338e:	4a23      	ldr	r2, [pc, #140]	; (800341c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003394:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003398:	4b20      	ldr	r3, [pc, #128]	; (800341c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033a0:	4a1e      	ldr	r2, [pc, #120]	; (800341c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033a8:	4b1d      	ldr	r3, [pc, #116]	; (8003420 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2232      	movs	r2, #50	; 0x32
 80033ae:	fb02 f303 	mul.w	r3, r2, r3
 80033b2:	4a1c      	ldr	r2, [pc, #112]	; (8003424 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80033b4:	fba2 2303 	umull	r2, r3, r2, r3
 80033b8:	0c9b      	lsrs	r3, r3, #18
 80033ba:	3301      	adds	r3, #1
 80033bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033be:	e002      	b.n	80033c6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	3b01      	subs	r3, #1
 80033c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033c6:	4b15      	ldr	r3, [pc, #84]	; (800341c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033d2:	d102      	bne.n	80033da <HAL_PWREx_ControlVoltageScaling+0xfa>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1f2      	bne.n	80033c0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033da:	4b10      	ldr	r3, [pc, #64]	; (800341c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033e6:	d112      	bne.n	800340e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e011      	b.n	8003410 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033ec:	4b0b      	ldr	r3, [pc, #44]	; (800341c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033f2:	4a0a      	ldr	r2, [pc, #40]	; (800341c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80033fc:	e007      	b.n	800340e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80033fe:	4b07      	ldr	r3, [pc, #28]	; (800341c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003406:	4a05      	ldr	r2, [pc, #20]	; (800341c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003408:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800340c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3714      	adds	r7, #20
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	40007000 	.word	0x40007000
 8003420:	20000000 	.word	0x20000000
 8003424:	431bde83 	.word	0x431bde83

08003428 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800342c:	4b05      	ldr	r3, [pc, #20]	; (8003444 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	4a04      	ldr	r2, [pc, #16]	; (8003444 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003432:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003436:	6093      	str	r3, [r2, #8]
}
 8003438:	bf00      	nop
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	40007000 	.word	0x40007000

08003448 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b088      	sub	sp, #32
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e306      	b.n	8003a68 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b00      	cmp	r3, #0
 8003464:	d075      	beq.n	8003552 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003466:	4b97      	ldr	r3, [pc, #604]	; (80036c4 <HAL_RCC_OscConfig+0x27c>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 030c 	and.w	r3, r3, #12
 800346e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003470:	4b94      	ldr	r3, [pc, #592]	; (80036c4 <HAL_RCC_OscConfig+0x27c>)
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	f003 0303 	and.w	r3, r3, #3
 8003478:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	2b0c      	cmp	r3, #12
 800347e:	d102      	bne.n	8003486 <HAL_RCC_OscConfig+0x3e>
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	2b03      	cmp	r3, #3
 8003484:	d002      	beq.n	800348c <HAL_RCC_OscConfig+0x44>
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	2b08      	cmp	r3, #8
 800348a:	d10b      	bne.n	80034a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800348c:	4b8d      	ldr	r3, [pc, #564]	; (80036c4 <HAL_RCC_OscConfig+0x27c>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d05b      	beq.n	8003550 <HAL_RCC_OscConfig+0x108>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d157      	bne.n	8003550 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e2e1      	b.n	8003a68 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ac:	d106      	bne.n	80034bc <HAL_RCC_OscConfig+0x74>
 80034ae:	4b85      	ldr	r3, [pc, #532]	; (80036c4 <HAL_RCC_OscConfig+0x27c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a84      	ldr	r2, [pc, #528]	; (80036c4 <HAL_RCC_OscConfig+0x27c>)
 80034b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034b8:	6013      	str	r3, [r2, #0]
 80034ba:	e01d      	b.n	80034f8 <HAL_RCC_OscConfig+0xb0>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034c4:	d10c      	bne.n	80034e0 <HAL_RCC_OscConfig+0x98>
 80034c6:	4b7f      	ldr	r3, [pc, #508]	; (80036c4 <HAL_RCC_OscConfig+0x27c>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a7e      	ldr	r2, [pc, #504]	; (80036c4 <HAL_RCC_OscConfig+0x27c>)
 80034cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034d0:	6013      	str	r3, [r2, #0]
 80034d2:	4b7c      	ldr	r3, [pc, #496]	; (80036c4 <HAL_RCC_OscConfig+0x27c>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a7b      	ldr	r2, [pc, #492]	; (80036c4 <HAL_RCC_OscConfig+0x27c>)
 80034d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034dc:	6013      	str	r3, [r2, #0]
 80034de:	e00b      	b.n	80034f8 <HAL_RCC_OscConfig+0xb0>
 80034e0:	4b78      	ldr	r3, [pc, #480]	; (80036c4 <HAL_RCC_OscConfig+0x27c>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a77      	ldr	r2, [pc, #476]	; (80036c4 <HAL_RCC_OscConfig+0x27c>)
 80034e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ea:	6013      	str	r3, [r2, #0]
 80034ec:	4b75      	ldr	r3, [pc, #468]	; (80036c4 <HAL_RCC_OscConfig+0x27c>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a74      	ldr	r2, [pc, #464]	; (80036c4 <HAL_RCC_OscConfig+0x27c>)
 80034f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d013      	beq.n	8003528 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003500:	f7fd fed0 	bl	80012a4 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003508:	f7fd fecc 	bl	80012a4 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b64      	cmp	r3, #100	; 0x64
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e2a6      	b.n	8003a68 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800351a:	4b6a      	ldr	r3, [pc, #424]	; (80036c4 <HAL_RCC_OscConfig+0x27c>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d0f0      	beq.n	8003508 <HAL_RCC_OscConfig+0xc0>
 8003526:	e014      	b.n	8003552 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003528:	f7fd febc 	bl	80012a4 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003530:	f7fd feb8 	bl	80012a4 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b64      	cmp	r3, #100	; 0x64
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e292      	b.n	8003a68 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003542:	4b60      	ldr	r3, [pc, #384]	; (80036c4 <HAL_RCC_OscConfig+0x27c>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1f0      	bne.n	8003530 <HAL_RCC_OscConfig+0xe8>
 800354e:	e000      	b.n	8003552 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d075      	beq.n	800364a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800355e:	4b59      	ldr	r3, [pc, #356]	; (80036c4 <HAL_RCC_OscConfig+0x27c>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f003 030c 	and.w	r3, r3, #12
 8003566:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003568:	4b56      	ldr	r3, [pc, #344]	; (80036c4 <HAL_RCC_OscConfig+0x27c>)
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	f003 0303 	and.w	r3, r3, #3
 8003570:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	2b0c      	cmp	r3, #12
 8003576:	d102      	bne.n	800357e <HAL_RCC_OscConfig+0x136>
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	2b02      	cmp	r3, #2
 800357c:	d002      	beq.n	8003584 <HAL_RCC_OscConfig+0x13c>
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	2b04      	cmp	r3, #4
 8003582:	d11f      	bne.n	80035c4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003584:	4b4f      	ldr	r3, [pc, #316]	; (80036c4 <HAL_RCC_OscConfig+0x27c>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800358c:	2b00      	cmp	r3, #0
 800358e:	d005      	beq.n	800359c <HAL_RCC_OscConfig+0x154>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e265      	b.n	8003a68 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800359c:	4b49      	ldr	r3, [pc, #292]	; (80036c4 <HAL_RCC_OscConfig+0x27c>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	061b      	lsls	r3, r3, #24
 80035aa:	4946      	ldr	r1, [pc, #280]	; (80036c4 <HAL_RCC_OscConfig+0x27c>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80035b0:	4b45      	ldr	r3, [pc, #276]	; (80036c8 <HAL_RCC_OscConfig+0x280>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7fd fe29 	bl	800120c <HAL_InitTick>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d043      	beq.n	8003648 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e251      	b.n	8003a68 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d023      	beq.n	8003614 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035cc:	4b3d      	ldr	r3, [pc, #244]	; (80036c4 <HAL_RCC_OscConfig+0x27c>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a3c      	ldr	r2, [pc, #240]	; (80036c4 <HAL_RCC_OscConfig+0x27c>)
 80035d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d8:	f7fd fe64 	bl	80012a4 <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035de:	e008      	b.n	80035f2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035e0:	f7fd fe60 	bl	80012a4 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e23a      	b.n	8003a68 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035f2:	4b34      	ldr	r3, [pc, #208]	; (80036c4 <HAL_RCC_OscConfig+0x27c>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d0f0      	beq.n	80035e0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035fe:	4b31      	ldr	r3, [pc, #196]	; (80036c4 <HAL_RCC_OscConfig+0x27c>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	061b      	lsls	r3, r3, #24
 800360c:	492d      	ldr	r1, [pc, #180]	; (80036c4 <HAL_RCC_OscConfig+0x27c>)
 800360e:	4313      	orrs	r3, r2
 8003610:	604b      	str	r3, [r1, #4]
 8003612:	e01a      	b.n	800364a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003614:	4b2b      	ldr	r3, [pc, #172]	; (80036c4 <HAL_RCC_OscConfig+0x27c>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a2a      	ldr	r2, [pc, #168]	; (80036c4 <HAL_RCC_OscConfig+0x27c>)
 800361a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800361e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003620:	f7fd fe40 	bl	80012a4 <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003628:	f7fd fe3c 	bl	80012a4 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e216      	b.n	8003a68 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800363a:	4b22      	ldr	r3, [pc, #136]	; (80036c4 <HAL_RCC_OscConfig+0x27c>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1f0      	bne.n	8003628 <HAL_RCC_OscConfig+0x1e0>
 8003646:	e000      	b.n	800364a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003648:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0308 	and.w	r3, r3, #8
 8003652:	2b00      	cmp	r3, #0
 8003654:	d041      	beq.n	80036da <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d01c      	beq.n	8003698 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800365e:	4b19      	ldr	r3, [pc, #100]	; (80036c4 <HAL_RCC_OscConfig+0x27c>)
 8003660:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003664:	4a17      	ldr	r2, [pc, #92]	; (80036c4 <HAL_RCC_OscConfig+0x27c>)
 8003666:	f043 0301 	orr.w	r3, r3, #1
 800366a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800366e:	f7fd fe19 	bl	80012a4 <HAL_GetTick>
 8003672:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003674:	e008      	b.n	8003688 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003676:	f7fd fe15 	bl	80012a4 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e1ef      	b.n	8003a68 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003688:	4b0e      	ldr	r3, [pc, #56]	; (80036c4 <HAL_RCC_OscConfig+0x27c>)
 800368a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d0ef      	beq.n	8003676 <HAL_RCC_OscConfig+0x22e>
 8003696:	e020      	b.n	80036da <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003698:	4b0a      	ldr	r3, [pc, #40]	; (80036c4 <HAL_RCC_OscConfig+0x27c>)
 800369a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800369e:	4a09      	ldr	r2, [pc, #36]	; (80036c4 <HAL_RCC_OscConfig+0x27c>)
 80036a0:	f023 0301 	bic.w	r3, r3, #1
 80036a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a8:	f7fd fdfc 	bl	80012a4 <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036ae:	e00d      	b.n	80036cc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036b0:	f7fd fdf8 	bl	80012a4 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d906      	bls.n	80036cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e1d2      	b.n	8003a68 <HAL_RCC_OscConfig+0x620>
 80036c2:	bf00      	nop
 80036c4:	40021000 	.word	0x40021000
 80036c8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036cc:	4b8c      	ldr	r3, [pc, #560]	; (8003900 <HAL_RCC_OscConfig+0x4b8>)
 80036ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1ea      	bne.n	80036b0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0304 	and.w	r3, r3, #4
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f000 80a6 	beq.w	8003834 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036e8:	2300      	movs	r3, #0
 80036ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036ec:	4b84      	ldr	r3, [pc, #528]	; (8003900 <HAL_RCC_OscConfig+0x4b8>)
 80036ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d101      	bne.n	80036fc <HAL_RCC_OscConfig+0x2b4>
 80036f8:	2301      	movs	r3, #1
 80036fa:	e000      	b.n	80036fe <HAL_RCC_OscConfig+0x2b6>
 80036fc:	2300      	movs	r3, #0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00d      	beq.n	800371e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003702:	4b7f      	ldr	r3, [pc, #508]	; (8003900 <HAL_RCC_OscConfig+0x4b8>)
 8003704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003706:	4a7e      	ldr	r2, [pc, #504]	; (8003900 <HAL_RCC_OscConfig+0x4b8>)
 8003708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800370c:	6593      	str	r3, [r2, #88]	; 0x58
 800370e:	4b7c      	ldr	r3, [pc, #496]	; (8003900 <HAL_RCC_OscConfig+0x4b8>)
 8003710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003716:	60fb      	str	r3, [r7, #12]
 8003718:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800371a:	2301      	movs	r3, #1
 800371c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800371e:	4b79      	ldr	r3, [pc, #484]	; (8003904 <HAL_RCC_OscConfig+0x4bc>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003726:	2b00      	cmp	r3, #0
 8003728:	d118      	bne.n	800375c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800372a:	4b76      	ldr	r3, [pc, #472]	; (8003904 <HAL_RCC_OscConfig+0x4bc>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a75      	ldr	r2, [pc, #468]	; (8003904 <HAL_RCC_OscConfig+0x4bc>)
 8003730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003734:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003736:	f7fd fdb5 	bl	80012a4 <HAL_GetTick>
 800373a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800373c:	e008      	b.n	8003750 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800373e:	f7fd fdb1 	bl	80012a4 <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d901      	bls.n	8003750 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e18b      	b.n	8003a68 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003750:	4b6c      	ldr	r3, [pc, #432]	; (8003904 <HAL_RCC_OscConfig+0x4bc>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0f0      	beq.n	800373e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d108      	bne.n	8003776 <HAL_RCC_OscConfig+0x32e>
 8003764:	4b66      	ldr	r3, [pc, #408]	; (8003900 <HAL_RCC_OscConfig+0x4b8>)
 8003766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376a:	4a65      	ldr	r2, [pc, #404]	; (8003900 <HAL_RCC_OscConfig+0x4b8>)
 800376c:	f043 0301 	orr.w	r3, r3, #1
 8003770:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003774:	e024      	b.n	80037c0 <HAL_RCC_OscConfig+0x378>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	2b05      	cmp	r3, #5
 800377c:	d110      	bne.n	80037a0 <HAL_RCC_OscConfig+0x358>
 800377e:	4b60      	ldr	r3, [pc, #384]	; (8003900 <HAL_RCC_OscConfig+0x4b8>)
 8003780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003784:	4a5e      	ldr	r2, [pc, #376]	; (8003900 <HAL_RCC_OscConfig+0x4b8>)
 8003786:	f043 0304 	orr.w	r3, r3, #4
 800378a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800378e:	4b5c      	ldr	r3, [pc, #368]	; (8003900 <HAL_RCC_OscConfig+0x4b8>)
 8003790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003794:	4a5a      	ldr	r2, [pc, #360]	; (8003900 <HAL_RCC_OscConfig+0x4b8>)
 8003796:	f043 0301 	orr.w	r3, r3, #1
 800379a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800379e:	e00f      	b.n	80037c0 <HAL_RCC_OscConfig+0x378>
 80037a0:	4b57      	ldr	r3, [pc, #348]	; (8003900 <HAL_RCC_OscConfig+0x4b8>)
 80037a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a6:	4a56      	ldr	r2, [pc, #344]	; (8003900 <HAL_RCC_OscConfig+0x4b8>)
 80037a8:	f023 0301 	bic.w	r3, r3, #1
 80037ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037b0:	4b53      	ldr	r3, [pc, #332]	; (8003900 <HAL_RCC_OscConfig+0x4b8>)
 80037b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b6:	4a52      	ldr	r2, [pc, #328]	; (8003900 <HAL_RCC_OscConfig+0x4b8>)
 80037b8:	f023 0304 	bic.w	r3, r3, #4
 80037bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d016      	beq.n	80037f6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c8:	f7fd fd6c 	bl	80012a4 <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037ce:	e00a      	b.n	80037e6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037d0:	f7fd fd68 	bl	80012a4 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	f241 3288 	movw	r2, #5000	; 0x1388
 80037de:	4293      	cmp	r3, r2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e140      	b.n	8003a68 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037e6:	4b46      	ldr	r3, [pc, #280]	; (8003900 <HAL_RCC_OscConfig+0x4b8>)
 80037e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d0ed      	beq.n	80037d0 <HAL_RCC_OscConfig+0x388>
 80037f4:	e015      	b.n	8003822 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f6:	f7fd fd55 	bl	80012a4 <HAL_GetTick>
 80037fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037fc:	e00a      	b.n	8003814 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037fe:	f7fd fd51 	bl	80012a4 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	f241 3288 	movw	r2, #5000	; 0x1388
 800380c:	4293      	cmp	r3, r2
 800380e:	d901      	bls.n	8003814 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e129      	b.n	8003a68 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003814:	4b3a      	ldr	r3, [pc, #232]	; (8003900 <HAL_RCC_OscConfig+0x4b8>)
 8003816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1ed      	bne.n	80037fe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003822:	7ffb      	ldrb	r3, [r7, #31]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d105      	bne.n	8003834 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003828:	4b35      	ldr	r3, [pc, #212]	; (8003900 <HAL_RCC_OscConfig+0x4b8>)
 800382a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800382c:	4a34      	ldr	r2, [pc, #208]	; (8003900 <HAL_RCC_OscConfig+0x4b8>)
 800382e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003832:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0320 	and.w	r3, r3, #32
 800383c:	2b00      	cmp	r3, #0
 800383e:	d03c      	beq.n	80038ba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d01c      	beq.n	8003882 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003848:	4b2d      	ldr	r3, [pc, #180]	; (8003900 <HAL_RCC_OscConfig+0x4b8>)
 800384a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800384e:	4a2c      	ldr	r2, [pc, #176]	; (8003900 <HAL_RCC_OscConfig+0x4b8>)
 8003850:	f043 0301 	orr.w	r3, r3, #1
 8003854:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003858:	f7fd fd24 	bl	80012a4 <HAL_GetTick>
 800385c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800385e:	e008      	b.n	8003872 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003860:	f7fd fd20 	bl	80012a4 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b02      	cmp	r3, #2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e0fa      	b.n	8003a68 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003872:	4b23      	ldr	r3, [pc, #140]	; (8003900 <HAL_RCC_OscConfig+0x4b8>)
 8003874:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d0ef      	beq.n	8003860 <HAL_RCC_OscConfig+0x418>
 8003880:	e01b      	b.n	80038ba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003882:	4b1f      	ldr	r3, [pc, #124]	; (8003900 <HAL_RCC_OscConfig+0x4b8>)
 8003884:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003888:	4a1d      	ldr	r2, [pc, #116]	; (8003900 <HAL_RCC_OscConfig+0x4b8>)
 800388a:	f023 0301 	bic.w	r3, r3, #1
 800388e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003892:	f7fd fd07 	bl	80012a4 <HAL_GetTick>
 8003896:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003898:	e008      	b.n	80038ac <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800389a:	f7fd fd03 	bl	80012a4 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d901      	bls.n	80038ac <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e0dd      	b.n	8003a68 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038ac:	4b14      	ldr	r3, [pc, #80]	; (8003900 <HAL_RCC_OscConfig+0x4b8>)
 80038ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1ef      	bne.n	800389a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 80d1 	beq.w	8003a66 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038c4:	4b0e      	ldr	r3, [pc, #56]	; (8003900 <HAL_RCC_OscConfig+0x4b8>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f003 030c 	and.w	r3, r3, #12
 80038cc:	2b0c      	cmp	r3, #12
 80038ce:	f000 808b 	beq.w	80039e8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d15e      	bne.n	8003998 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038da:	4b09      	ldr	r3, [pc, #36]	; (8003900 <HAL_RCC_OscConfig+0x4b8>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a08      	ldr	r2, [pc, #32]	; (8003900 <HAL_RCC_OscConfig+0x4b8>)
 80038e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e6:	f7fd fcdd 	bl	80012a4 <HAL_GetTick>
 80038ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038ec:	e00c      	b.n	8003908 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ee:	f7fd fcd9 	bl	80012a4 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d905      	bls.n	8003908 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e0b3      	b.n	8003a68 <HAL_RCC_OscConfig+0x620>
 8003900:	40021000 	.word	0x40021000
 8003904:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003908:	4b59      	ldr	r3, [pc, #356]	; (8003a70 <HAL_RCC_OscConfig+0x628>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1ec      	bne.n	80038ee <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003914:	4b56      	ldr	r3, [pc, #344]	; (8003a70 <HAL_RCC_OscConfig+0x628>)
 8003916:	68da      	ldr	r2, [r3, #12]
 8003918:	4b56      	ldr	r3, [pc, #344]	; (8003a74 <HAL_RCC_OscConfig+0x62c>)
 800391a:	4013      	ands	r3, r2
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6a11      	ldr	r1, [r2, #32]
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003924:	3a01      	subs	r2, #1
 8003926:	0112      	lsls	r2, r2, #4
 8003928:	4311      	orrs	r1, r2
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800392e:	0212      	lsls	r2, r2, #8
 8003930:	4311      	orrs	r1, r2
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003936:	0852      	lsrs	r2, r2, #1
 8003938:	3a01      	subs	r2, #1
 800393a:	0552      	lsls	r2, r2, #21
 800393c:	4311      	orrs	r1, r2
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003942:	0852      	lsrs	r2, r2, #1
 8003944:	3a01      	subs	r2, #1
 8003946:	0652      	lsls	r2, r2, #25
 8003948:	4311      	orrs	r1, r2
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800394e:	06d2      	lsls	r2, r2, #27
 8003950:	430a      	orrs	r2, r1
 8003952:	4947      	ldr	r1, [pc, #284]	; (8003a70 <HAL_RCC_OscConfig+0x628>)
 8003954:	4313      	orrs	r3, r2
 8003956:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003958:	4b45      	ldr	r3, [pc, #276]	; (8003a70 <HAL_RCC_OscConfig+0x628>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a44      	ldr	r2, [pc, #272]	; (8003a70 <HAL_RCC_OscConfig+0x628>)
 800395e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003962:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003964:	4b42      	ldr	r3, [pc, #264]	; (8003a70 <HAL_RCC_OscConfig+0x628>)
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	4a41      	ldr	r2, [pc, #260]	; (8003a70 <HAL_RCC_OscConfig+0x628>)
 800396a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800396e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003970:	f7fd fc98 	bl	80012a4 <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003976:	e008      	b.n	800398a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003978:	f7fd fc94 	bl	80012a4 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b02      	cmp	r3, #2
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e06e      	b.n	8003a68 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800398a:	4b39      	ldr	r3, [pc, #228]	; (8003a70 <HAL_RCC_OscConfig+0x628>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0f0      	beq.n	8003978 <HAL_RCC_OscConfig+0x530>
 8003996:	e066      	b.n	8003a66 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003998:	4b35      	ldr	r3, [pc, #212]	; (8003a70 <HAL_RCC_OscConfig+0x628>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a34      	ldr	r2, [pc, #208]	; (8003a70 <HAL_RCC_OscConfig+0x628>)
 800399e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039a2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80039a4:	4b32      	ldr	r3, [pc, #200]	; (8003a70 <HAL_RCC_OscConfig+0x628>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	4a31      	ldr	r2, [pc, #196]	; (8003a70 <HAL_RCC_OscConfig+0x628>)
 80039aa:	f023 0303 	bic.w	r3, r3, #3
 80039ae:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80039b0:	4b2f      	ldr	r3, [pc, #188]	; (8003a70 <HAL_RCC_OscConfig+0x628>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	4a2e      	ldr	r2, [pc, #184]	; (8003a70 <HAL_RCC_OscConfig+0x628>)
 80039b6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80039ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c0:	f7fd fc70 	bl	80012a4 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039c8:	f7fd fc6c 	bl	80012a4 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e046      	b.n	8003a68 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039da:	4b25      	ldr	r3, [pc, #148]	; (8003a70 <HAL_RCC_OscConfig+0x628>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1f0      	bne.n	80039c8 <HAL_RCC_OscConfig+0x580>
 80039e6:	e03e      	b.n	8003a66 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d101      	bne.n	80039f4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e039      	b.n	8003a68 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80039f4:	4b1e      	ldr	r3, [pc, #120]	; (8003a70 <HAL_RCC_OscConfig+0x628>)
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f003 0203 	and.w	r2, r3, #3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d12c      	bne.n	8003a62 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a12:	3b01      	subs	r3, #1
 8003a14:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d123      	bne.n	8003a62 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a24:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d11b      	bne.n	8003a62 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a34:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d113      	bne.n	8003a62 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a44:	085b      	lsrs	r3, r3, #1
 8003a46:	3b01      	subs	r3, #1
 8003a48:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d109      	bne.n	8003a62 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a58:	085b      	lsrs	r3, r3, #1
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d001      	beq.n	8003a66 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e000      	b.n	8003a68 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3720      	adds	r7, #32
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40021000 	.word	0x40021000
 8003a74:	019f800c 	.word	0x019f800c

08003a78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003a82:	2300      	movs	r3, #0
 8003a84:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d101      	bne.n	8003a90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e11e      	b.n	8003cce <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a90:	4b91      	ldr	r3, [pc, #580]	; (8003cd8 <HAL_RCC_ClockConfig+0x260>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 030f 	and.w	r3, r3, #15
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d910      	bls.n	8003ac0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a9e:	4b8e      	ldr	r3, [pc, #568]	; (8003cd8 <HAL_RCC_ClockConfig+0x260>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f023 020f 	bic.w	r2, r3, #15
 8003aa6:	498c      	ldr	r1, [pc, #560]	; (8003cd8 <HAL_RCC_ClockConfig+0x260>)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aae:	4b8a      	ldr	r3, [pc, #552]	; (8003cd8 <HAL_RCC_ClockConfig+0x260>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 030f 	and.w	r3, r3, #15
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d001      	beq.n	8003ac0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e106      	b.n	8003cce <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d073      	beq.n	8003bb4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	2b03      	cmp	r3, #3
 8003ad2:	d129      	bne.n	8003b28 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ad4:	4b81      	ldr	r3, [pc, #516]	; (8003cdc <HAL_RCC_ClockConfig+0x264>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d101      	bne.n	8003ae4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e0f4      	b.n	8003cce <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003ae4:	f000 f99e 	bl	8003e24 <RCC_GetSysClockFreqFromPLLSource>
 8003ae8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	4a7c      	ldr	r2, [pc, #496]	; (8003ce0 <HAL_RCC_ClockConfig+0x268>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d93f      	bls.n	8003b72 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003af2:	4b7a      	ldr	r3, [pc, #488]	; (8003cdc <HAL_RCC_ClockConfig+0x264>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d009      	beq.n	8003b12 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d033      	beq.n	8003b72 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d12f      	bne.n	8003b72 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b12:	4b72      	ldr	r3, [pc, #456]	; (8003cdc <HAL_RCC_ClockConfig+0x264>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b1a:	4a70      	ldr	r2, [pc, #448]	; (8003cdc <HAL_RCC_ClockConfig+0x264>)
 8003b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b20:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003b22:	2380      	movs	r3, #128	; 0x80
 8003b24:	617b      	str	r3, [r7, #20]
 8003b26:	e024      	b.n	8003b72 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d107      	bne.n	8003b40 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b30:	4b6a      	ldr	r3, [pc, #424]	; (8003cdc <HAL_RCC_ClockConfig+0x264>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d109      	bne.n	8003b50 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e0c6      	b.n	8003cce <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b40:	4b66      	ldr	r3, [pc, #408]	; (8003cdc <HAL_RCC_ClockConfig+0x264>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d101      	bne.n	8003b50 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e0be      	b.n	8003cce <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003b50:	f000 f8ce 	bl	8003cf0 <HAL_RCC_GetSysClockFreq>
 8003b54:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	4a61      	ldr	r2, [pc, #388]	; (8003ce0 <HAL_RCC_ClockConfig+0x268>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d909      	bls.n	8003b72 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b5e:	4b5f      	ldr	r3, [pc, #380]	; (8003cdc <HAL_RCC_ClockConfig+0x264>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b66:	4a5d      	ldr	r2, [pc, #372]	; (8003cdc <HAL_RCC_ClockConfig+0x264>)
 8003b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b6c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003b6e:	2380      	movs	r3, #128	; 0x80
 8003b70:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b72:	4b5a      	ldr	r3, [pc, #360]	; (8003cdc <HAL_RCC_ClockConfig+0x264>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f023 0203 	bic.w	r2, r3, #3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	4957      	ldr	r1, [pc, #348]	; (8003cdc <HAL_RCC_ClockConfig+0x264>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b84:	f7fd fb8e 	bl	80012a4 <HAL_GetTick>
 8003b88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b8a:	e00a      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b8c:	f7fd fb8a 	bl	80012a4 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e095      	b.n	8003cce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ba2:	4b4e      	ldr	r3, [pc, #312]	; (8003cdc <HAL_RCC_ClockConfig+0x264>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 020c 	and.w	r2, r3, #12
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d1eb      	bne.n	8003b8c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d023      	beq.n	8003c08 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0304 	and.w	r3, r3, #4
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d005      	beq.n	8003bd8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bcc:	4b43      	ldr	r3, [pc, #268]	; (8003cdc <HAL_RCC_ClockConfig+0x264>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	4a42      	ldr	r2, [pc, #264]	; (8003cdc <HAL_RCC_ClockConfig+0x264>)
 8003bd2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003bd6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0308 	and.w	r3, r3, #8
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d007      	beq.n	8003bf4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003be4:	4b3d      	ldr	r3, [pc, #244]	; (8003cdc <HAL_RCC_ClockConfig+0x264>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003bec:	4a3b      	ldr	r2, [pc, #236]	; (8003cdc <HAL_RCC_ClockConfig+0x264>)
 8003bee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003bf2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bf4:	4b39      	ldr	r3, [pc, #228]	; (8003cdc <HAL_RCC_ClockConfig+0x264>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	4936      	ldr	r1, [pc, #216]	; (8003cdc <HAL_RCC_ClockConfig+0x264>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	608b      	str	r3, [r1, #8]
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	2b80      	cmp	r3, #128	; 0x80
 8003c0c:	d105      	bne.n	8003c1a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003c0e:	4b33      	ldr	r3, [pc, #204]	; (8003cdc <HAL_RCC_ClockConfig+0x264>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	4a32      	ldr	r2, [pc, #200]	; (8003cdc <HAL_RCC_ClockConfig+0x264>)
 8003c14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c18:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c1a:	4b2f      	ldr	r3, [pc, #188]	; (8003cd8 <HAL_RCC_ClockConfig+0x260>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 030f 	and.w	r3, r3, #15
 8003c22:	683a      	ldr	r2, [r7, #0]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d21d      	bcs.n	8003c64 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c28:	4b2b      	ldr	r3, [pc, #172]	; (8003cd8 <HAL_RCC_ClockConfig+0x260>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f023 020f 	bic.w	r2, r3, #15
 8003c30:	4929      	ldr	r1, [pc, #164]	; (8003cd8 <HAL_RCC_ClockConfig+0x260>)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c38:	f7fd fb34 	bl	80012a4 <HAL_GetTick>
 8003c3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c3e:	e00a      	b.n	8003c56 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c40:	f7fd fb30 	bl	80012a4 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e03b      	b.n	8003cce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c56:	4b20      	ldr	r3, [pc, #128]	; (8003cd8 <HAL_RCC_ClockConfig+0x260>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 030f 	and.w	r3, r3, #15
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d1ed      	bne.n	8003c40 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d008      	beq.n	8003c82 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c70:	4b1a      	ldr	r3, [pc, #104]	; (8003cdc <HAL_RCC_ClockConfig+0x264>)
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	4917      	ldr	r1, [pc, #92]	; (8003cdc <HAL_RCC_ClockConfig+0x264>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0308 	and.w	r3, r3, #8
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d009      	beq.n	8003ca2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c8e:	4b13      	ldr	r3, [pc, #76]	; (8003cdc <HAL_RCC_ClockConfig+0x264>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	490f      	ldr	r1, [pc, #60]	; (8003cdc <HAL_RCC_ClockConfig+0x264>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ca2:	f000 f825 	bl	8003cf0 <HAL_RCC_GetSysClockFreq>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	4b0c      	ldr	r3, [pc, #48]	; (8003cdc <HAL_RCC_ClockConfig+0x264>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	091b      	lsrs	r3, r3, #4
 8003cae:	f003 030f 	and.w	r3, r3, #15
 8003cb2:	490c      	ldr	r1, [pc, #48]	; (8003ce4 <HAL_RCC_ClockConfig+0x26c>)
 8003cb4:	5ccb      	ldrb	r3, [r1, r3]
 8003cb6:	f003 031f 	and.w	r3, r3, #31
 8003cba:	fa22 f303 	lsr.w	r3, r2, r3
 8003cbe:	4a0a      	ldr	r2, [pc, #40]	; (8003ce8 <HAL_RCC_ClockConfig+0x270>)
 8003cc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003cc2:	4b0a      	ldr	r3, [pc, #40]	; (8003cec <HAL_RCC_ClockConfig+0x274>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7fd faa0 	bl	800120c <HAL_InitTick>
 8003ccc:	4603      	mov	r3, r0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3718      	adds	r7, #24
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	40022000 	.word	0x40022000
 8003cdc:	40021000 	.word	0x40021000
 8003ce0:	04c4b400 	.word	0x04c4b400
 8003ce4:	08007874 	.word	0x08007874
 8003ce8:	20000000 	.word	0x20000000
 8003cec:	20000004 	.word	0x20000004

08003cf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b087      	sub	sp, #28
 8003cf4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003cf6:	4b2c      	ldr	r3, [pc, #176]	; (8003da8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f003 030c 	and.w	r3, r3, #12
 8003cfe:	2b04      	cmp	r3, #4
 8003d00:	d102      	bne.n	8003d08 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d02:	4b2a      	ldr	r3, [pc, #168]	; (8003dac <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d04:	613b      	str	r3, [r7, #16]
 8003d06:	e047      	b.n	8003d98 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003d08:	4b27      	ldr	r3, [pc, #156]	; (8003da8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f003 030c 	and.w	r3, r3, #12
 8003d10:	2b08      	cmp	r3, #8
 8003d12:	d102      	bne.n	8003d1a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d14:	4b26      	ldr	r3, [pc, #152]	; (8003db0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d16:	613b      	str	r3, [r7, #16]
 8003d18:	e03e      	b.n	8003d98 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003d1a:	4b23      	ldr	r3, [pc, #140]	; (8003da8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f003 030c 	and.w	r3, r3, #12
 8003d22:	2b0c      	cmp	r3, #12
 8003d24:	d136      	bne.n	8003d94 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d26:	4b20      	ldr	r3, [pc, #128]	; (8003da8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	f003 0303 	and.w	r3, r3, #3
 8003d2e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d30:	4b1d      	ldr	r3, [pc, #116]	; (8003da8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	091b      	lsrs	r3, r3, #4
 8003d36:	f003 030f 	and.w	r3, r3, #15
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2b03      	cmp	r3, #3
 8003d42:	d10c      	bne.n	8003d5e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d44:	4a1a      	ldr	r2, [pc, #104]	; (8003db0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d4c:	4a16      	ldr	r2, [pc, #88]	; (8003da8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d4e:	68d2      	ldr	r2, [r2, #12]
 8003d50:	0a12      	lsrs	r2, r2, #8
 8003d52:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d56:	fb02 f303 	mul.w	r3, r2, r3
 8003d5a:	617b      	str	r3, [r7, #20]
      break;
 8003d5c:	e00c      	b.n	8003d78 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d5e:	4a13      	ldr	r2, [pc, #76]	; (8003dac <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d66:	4a10      	ldr	r2, [pc, #64]	; (8003da8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d68:	68d2      	ldr	r2, [r2, #12]
 8003d6a:	0a12      	lsrs	r2, r2, #8
 8003d6c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d70:	fb02 f303 	mul.w	r3, r2, r3
 8003d74:	617b      	str	r3, [r7, #20]
      break;
 8003d76:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d78:	4b0b      	ldr	r3, [pc, #44]	; (8003da8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	0e5b      	lsrs	r3, r3, #25
 8003d7e:	f003 0303 	and.w	r3, r3, #3
 8003d82:	3301      	adds	r3, #1
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d90:	613b      	str	r3, [r7, #16]
 8003d92:	e001      	b.n	8003d98 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003d94:	2300      	movs	r3, #0
 8003d96:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003d98:	693b      	ldr	r3, [r7, #16]
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	371c      	adds	r7, #28
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	40021000 	.word	0x40021000
 8003dac:	00f42400 	.word	0x00f42400
 8003db0:	016e3600 	.word	0x016e3600

08003db4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003db8:	4b03      	ldr	r3, [pc, #12]	; (8003dc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dba:	681b      	ldr	r3, [r3, #0]
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	20000000 	.word	0x20000000

08003dcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003dd0:	f7ff fff0 	bl	8003db4 <HAL_RCC_GetHCLKFreq>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	4b06      	ldr	r3, [pc, #24]	; (8003df0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	0a1b      	lsrs	r3, r3, #8
 8003ddc:	f003 0307 	and.w	r3, r3, #7
 8003de0:	4904      	ldr	r1, [pc, #16]	; (8003df4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003de2:	5ccb      	ldrb	r3, [r1, r3]
 8003de4:	f003 031f 	and.w	r3, r3, #31
 8003de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40021000 	.word	0x40021000
 8003df4:	08007884 	.word	0x08007884

08003df8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003dfc:	f7ff ffda 	bl	8003db4 <HAL_RCC_GetHCLKFreq>
 8003e00:	4602      	mov	r2, r0
 8003e02:	4b06      	ldr	r3, [pc, #24]	; (8003e1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	0adb      	lsrs	r3, r3, #11
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	4904      	ldr	r1, [pc, #16]	; (8003e20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e0e:	5ccb      	ldrb	r3, [r1, r3]
 8003e10:	f003 031f 	and.w	r3, r3, #31
 8003e14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	08007884 	.word	0x08007884

08003e24 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b087      	sub	sp, #28
 8003e28:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e2a:	4b1e      	ldr	r3, [pc, #120]	; (8003ea4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	f003 0303 	and.w	r3, r3, #3
 8003e32:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e34:	4b1b      	ldr	r3, [pc, #108]	; (8003ea4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	091b      	lsrs	r3, r3, #4
 8003e3a:	f003 030f 	and.w	r3, r3, #15
 8003e3e:	3301      	adds	r3, #1
 8003e40:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	2b03      	cmp	r3, #3
 8003e46:	d10c      	bne.n	8003e62 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e48:	4a17      	ldr	r2, [pc, #92]	; (8003ea8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e50:	4a14      	ldr	r2, [pc, #80]	; (8003ea4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e52:	68d2      	ldr	r2, [r2, #12]
 8003e54:	0a12      	lsrs	r2, r2, #8
 8003e56:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e5a:	fb02 f303 	mul.w	r3, r2, r3
 8003e5e:	617b      	str	r3, [r7, #20]
    break;
 8003e60:	e00c      	b.n	8003e7c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e62:	4a12      	ldr	r2, [pc, #72]	; (8003eac <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e6a:	4a0e      	ldr	r2, [pc, #56]	; (8003ea4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e6c:	68d2      	ldr	r2, [r2, #12]
 8003e6e:	0a12      	lsrs	r2, r2, #8
 8003e70:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e74:	fb02 f303 	mul.w	r3, r2, r3
 8003e78:	617b      	str	r3, [r7, #20]
    break;
 8003e7a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e7c:	4b09      	ldr	r3, [pc, #36]	; (8003ea4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	0e5b      	lsrs	r3, r3, #25
 8003e82:	f003 0303 	and.w	r3, r3, #3
 8003e86:	3301      	adds	r3, #1
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e94:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003e96:	687b      	ldr	r3, [r7, #4]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	371c      	adds	r7, #28
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr
 8003ea4:	40021000 	.word	0x40021000
 8003ea8:	016e3600 	.word	0x016e3600
 8003eac:	00f42400 	.word	0x00f42400

08003eb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003eb8:	2300      	movs	r3, #0
 8003eba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f000 8098 	beq.w	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ed2:	4b43      	ldr	r3, [pc, #268]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10d      	bne.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ede:	4b40      	ldr	r3, [pc, #256]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee2:	4a3f      	ldr	r2, [pc, #252]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ee8:	6593      	str	r3, [r2, #88]	; 0x58
 8003eea:	4b3d      	ldr	r3, [pc, #244]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ef2:	60bb      	str	r3, [r7, #8]
 8003ef4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003efa:	4b3a      	ldr	r3, [pc, #232]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a39      	ldr	r2, [pc, #228]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f04:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f06:	f7fd f9cd 	bl	80012a4 <HAL_GetTick>
 8003f0a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f0c:	e009      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f0e:	f7fd f9c9 	bl	80012a4 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d902      	bls.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	74fb      	strb	r3, [r7, #19]
        break;
 8003f20:	e005      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f22:	4b30      	ldr	r3, [pc, #192]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d0ef      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003f2e:	7cfb      	ldrb	r3, [r7, #19]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d159      	bne.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f34:	4b2a      	ldr	r3, [pc, #168]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f3e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d01e      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d019      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f50:	4b23      	ldr	r3, [pc, #140]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f5a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f5c:	4b20      	ldr	r3, [pc, #128]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f62:	4a1f      	ldr	r2, [pc, #124]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f6c:	4b1c      	ldr	r3, [pc, #112]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f72:	4a1b      	ldr	r2, [pc, #108]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f7c:	4a18      	ldr	r2, [pc, #96]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d016      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f8e:	f7fd f989 	bl	80012a4 <HAL_GetTick>
 8003f92:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f94:	e00b      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f96:	f7fd f985 	bl	80012a4 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d902      	bls.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	74fb      	strb	r3, [r7, #19]
            break;
 8003fac:	e006      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fae:	4b0c      	ldr	r3, [pc, #48]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d0ec      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003fbc:	7cfb      	ldrb	r3, [r7, #19]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10b      	bne.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fc2:	4b07      	ldr	r3, [pc, #28]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fd0:	4903      	ldr	r1, [pc, #12]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003fd8:	e008      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fda:	7cfb      	ldrb	r3, [r7, #19]
 8003fdc:	74bb      	strb	r3, [r7, #18]
 8003fde:	e005      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003fe0:	40021000 	.word	0x40021000
 8003fe4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe8:	7cfb      	ldrb	r3, [r7, #19]
 8003fea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fec:	7c7b      	ldrb	r3, [r7, #17]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d105      	bne.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ff2:	4ba7      	ldr	r3, [pc, #668]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff6:	4aa6      	ldr	r2, [pc, #664]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ff8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ffc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00a      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800400a:	4ba1      	ldr	r3, [pc, #644]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800400c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004010:	f023 0203 	bic.w	r2, r3, #3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	499d      	ldr	r1, [pc, #628]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800401a:	4313      	orrs	r3, r2
 800401c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00a      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800402c:	4b98      	ldr	r3, [pc, #608]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800402e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004032:	f023 020c 	bic.w	r2, r3, #12
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	4995      	ldr	r1, [pc, #596]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800403c:	4313      	orrs	r3, r2
 800403e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0304 	and.w	r3, r3, #4
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00a      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800404e:	4b90      	ldr	r3, [pc, #576]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004054:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	498c      	ldr	r1, [pc, #560]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800405e:	4313      	orrs	r3, r2
 8004060:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0308 	and.w	r3, r3, #8
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00a      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004070:	4b87      	ldr	r3, [pc, #540]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004076:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	4984      	ldr	r1, [pc, #528]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004080:	4313      	orrs	r3, r2
 8004082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0310 	and.w	r3, r3, #16
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00a      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004092:	4b7f      	ldr	r3, [pc, #508]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004098:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	497b      	ldr	r1, [pc, #492]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0320 	and.w	r3, r3, #32
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00a      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040b4:	4b76      	ldr	r3, [pc, #472]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	4973      	ldr	r1, [pc, #460]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00a      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040d6:	4b6e      	ldr	r3, [pc, #440]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	69db      	ldr	r3, [r3, #28]
 80040e4:	496a      	ldr	r1, [pc, #424]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00a      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040f8:	4b65      	ldr	r3, [pc, #404]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	4962      	ldr	r1, [pc, #392]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004108:	4313      	orrs	r3, r2
 800410a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00a      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800411a:	4b5d      	ldr	r3, [pc, #372]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800411c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004120:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004128:	4959      	ldr	r1, [pc, #356]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800412a:	4313      	orrs	r3, r2
 800412c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00a      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800413c:	4b54      	ldr	r3, [pc, #336]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800413e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004142:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414a:	4951      	ldr	r1, [pc, #324]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800414c:	4313      	orrs	r3, r2
 800414e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800415a:	2b00      	cmp	r3, #0
 800415c:	d015      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800415e:	4b4c      	ldr	r3, [pc, #304]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004164:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416c:	4948      	ldr	r1, [pc, #288]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800416e:	4313      	orrs	r3, r2
 8004170:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004178:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800417c:	d105      	bne.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800417e:	4b44      	ldr	r3, [pc, #272]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	4a43      	ldr	r2, [pc, #268]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004184:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004188:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004192:	2b00      	cmp	r3, #0
 8004194:	d015      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004196:	4b3e      	ldr	r3, [pc, #248]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a4:	493a      	ldr	r1, [pc, #232]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041b4:	d105      	bne.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041b6:	4b36      	ldr	r3, [pc, #216]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	4a35      	ldr	r2, [pc, #212]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041c0:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d015      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80041ce:	4b30      	ldr	r3, [pc, #192]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041dc:	492c      	ldr	r1, [pc, #176]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041ec:	d105      	bne.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041ee:	4b28      	ldr	r3, [pc, #160]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	4a27      	ldr	r2, [pc, #156]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041f8:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d015      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004206:	4b22      	ldr	r3, [pc, #136]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004214:	491e      	ldr	r1, [pc, #120]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004216:	4313      	orrs	r3, r2
 8004218:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004220:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004224:	d105      	bne.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004226:	4b1a      	ldr	r3, [pc, #104]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	4a19      	ldr	r2, [pc, #100]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800422c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004230:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d015      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800423e:	4b14      	ldr	r3, [pc, #80]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004244:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800424c:	4910      	ldr	r1, [pc, #64]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800424e:	4313      	orrs	r3, r2
 8004250:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004258:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800425c:	d105      	bne.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800425e:	4b0c      	ldr	r3, [pc, #48]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	4a0b      	ldr	r2, [pc, #44]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004264:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004268:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d018      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004276:	4b06      	ldr	r3, [pc, #24]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800427c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004284:	4902      	ldr	r1, [pc, #8]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004286:	4313      	orrs	r3, r2
 8004288:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	e001      	b.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004290:	40021000 	.word	0x40021000
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800429a:	d105      	bne.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800429c:	4b21      	ldr	r3, [pc, #132]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	4a20      	ldr	r2, [pc, #128]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80042a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042a6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d015      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80042b4:	4b1b      	ldr	r3, [pc, #108]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80042b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ba:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c2:	4918      	ldr	r1, [pc, #96]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042d2:	d105      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80042d4:	4b13      	ldr	r3, [pc, #76]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	4a12      	ldr	r2, [pc, #72]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80042da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042de:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d015      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80042ec:	4b0d      	ldr	r3, [pc, #52]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80042ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042fa:	490a      	ldr	r1, [pc, #40]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004306:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800430a:	d105      	bne.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800430c:	4b05      	ldr	r3, [pc, #20]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	4a04      	ldr	r2, [pc, #16]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004312:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004316:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004318:	7cbb      	ldrb	r3, [r7, #18]
}
 800431a:	4618      	mov	r0, r3
 800431c:	3718      	adds	r7, #24
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	40021000 	.word	0x40021000

08004328 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e049      	b.n	80043ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d106      	bne.n	8004354 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f7fc fd98 	bl	8000e84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2202      	movs	r2, #2
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	3304      	adds	r3, #4
 8004364:	4619      	mov	r1, r3
 8004366:	4610      	mov	r0, r2
 8004368:	f000 fd62 	bl	8004e30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b082      	sub	sp, #8
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d101      	bne.n	80043e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e049      	b.n	800447c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d106      	bne.n	8004402 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 f841 	bl	8004484 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2202      	movs	r2, #2
 8004406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	3304      	adds	r3, #4
 8004412:	4619      	mov	r1, r3
 8004414:	4610      	mov	r0, r2
 8004416:	f000 fd0b 	bl	8004e30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2201      	movs	r2, #1
 800443e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2201      	movs	r2, #1
 8004476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3708      	adds	r7, #8
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d109      	bne.n	80044bc <HAL_TIM_PWM_Start+0x24>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	bf14      	ite	ne
 80044b4:	2301      	movne	r3, #1
 80044b6:	2300      	moveq	r3, #0
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	e03c      	b.n	8004536 <HAL_TIM_PWM_Start+0x9e>
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	2b04      	cmp	r3, #4
 80044c0:	d109      	bne.n	80044d6 <HAL_TIM_PWM_Start+0x3e>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	bf14      	ite	ne
 80044ce:	2301      	movne	r3, #1
 80044d0:	2300      	moveq	r3, #0
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	e02f      	b.n	8004536 <HAL_TIM_PWM_Start+0x9e>
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	2b08      	cmp	r3, #8
 80044da:	d109      	bne.n	80044f0 <HAL_TIM_PWM_Start+0x58>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	bf14      	ite	ne
 80044e8:	2301      	movne	r3, #1
 80044ea:	2300      	moveq	r3, #0
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	e022      	b.n	8004536 <HAL_TIM_PWM_Start+0x9e>
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	2b0c      	cmp	r3, #12
 80044f4:	d109      	bne.n	800450a <HAL_TIM_PWM_Start+0x72>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b01      	cmp	r3, #1
 8004500:	bf14      	ite	ne
 8004502:	2301      	movne	r3, #1
 8004504:	2300      	moveq	r3, #0
 8004506:	b2db      	uxtb	r3, r3
 8004508:	e015      	b.n	8004536 <HAL_TIM_PWM_Start+0x9e>
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	2b10      	cmp	r3, #16
 800450e:	d109      	bne.n	8004524 <HAL_TIM_PWM_Start+0x8c>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b01      	cmp	r3, #1
 800451a:	bf14      	ite	ne
 800451c:	2301      	movne	r3, #1
 800451e:	2300      	moveq	r3, #0
 8004520:	b2db      	uxtb	r3, r3
 8004522:	e008      	b.n	8004536 <HAL_TIM_PWM_Start+0x9e>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b01      	cmp	r3, #1
 800452e:	bf14      	ite	ne
 8004530:	2301      	movne	r3, #1
 8004532:	2300      	moveq	r3, #0
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e0a1      	b.n	8004682 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d104      	bne.n	800454e <HAL_TIM_PWM_Start+0xb6>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2202      	movs	r2, #2
 8004548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800454c:	e023      	b.n	8004596 <HAL_TIM_PWM_Start+0xfe>
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	2b04      	cmp	r3, #4
 8004552:	d104      	bne.n	800455e <HAL_TIM_PWM_Start+0xc6>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2202      	movs	r2, #2
 8004558:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800455c:	e01b      	b.n	8004596 <HAL_TIM_PWM_Start+0xfe>
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	2b08      	cmp	r3, #8
 8004562:	d104      	bne.n	800456e <HAL_TIM_PWM_Start+0xd6>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2202      	movs	r2, #2
 8004568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800456c:	e013      	b.n	8004596 <HAL_TIM_PWM_Start+0xfe>
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	2b0c      	cmp	r3, #12
 8004572:	d104      	bne.n	800457e <HAL_TIM_PWM_Start+0xe6>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2202      	movs	r2, #2
 8004578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800457c:	e00b      	b.n	8004596 <HAL_TIM_PWM_Start+0xfe>
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	2b10      	cmp	r3, #16
 8004582:	d104      	bne.n	800458e <HAL_TIM_PWM_Start+0xf6>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2202      	movs	r2, #2
 8004588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800458c:	e003      	b.n	8004596 <HAL_TIM_PWM_Start+0xfe>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2202      	movs	r2, #2
 8004592:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2201      	movs	r2, #1
 800459c:	6839      	ldr	r1, [r7, #0]
 800459e:	4618      	mov	r0, r3
 80045a0:	f001 f8aa 	bl	80056f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a38      	ldr	r2, [pc, #224]	; (800468c <HAL_TIM_PWM_Start+0x1f4>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d018      	beq.n	80045e0 <HAL_TIM_PWM_Start+0x148>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a37      	ldr	r2, [pc, #220]	; (8004690 <HAL_TIM_PWM_Start+0x1f8>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d013      	beq.n	80045e0 <HAL_TIM_PWM_Start+0x148>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a35      	ldr	r2, [pc, #212]	; (8004694 <HAL_TIM_PWM_Start+0x1fc>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d00e      	beq.n	80045e0 <HAL_TIM_PWM_Start+0x148>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a34      	ldr	r2, [pc, #208]	; (8004698 <HAL_TIM_PWM_Start+0x200>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d009      	beq.n	80045e0 <HAL_TIM_PWM_Start+0x148>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a32      	ldr	r2, [pc, #200]	; (800469c <HAL_TIM_PWM_Start+0x204>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d004      	beq.n	80045e0 <HAL_TIM_PWM_Start+0x148>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a31      	ldr	r2, [pc, #196]	; (80046a0 <HAL_TIM_PWM_Start+0x208>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d101      	bne.n	80045e4 <HAL_TIM_PWM_Start+0x14c>
 80045e0:	2301      	movs	r3, #1
 80045e2:	e000      	b.n	80045e6 <HAL_TIM_PWM_Start+0x14e>
 80045e4:	2300      	movs	r3, #0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d007      	beq.n	80045fa <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a23      	ldr	r2, [pc, #140]	; (800468c <HAL_TIM_PWM_Start+0x1f4>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d01d      	beq.n	8004640 <HAL_TIM_PWM_Start+0x1a8>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800460c:	d018      	beq.n	8004640 <HAL_TIM_PWM_Start+0x1a8>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a24      	ldr	r2, [pc, #144]	; (80046a4 <HAL_TIM_PWM_Start+0x20c>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d013      	beq.n	8004640 <HAL_TIM_PWM_Start+0x1a8>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a22      	ldr	r2, [pc, #136]	; (80046a8 <HAL_TIM_PWM_Start+0x210>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d00e      	beq.n	8004640 <HAL_TIM_PWM_Start+0x1a8>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a1a      	ldr	r2, [pc, #104]	; (8004690 <HAL_TIM_PWM_Start+0x1f8>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d009      	beq.n	8004640 <HAL_TIM_PWM_Start+0x1a8>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a18      	ldr	r2, [pc, #96]	; (8004694 <HAL_TIM_PWM_Start+0x1fc>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d004      	beq.n	8004640 <HAL_TIM_PWM_Start+0x1a8>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a19      	ldr	r2, [pc, #100]	; (80046a0 <HAL_TIM_PWM_Start+0x208>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d115      	bne.n	800466c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689a      	ldr	r2, [r3, #8]
 8004646:	4b19      	ldr	r3, [pc, #100]	; (80046ac <HAL_TIM_PWM_Start+0x214>)
 8004648:	4013      	ands	r3, r2
 800464a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2b06      	cmp	r3, #6
 8004650:	d015      	beq.n	800467e <HAL_TIM_PWM_Start+0x1e6>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004658:	d011      	beq.n	800467e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f042 0201 	orr.w	r2, r2, #1
 8004668:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800466a:	e008      	b.n	800467e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f042 0201 	orr.w	r2, r2, #1
 800467a:	601a      	str	r2, [r3, #0]
 800467c:	e000      	b.n	8004680 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800467e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	40012c00 	.word	0x40012c00
 8004690:	40013400 	.word	0x40013400
 8004694:	40014000 	.word	0x40014000
 8004698:	40014400 	.word	0x40014400
 800469c:	40014800 	.word	0x40014800
 80046a0:	40015000 	.word	0x40015000
 80046a4:	40000400 	.word	0x40000400
 80046a8:	40000800 	.word	0x40000800
 80046ac:	00010007 	.word	0x00010007

080046b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d122      	bne.n	800470c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	f003 0302 	and.w	r3, r3, #2
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d11b      	bne.n	800470c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f06f 0202 	mvn.w	r2, #2
 80046dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2201      	movs	r2, #1
 80046e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	f003 0303 	and.w	r3, r3, #3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d003      	beq.n	80046fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 fb7e 	bl	8004df4 <HAL_TIM_IC_CaptureCallback>
 80046f8:	e005      	b.n	8004706 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 fb70 	bl	8004de0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 fb81 	bl	8004e08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	f003 0304 	and.w	r3, r3, #4
 8004716:	2b04      	cmp	r3, #4
 8004718:	d122      	bne.n	8004760 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	f003 0304 	and.w	r3, r3, #4
 8004724:	2b04      	cmp	r3, #4
 8004726:	d11b      	bne.n	8004760 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f06f 0204 	mvn.w	r2, #4
 8004730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2202      	movs	r2, #2
 8004736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004742:	2b00      	cmp	r3, #0
 8004744:	d003      	beq.n	800474e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 fb54 	bl	8004df4 <HAL_TIM_IC_CaptureCallback>
 800474c:	e005      	b.n	800475a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 fb46 	bl	8004de0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 fb57 	bl	8004e08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	f003 0308 	and.w	r3, r3, #8
 800476a:	2b08      	cmp	r3, #8
 800476c:	d122      	bne.n	80047b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	f003 0308 	and.w	r3, r3, #8
 8004778:	2b08      	cmp	r3, #8
 800477a:	d11b      	bne.n	80047b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f06f 0208 	mvn.w	r2, #8
 8004784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2204      	movs	r2, #4
 800478a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	69db      	ldr	r3, [r3, #28]
 8004792:	f003 0303 	and.w	r3, r3, #3
 8004796:	2b00      	cmp	r3, #0
 8004798:	d003      	beq.n	80047a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 fb2a 	bl	8004df4 <HAL_TIM_IC_CaptureCallback>
 80047a0:	e005      	b.n	80047ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 fb1c 	bl	8004de0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 fb2d 	bl	8004e08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	f003 0310 	and.w	r3, r3, #16
 80047be:	2b10      	cmp	r3, #16
 80047c0:	d122      	bne.n	8004808 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f003 0310 	and.w	r3, r3, #16
 80047cc:	2b10      	cmp	r3, #16
 80047ce:	d11b      	bne.n	8004808 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f06f 0210 	mvn.w	r2, #16
 80047d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2208      	movs	r2, #8
 80047de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	69db      	ldr	r3, [r3, #28]
 80047e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 fb00 	bl	8004df4 <HAL_TIM_IC_CaptureCallback>
 80047f4:	e005      	b.n	8004802 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 faf2 	bl	8004de0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 fb03 	bl	8004e08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	2b01      	cmp	r3, #1
 8004814:	d10e      	bne.n	8004834 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	f003 0301 	and.w	r3, r3, #1
 8004820:	2b01      	cmp	r3, #1
 8004822:	d107      	bne.n	8004834 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f06f 0201 	mvn.w	r2, #1
 800482c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f7fb fecc 	bl	80005cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800483e:	2b80      	cmp	r3, #128	; 0x80
 8004840:	d10e      	bne.n	8004860 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800484c:	2b80      	cmp	r3, #128	; 0x80
 800484e:	d107      	bne.n	8004860 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f001 f80a 	bl	8005874 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800486a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800486e:	d10e      	bne.n	800488e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800487a:	2b80      	cmp	r3, #128	; 0x80
 800487c:	d107      	bne.n	800488e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 fffd 	bl	8005888 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004898:	2b40      	cmp	r3, #64	; 0x40
 800489a:	d10e      	bne.n	80048ba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a6:	2b40      	cmp	r3, #64	; 0x40
 80048a8:	d107      	bne.n	80048ba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 fab1 	bl	8004e1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	f003 0320 	and.w	r3, r3, #32
 80048c4:	2b20      	cmp	r3, #32
 80048c6:	d10e      	bne.n	80048e6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	f003 0320 	and.w	r3, r3, #32
 80048d2:	2b20      	cmp	r3, #32
 80048d4:	d107      	bne.n	80048e6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f06f 0220 	mvn.w	r2, #32
 80048de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 ffbd 	bl	8005860 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048f4:	d10f      	bne.n	8004916 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004900:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004904:	d107      	bne.n	8004916 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800490e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 ffc3 	bl	800589c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004920:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004924:	d10f      	bne.n	8004946 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004930:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004934:	d107      	bne.n	8004946 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800493e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 ffb5 	bl	80058b0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004950:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004954:	d10f      	bne.n	8004976 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004960:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004964:	d107      	bne.n	8004976 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800496e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 ffa7 	bl	80058c4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004980:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004984:	d10f      	bne.n	80049a6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004990:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004994:	d107      	bne.n	80049a6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800499e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 ff99 	bl	80058d8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049a6:	bf00      	nop
 80049a8:	3708      	adds	r7, #8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
	...

080049b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049bc:	2300      	movs	r3, #0
 80049be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d101      	bne.n	80049ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049ca:	2302      	movs	r3, #2
 80049cc:	e0ff      	b.n	8004bce <HAL_TIM_PWM_ConfigChannel+0x21e>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2b14      	cmp	r3, #20
 80049da:	f200 80f0 	bhi.w	8004bbe <HAL_TIM_PWM_ConfigChannel+0x20e>
 80049de:	a201      	add	r2, pc, #4	; (adr r2, 80049e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80049e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e4:	08004a39 	.word	0x08004a39
 80049e8:	08004bbf 	.word	0x08004bbf
 80049ec:	08004bbf 	.word	0x08004bbf
 80049f0:	08004bbf 	.word	0x08004bbf
 80049f4:	08004a79 	.word	0x08004a79
 80049f8:	08004bbf 	.word	0x08004bbf
 80049fc:	08004bbf 	.word	0x08004bbf
 8004a00:	08004bbf 	.word	0x08004bbf
 8004a04:	08004abb 	.word	0x08004abb
 8004a08:	08004bbf 	.word	0x08004bbf
 8004a0c:	08004bbf 	.word	0x08004bbf
 8004a10:	08004bbf 	.word	0x08004bbf
 8004a14:	08004afb 	.word	0x08004afb
 8004a18:	08004bbf 	.word	0x08004bbf
 8004a1c:	08004bbf 	.word	0x08004bbf
 8004a20:	08004bbf 	.word	0x08004bbf
 8004a24:	08004b3d 	.word	0x08004b3d
 8004a28:	08004bbf 	.word	0x08004bbf
 8004a2c:	08004bbf 	.word	0x08004bbf
 8004a30:	08004bbf 	.word	0x08004bbf
 8004a34:	08004b7d 	.word	0x08004b7d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68b9      	ldr	r1, [r7, #8]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f000 fa94 	bl	8004f6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	699a      	ldr	r2, [r3, #24]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f042 0208 	orr.w	r2, r2, #8
 8004a52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	699a      	ldr	r2, [r3, #24]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f022 0204 	bic.w	r2, r2, #4
 8004a62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	6999      	ldr	r1, [r3, #24]
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	691a      	ldr	r2, [r3, #16]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	430a      	orrs	r2, r1
 8004a74:	619a      	str	r2, [r3, #24]
      break;
 8004a76:	e0a5      	b.n	8004bc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68b9      	ldr	r1, [r7, #8]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f000 fb0e 	bl	80050a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	699a      	ldr	r2, [r3, #24]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	699a      	ldr	r2, [r3, #24]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6999      	ldr	r1, [r3, #24]
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	021a      	lsls	r2, r3, #8
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	619a      	str	r2, [r3, #24]
      break;
 8004ab8:	e084      	b.n	8004bc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68b9      	ldr	r1, [r7, #8]
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f000 fb81 	bl	80051c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	69da      	ldr	r2, [r3, #28]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f042 0208 	orr.w	r2, r2, #8
 8004ad4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	69da      	ldr	r2, [r3, #28]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f022 0204 	bic.w	r2, r2, #4
 8004ae4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	69d9      	ldr	r1, [r3, #28]
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	691a      	ldr	r2, [r3, #16]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	430a      	orrs	r2, r1
 8004af6:	61da      	str	r2, [r3, #28]
      break;
 8004af8:	e064      	b.n	8004bc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68b9      	ldr	r1, [r7, #8]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 fbf3 	bl	80052ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	69da      	ldr	r2, [r3, #28]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	69da      	ldr	r2, [r3, #28]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	69d9      	ldr	r1, [r3, #28]
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	021a      	lsls	r2, r3, #8
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	430a      	orrs	r2, r1
 8004b38:	61da      	str	r2, [r3, #28]
      break;
 8004b3a:	e043      	b.n	8004bc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68b9      	ldr	r1, [r7, #8]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f000 fc66 	bl	8005414 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f042 0208 	orr.w	r2, r2, #8
 8004b56:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 0204 	bic.w	r2, r2, #4
 8004b66:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	691a      	ldr	r2, [r3, #16]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	430a      	orrs	r2, r1
 8004b78:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004b7a:	e023      	b.n	8004bc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68b9      	ldr	r1, [r7, #8]
 8004b82:	4618      	mov	r0, r3
 8004b84:	f000 fcb0 	bl	80054e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b96:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ba6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	021a      	lsls	r2, r3, #8
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004bbc:	e002      	b.n	8004bc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	75fb      	strb	r3, [r7, #23]
      break;
 8004bc2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004bcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3718      	adds	r7, #24
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop

08004bd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004be2:	2300      	movs	r3, #0
 8004be4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d101      	bne.n	8004bf4 <HAL_TIM_ConfigClockSource+0x1c>
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	e0e6      	b.n	8004dc2 <HAL_TIM_ConfigClockSource+0x1ea>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2202      	movs	r2, #2
 8004c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004c12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68ba      	ldr	r2, [r7, #8]
 8004c26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a67      	ldr	r2, [pc, #412]	; (8004dcc <HAL_TIM_ConfigClockSource+0x1f4>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	f000 80b1 	beq.w	8004d96 <HAL_TIM_ConfigClockSource+0x1be>
 8004c34:	4a65      	ldr	r2, [pc, #404]	; (8004dcc <HAL_TIM_ConfigClockSource+0x1f4>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	f200 80b6 	bhi.w	8004da8 <HAL_TIM_ConfigClockSource+0x1d0>
 8004c3c:	4a64      	ldr	r2, [pc, #400]	; (8004dd0 <HAL_TIM_ConfigClockSource+0x1f8>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	f000 80a9 	beq.w	8004d96 <HAL_TIM_ConfigClockSource+0x1be>
 8004c44:	4a62      	ldr	r2, [pc, #392]	; (8004dd0 <HAL_TIM_ConfigClockSource+0x1f8>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	f200 80ae 	bhi.w	8004da8 <HAL_TIM_ConfigClockSource+0x1d0>
 8004c4c:	4a61      	ldr	r2, [pc, #388]	; (8004dd4 <HAL_TIM_ConfigClockSource+0x1fc>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	f000 80a1 	beq.w	8004d96 <HAL_TIM_ConfigClockSource+0x1be>
 8004c54:	4a5f      	ldr	r2, [pc, #380]	; (8004dd4 <HAL_TIM_ConfigClockSource+0x1fc>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	f200 80a6 	bhi.w	8004da8 <HAL_TIM_ConfigClockSource+0x1d0>
 8004c5c:	4a5e      	ldr	r2, [pc, #376]	; (8004dd8 <HAL_TIM_ConfigClockSource+0x200>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	f000 8099 	beq.w	8004d96 <HAL_TIM_ConfigClockSource+0x1be>
 8004c64:	4a5c      	ldr	r2, [pc, #368]	; (8004dd8 <HAL_TIM_ConfigClockSource+0x200>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	f200 809e 	bhi.w	8004da8 <HAL_TIM_ConfigClockSource+0x1d0>
 8004c6c:	4a5b      	ldr	r2, [pc, #364]	; (8004ddc <HAL_TIM_ConfigClockSource+0x204>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	f000 8091 	beq.w	8004d96 <HAL_TIM_ConfigClockSource+0x1be>
 8004c74:	4a59      	ldr	r2, [pc, #356]	; (8004ddc <HAL_TIM_ConfigClockSource+0x204>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	f200 8096 	bhi.w	8004da8 <HAL_TIM_ConfigClockSource+0x1d0>
 8004c7c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004c80:	f000 8089 	beq.w	8004d96 <HAL_TIM_ConfigClockSource+0x1be>
 8004c84:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004c88:	f200 808e 	bhi.w	8004da8 <HAL_TIM_ConfigClockSource+0x1d0>
 8004c8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c90:	d03e      	beq.n	8004d10 <HAL_TIM_ConfigClockSource+0x138>
 8004c92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c96:	f200 8087 	bhi.w	8004da8 <HAL_TIM_ConfigClockSource+0x1d0>
 8004c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c9e:	f000 8086 	beq.w	8004dae <HAL_TIM_ConfigClockSource+0x1d6>
 8004ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ca6:	d87f      	bhi.n	8004da8 <HAL_TIM_ConfigClockSource+0x1d0>
 8004ca8:	2b70      	cmp	r3, #112	; 0x70
 8004caa:	d01a      	beq.n	8004ce2 <HAL_TIM_ConfigClockSource+0x10a>
 8004cac:	2b70      	cmp	r3, #112	; 0x70
 8004cae:	d87b      	bhi.n	8004da8 <HAL_TIM_ConfigClockSource+0x1d0>
 8004cb0:	2b60      	cmp	r3, #96	; 0x60
 8004cb2:	d050      	beq.n	8004d56 <HAL_TIM_ConfigClockSource+0x17e>
 8004cb4:	2b60      	cmp	r3, #96	; 0x60
 8004cb6:	d877      	bhi.n	8004da8 <HAL_TIM_ConfigClockSource+0x1d0>
 8004cb8:	2b50      	cmp	r3, #80	; 0x50
 8004cba:	d03c      	beq.n	8004d36 <HAL_TIM_ConfigClockSource+0x15e>
 8004cbc:	2b50      	cmp	r3, #80	; 0x50
 8004cbe:	d873      	bhi.n	8004da8 <HAL_TIM_ConfigClockSource+0x1d0>
 8004cc0:	2b40      	cmp	r3, #64	; 0x40
 8004cc2:	d058      	beq.n	8004d76 <HAL_TIM_ConfigClockSource+0x19e>
 8004cc4:	2b40      	cmp	r3, #64	; 0x40
 8004cc6:	d86f      	bhi.n	8004da8 <HAL_TIM_ConfigClockSource+0x1d0>
 8004cc8:	2b30      	cmp	r3, #48	; 0x30
 8004cca:	d064      	beq.n	8004d96 <HAL_TIM_ConfigClockSource+0x1be>
 8004ccc:	2b30      	cmp	r3, #48	; 0x30
 8004cce:	d86b      	bhi.n	8004da8 <HAL_TIM_ConfigClockSource+0x1d0>
 8004cd0:	2b20      	cmp	r3, #32
 8004cd2:	d060      	beq.n	8004d96 <HAL_TIM_ConfigClockSource+0x1be>
 8004cd4:	2b20      	cmp	r3, #32
 8004cd6:	d867      	bhi.n	8004da8 <HAL_TIM_ConfigClockSource+0x1d0>
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d05c      	beq.n	8004d96 <HAL_TIM_ConfigClockSource+0x1be>
 8004cdc:	2b10      	cmp	r3, #16
 8004cde:	d05a      	beq.n	8004d96 <HAL_TIM_ConfigClockSource+0x1be>
 8004ce0:	e062      	b.n	8004da8 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6818      	ldr	r0, [r3, #0]
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	6899      	ldr	r1, [r3, #8]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	685a      	ldr	r2, [r3, #4]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	f000 fce1 	bl	80056b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68ba      	ldr	r2, [r7, #8]
 8004d0c:	609a      	str	r2, [r3, #8]
      break;
 8004d0e:	e04f      	b.n	8004db0 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6818      	ldr	r0, [r3, #0]
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	6899      	ldr	r1, [r3, #8]
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	f000 fcca 	bl	80056b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689a      	ldr	r2, [r3, #8]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d32:	609a      	str	r2, [r3, #8]
      break;
 8004d34:	e03c      	b.n	8004db0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6818      	ldr	r0, [r3, #0]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	6859      	ldr	r1, [r3, #4]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	461a      	mov	r2, r3
 8004d44:	f000 fc3c 	bl	80055c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2150      	movs	r1, #80	; 0x50
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f000 fc95 	bl	800567e <TIM_ITRx_SetConfig>
      break;
 8004d54:	e02c      	b.n	8004db0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6818      	ldr	r0, [r3, #0]
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	6859      	ldr	r1, [r3, #4]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	461a      	mov	r2, r3
 8004d64:	f000 fc5b 	bl	800561e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2160      	movs	r1, #96	; 0x60
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 fc85 	bl	800567e <TIM_ITRx_SetConfig>
      break;
 8004d74:	e01c      	b.n	8004db0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6818      	ldr	r0, [r3, #0]
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	6859      	ldr	r1, [r3, #4]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	461a      	mov	r2, r3
 8004d84:	f000 fc1c 	bl	80055c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2140      	movs	r1, #64	; 0x40
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f000 fc75 	bl	800567e <TIM_ITRx_SetConfig>
      break;
 8004d94:	e00c      	b.n	8004db0 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4619      	mov	r1, r3
 8004da0:	4610      	mov	r0, r2
 8004da2:	f000 fc6c 	bl	800567e <TIM_ITRx_SetConfig>
      break;
 8004da6:	e003      	b.n	8004db0 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	73fb      	strb	r3, [r7, #15]
      break;
 8004dac:	e000      	b.n	8004db0 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 8004dae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	00100070 	.word	0x00100070
 8004dd0:	00100050 	.word	0x00100050
 8004dd4:	00100040 	.word	0x00100040
 8004dd8:	00100030 	.word	0x00100030
 8004ddc:	00100020 	.word	0x00100020

08004de0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e10:	bf00      	nop
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a42      	ldr	r2, [pc, #264]	; (8004f4c <TIM_Base_SetConfig+0x11c>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d013      	beq.n	8004e70 <TIM_Base_SetConfig+0x40>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e4e:	d00f      	beq.n	8004e70 <TIM_Base_SetConfig+0x40>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a3f      	ldr	r2, [pc, #252]	; (8004f50 <TIM_Base_SetConfig+0x120>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d00b      	beq.n	8004e70 <TIM_Base_SetConfig+0x40>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a3e      	ldr	r2, [pc, #248]	; (8004f54 <TIM_Base_SetConfig+0x124>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d007      	beq.n	8004e70 <TIM_Base_SetConfig+0x40>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a3d      	ldr	r2, [pc, #244]	; (8004f58 <TIM_Base_SetConfig+0x128>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d003      	beq.n	8004e70 <TIM_Base_SetConfig+0x40>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a3c      	ldr	r2, [pc, #240]	; (8004f5c <TIM_Base_SetConfig+0x12c>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d108      	bne.n	8004e82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a31      	ldr	r2, [pc, #196]	; (8004f4c <TIM_Base_SetConfig+0x11c>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d01f      	beq.n	8004eca <TIM_Base_SetConfig+0x9a>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e90:	d01b      	beq.n	8004eca <TIM_Base_SetConfig+0x9a>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a2e      	ldr	r2, [pc, #184]	; (8004f50 <TIM_Base_SetConfig+0x120>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d017      	beq.n	8004eca <TIM_Base_SetConfig+0x9a>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a2d      	ldr	r2, [pc, #180]	; (8004f54 <TIM_Base_SetConfig+0x124>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d013      	beq.n	8004eca <TIM_Base_SetConfig+0x9a>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a2c      	ldr	r2, [pc, #176]	; (8004f58 <TIM_Base_SetConfig+0x128>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d00f      	beq.n	8004eca <TIM_Base_SetConfig+0x9a>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a2c      	ldr	r2, [pc, #176]	; (8004f60 <TIM_Base_SetConfig+0x130>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d00b      	beq.n	8004eca <TIM_Base_SetConfig+0x9a>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a2b      	ldr	r2, [pc, #172]	; (8004f64 <TIM_Base_SetConfig+0x134>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d007      	beq.n	8004eca <TIM_Base_SetConfig+0x9a>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a2a      	ldr	r2, [pc, #168]	; (8004f68 <TIM_Base_SetConfig+0x138>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d003      	beq.n	8004eca <TIM_Base_SetConfig+0x9a>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a25      	ldr	r2, [pc, #148]	; (8004f5c <TIM_Base_SetConfig+0x12c>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d108      	bne.n	8004edc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ed0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	689a      	ldr	r2, [r3, #8]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a12      	ldr	r2, [pc, #72]	; (8004f4c <TIM_Base_SetConfig+0x11c>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d013      	beq.n	8004f30 <TIM_Base_SetConfig+0x100>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a13      	ldr	r2, [pc, #76]	; (8004f58 <TIM_Base_SetConfig+0x128>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d00f      	beq.n	8004f30 <TIM_Base_SetConfig+0x100>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a13      	ldr	r2, [pc, #76]	; (8004f60 <TIM_Base_SetConfig+0x130>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d00b      	beq.n	8004f30 <TIM_Base_SetConfig+0x100>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a12      	ldr	r2, [pc, #72]	; (8004f64 <TIM_Base_SetConfig+0x134>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d007      	beq.n	8004f30 <TIM_Base_SetConfig+0x100>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a11      	ldr	r2, [pc, #68]	; (8004f68 <TIM_Base_SetConfig+0x138>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d003      	beq.n	8004f30 <TIM_Base_SetConfig+0x100>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a0c      	ldr	r2, [pc, #48]	; (8004f5c <TIM_Base_SetConfig+0x12c>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d103      	bne.n	8004f38 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	691a      	ldr	r2, [r3, #16]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	615a      	str	r2, [r3, #20]
}
 8004f3e:	bf00      	nop
 8004f40:	3714      	adds	r7, #20
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	40012c00 	.word	0x40012c00
 8004f50:	40000400 	.word	0x40000400
 8004f54:	40000800 	.word	0x40000800
 8004f58:	40013400 	.word	0x40013400
 8004f5c:	40015000 	.word	0x40015000
 8004f60:	40014000 	.word	0x40014000
 8004f64:	40014400 	.word	0x40014400
 8004f68:	40014800 	.word	0x40014800

08004f6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b087      	sub	sp, #28
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	f023 0201 	bic.w	r2, r3, #1
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	699b      	ldr	r3, [r3, #24]
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f023 0303 	bic.w	r3, r3, #3
 8004fa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	f023 0302 	bic.w	r3, r3, #2
 8004fb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a30      	ldr	r2, [pc, #192]	; (8005088 <TIM_OC1_SetConfig+0x11c>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d013      	beq.n	8004ff4 <TIM_OC1_SetConfig+0x88>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a2f      	ldr	r2, [pc, #188]	; (800508c <TIM_OC1_SetConfig+0x120>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d00f      	beq.n	8004ff4 <TIM_OC1_SetConfig+0x88>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a2e      	ldr	r2, [pc, #184]	; (8005090 <TIM_OC1_SetConfig+0x124>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d00b      	beq.n	8004ff4 <TIM_OC1_SetConfig+0x88>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a2d      	ldr	r2, [pc, #180]	; (8005094 <TIM_OC1_SetConfig+0x128>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d007      	beq.n	8004ff4 <TIM_OC1_SetConfig+0x88>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a2c      	ldr	r2, [pc, #176]	; (8005098 <TIM_OC1_SetConfig+0x12c>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d003      	beq.n	8004ff4 <TIM_OC1_SetConfig+0x88>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a2b      	ldr	r2, [pc, #172]	; (800509c <TIM_OC1_SetConfig+0x130>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d10c      	bne.n	800500e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f023 0308 	bic.w	r3, r3, #8
 8004ffa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	4313      	orrs	r3, r2
 8005004:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f023 0304 	bic.w	r3, r3, #4
 800500c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a1d      	ldr	r2, [pc, #116]	; (8005088 <TIM_OC1_SetConfig+0x11c>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d013      	beq.n	800503e <TIM_OC1_SetConfig+0xd2>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a1c      	ldr	r2, [pc, #112]	; (800508c <TIM_OC1_SetConfig+0x120>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d00f      	beq.n	800503e <TIM_OC1_SetConfig+0xd2>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a1b      	ldr	r2, [pc, #108]	; (8005090 <TIM_OC1_SetConfig+0x124>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d00b      	beq.n	800503e <TIM_OC1_SetConfig+0xd2>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a1a      	ldr	r2, [pc, #104]	; (8005094 <TIM_OC1_SetConfig+0x128>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d007      	beq.n	800503e <TIM_OC1_SetConfig+0xd2>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a19      	ldr	r2, [pc, #100]	; (8005098 <TIM_OC1_SetConfig+0x12c>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d003      	beq.n	800503e <TIM_OC1_SetConfig+0xd2>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a18      	ldr	r2, [pc, #96]	; (800509c <TIM_OC1_SetConfig+0x130>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d111      	bne.n	8005062 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005044:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800504c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	693a      	ldr	r2, [r7, #16]
 8005054:	4313      	orrs	r3, r2
 8005056:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	699b      	ldr	r3, [r3, #24]
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	4313      	orrs	r3, r2
 8005060:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	621a      	str	r2, [r3, #32]
}
 800507c:	bf00      	nop
 800507e:	371c      	adds	r7, #28
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr
 8005088:	40012c00 	.word	0x40012c00
 800508c:	40013400 	.word	0x40013400
 8005090:	40014000 	.word	0x40014000
 8005094:	40014400 	.word	0x40014400
 8005098:	40014800 	.word	0x40014800
 800509c:	40015000 	.word	0x40015000

080050a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b087      	sub	sp, #28
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	f023 0210 	bic.w	r2, r3, #16
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	021b      	lsls	r3, r3, #8
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	f023 0320 	bic.w	r3, r3, #32
 80050ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	011b      	lsls	r3, r3, #4
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a2c      	ldr	r2, [pc, #176]	; (80051b0 <TIM_OC2_SetConfig+0x110>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d007      	beq.n	8005114 <TIM_OC2_SetConfig+0x74>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a2b      	ldr	r2, [pc, #172]	; (80051b4 <TIM_OC2_SetConfig+0x114>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d003      	beq.n	8005114 <TIM_OC2_SetConfig+0x74>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a2a      	ldr	r2, [pc, #168]	; (80051b8 <TIM_OC2_SetConfig+0x118>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d10d      	bne.n	8005130 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800511a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	011b      	lsls	r3, r3, #4
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	4313      	orrs	r3, r2
 8005126:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800512e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a1f      	ldr	r2, [pc, #124]	; (80051b0 <TIM_OC2_SetConfig+0x110>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d013      	beq.n	8005160 <TIM_OC2_SetConfig+0xc0>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a1e      	ldr	r2, [pc, #120]	; (80051b4 <TIM_OC2_SetConfig+0x114>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d00f      	beq.n	8005160 <TIM_OC2_SetConfig+0xc0>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a1e      	ldr	r2, [pc, #120]	; (80051bc <TIM_OC2_SetConfig+0x11c>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d00b      	beq.n	8005160 <TIM_OC2_SetConfig+0xc0>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a1d      	ldr	r2, [pc, #116]	; (80051c0 <TIM_OC2_SetConfig+0x120>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d007      	beq.n	8005160 <TIM_OC2_SetConfig+0xc0>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a1c      	ldr	r2, [pc, #112]	; (80051c4 <TIM_OC2_SetConfig+0x124>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d003      	beq.n	8005160 <TIM_OC2_SetConfig+0xc0>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a17      	ldr	r2, [pc, #92]	; (80051b8 <TIM_OC2_SetConfig+0x118>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d113      	bne.n	8005188 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005166:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800516e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	4313      	orrs	r3, r2
 800517a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	4313      	orrs	r3, r2
 8005186:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	693a      	ldr	r2, [r7, #16]
 800518c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	685a      	ldr	r2, [r3, #4]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	621a      	str	r2, [r3, #32]
}
 80051a2:	bf00      	nop
 80051a4:	371c      	adds	r7, #28
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	40012c00 	.word	0x40012c00
 80051b4:	40013400 	.word	0x40013400
 80051b8:	40015000 	.word	0x40015000
 80051bc:	40014000 	.word	0x40014000
 80051c0:	40014400 	.word	0x40014400
 80051c4:	40014800 	.word	0x40014800

080051c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b087      	sub	sp, #28
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	69db      	ldr	r3, [r3, #28]
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f023 0303 	bic.w	r3, r3, #3
 8005202:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	4313      	orrs	r3, r2
 800520c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005214:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	021b      	lsls	r3, r3, #8
 800521c:	697a      	ldr	r2, [r7, #20]
 800521e:	4313      	orrs	r3, r2
 8005220:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a2b      	ldr	r2, [pc, #172]	; (80052d4 <TIM_OC3_SetConfig+0x10c>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d007      	beq.n	800523a <TIM_OC3_SetConfig+0x72>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a2a      	ldr	r2, [pc, #168]	; (80052d8 <TIM_OC3_SetConfig+0x110>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d003      	beq.n	800523a <TIM_OC3_SetConfig+0x72>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a29      	ldr	r2, [pc, #164]	; (80052dc <TIM_OC3_SetConfig+0x114>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d10d      	bne.n	8005256 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005240:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	021b      	lsls	r3, r3, #8
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	4313      	orrs	r3, r2
 800524c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005254:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a1e      	ldr	r2, [pc, #120]	; (80052d4 <TIM_OC3_SetConfig+0x10c>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d013      	beq.n	8005286 <TIM_OC3_SetConfig+0xbe>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a1d      	ldr	r2, [pc, #116]	; (80052d8 <TIM_OC3_SetConfig+0x110>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d00f      	beq.n	8005286 <TIM_OC3_SetConfig+0xbe>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a1d      	ldr	r2, [pc, #116]	; (80052e0 <TIM_OC3_SetConfig+0x118>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d00b      	beq.n	8005286 <TIM_OC3_SetConfig+0xbe>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a1c      	ldr	r2, [pc, #112]	; (80052e4 <TIM_OC3_SetConfig+0x11c>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d007      	beq.n	8005286 <TIM_OC3_SetConfig+0xbe>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a1b      	ldr	r2, [pc, #108]	; (80052e8 <TIM_OC3_SetConfig+0x120>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d003      	beq.n	8005286 <TIM_OC3_SetConfig+0xbe>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a16      	ldr	r2, [pc, #88]	; (80052dc <TIM_OC3_SetConfig+0x114>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d113      	bne.n	80052ae <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800528c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005294:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	011b      	lsls	r3, r3, #4
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	4313      	orrs	r3, r2
 80052a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	011b      	lsls	r3, r3, #4
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	685a      	ldr	r2, [r3, #4]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	621a      	str	r2, [r3, #32]
}
 80052c8:	bf00      	nop
 80052ca:	371c      	adds	r7, #28
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr
 80052d4:	40012c00 	.word	0x40012c00
 80052d8:	40013400 	.word	0x40013400
 80052dc:	40015000 	.word	0x40015000
 80052e0:	40014000 	.word	0x40014000
 80052e4:	40014400 	.word	0x40014400
 80052e8:	40014800 	.word	0x40014800

080052ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b087      	sub	sp, #28
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800531a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800531e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005326:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	021b      	lsls	r3, r3, #8
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	4313      	orrs	r3, r2
 8005332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800533a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	031b      	lsls	r3, r3, #12
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	4313      	orrs	r3, r2
 8005346:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a2c      	ldr	r2, [pc, #176]	; (80053fc <TIM_OC4_SetConfig+0x110>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d007      	beq.n	8005360 <TIM_OC4_SetConfig+0x74>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a2b      	ldr	r2, [pc, #172]	; (8005400 <TIM_OC4_SetConfig+0x114>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d003      	beq.n	8005360 <TIM_OC4_SetConfig+0x74>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a2a      	ldr	r2, [pc, #168]	; (8005404 <TIM_OC4_SetConfig+0x118>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d10d      	bne.n	800537c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005366:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	031b      	lsls	r3, r3, #12
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	4313      	orrs	r3, r2
 8005372:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800537a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a1f      	ldr	r2, [pc, #124]	; (80053fc <TIM_OC4_SetConfig+0x110>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d013      	beq.n	80053ac <TIM_OC4_SetConfig+0xc0>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a1e      	ldr	r2, [pc, #120]	; (8005400 <TIM_OC4_SetConfig+0x114>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d00f      	beq.n	80053ac <TIM_OC4_SetConfig+0xc0>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a1e      	ldr	r2, [pc, #120]	; (8005408 <TIM_OC4_SetConfig+0x11c>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d00b      	beq.n	80053ac <TIM_OC4_SetConfig+0xc0>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a1d      	ldr	r2, [pc, #116]	; (800540c <TIM_OC4_SetConfig+0x120>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d007      	beq.n	80053ac <TIM_OC4_SetConfig+0xc0>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a1c      	ldr	r2, [pc, #112]	; (8005410 <TIM_OC4_SetConfig+0x124>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d003      	beq.n	80053ac <TIM_OC4_SetConfig+0xc0>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a17      	ldr	r2, [pc, #92]	; (8005404 <TIM_OC4_SetConfig+0x118>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d113      	bne.n	80053d4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053b2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053ba:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	019b      	lsls	r3, r3, #6
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	019b      	lsls	r3, r3, #6
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	693a      	ldr	r2, [r7, #16]
 80053d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	685a      	ldr	r2, [r3, #4]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	621a      	str	r2, [r3, #32]
}
 80053ee:	bf00      	nop
 80053f0:	371c      	adds	r7, #28
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	40012c00 	.word	0x40012c00
 8005400:	40013400 	.word	0x40013400
 8005404:	40015000 	.word	0x40015000
 8005408:	40014000 	.word	0x40014000
 800540c:	40014400 	.word	0x40014400
 8005410:	40014800 	.word	0x40014800

08005414 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005414:	b480      	push	{r7}
 8005416:	b087      	sub	sp, #28
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a1b      	ldr	r3, [r3, #32]
 800542e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800543a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005446:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	4313      	orrs	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005458:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	041b      	lsls	r3, r3, #16
 8005460:	693a      	ldr	r2, [r7, #16]
 8005462:	4313      	orrs	r3, r2
 8005464:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a19      	ldr	r2, [pc, #100]	; (80054d0 <TIM_OC5_SetConfig+0xbc>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d013      	beq.n	8005496 <TIM_OC5_SetConfig+0x82>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a18      	ldr	r2, [pc, #96]	; (80054d4 <TIM_OC5_SetConfig+0xc0>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d00f      	beq.n	8005496 <TIM_OC5_SetConfig+0x82>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a17      	ldr	r2, [pc, #92]	; (80054d8 <TIM_OC5_SetConfig+0xc4>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d00b      	beq.n	8005496 <TIM_OC5_SetConfig+0x82>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a16      	ldr	r2, [pc, #88]	; (80054dc <TIM_OC5_SetConfig+0xc8>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d007      	beq.n	8005496 <TIM_OC5_SetConfig+0x82>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a15      	ldr	r2, [pc, #84]	; (80054e0 <TIM_OC5_SetConfig+0xcc>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d003      	beq.n	8005496 <TIM_OC5_SetConfig+0x82>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a14      	ldr	r2, [pc, #80]	; (80054e4 <TIM_OC5_SetConfig+0xd0>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d109      	bne.n	80054aa <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800549c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	021b      	lsls	r3, r3, #8
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	685a      	ldr	r2, [r3, #4]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	621a      	str	r2, [r3, #32]
}
 80054c4:	bf00      	nop
 80054c6:	371c      	adds	r7, #28
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr
 80054d0:	40012c00 	.word	0x40012c00
 80054d4:	40013400 	.word	0x40013400
 80054d8:	40014000 	.word	0x40014000
 80054dc:	40014400 	.word	0x40014400
 80054e0:	40014800 	.word	0x40014800
 80054e4:	40015000 	.word	0x40015000

080054e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b087      	sub	sp, #28
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800550e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005516:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800551a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	021b      	lsls	r3, r3, #8
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	4313      	orrs	r3, r2
 8005526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800552e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	051b      	lsls	r3, r3, #20
 8005536:	693a      	ldr	r2, [r7, #16]
 8005538:	4313      	orrs	r3, r2
 800553a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a1a      	ldr	r2, [pc, #104]	; (80055a8 <TIM_OC6_SetConfig+0xc0>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d013      	beq.n	800556c <TIM_OC6_SetConfig+0x84>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a19      	ldr	r2, [pc, #100]	; (80055ac <TIM_OC6_SetConfig+0xc4>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d00f      	beq.n	800556c <TIM_OC6_SetConfig+0x84>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a18      	ldr	r2, [pc, #96]	; (80055b0 <TIM_OC6_SetConfig+0xc8>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d00b      	beq.n	800556c <TIM_OC6_SetConfig+0x84>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a17      	ldr	r2, [pc, #92]	; (80055b4 <TIM_OC6_SetConfig+0xcc>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d007      	beq.n	800556c <TIM_OC6_SetConfig+0x84>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a16      	ldr	r2, [pc, #88]	; (80055b8 <TIM_OC6_SetConfig+0xd0>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d003      	beq.n	800556c <TIM_OC6_SetConfig+0x84>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a15      	ldr	r2, [pc, #84]	; (80055bc <TIM_OC6_SetConfig+0xd4>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d109      	bne.n	8005580 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005572:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	695b      	ldr	r3, [r3, #20]
 8005578:	029b      	lsls	r3, r3, #10
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	4313      	orrs	r3, r2
 800557e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	685a      	ldr	r2, [r3, #4]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	693a      	ldr	r2, [r7, #16]
 8005598:	621a      	str	r2, [r3, #32]
}
 800559a:	bf00      	nop
 800559c:	371c      	adds	r7, #28
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	40012c00 	.word	0x40012c00
 80055ac:	40013400 	.word	0x40013400
 80055b0:	40014000 	.word	0x40014000
 80055b4:	40014400 	.word	0x40014400
 80055b8:	40014800 	.word	0x40014800
 80055bc:	40015000 	.word	0x40015000

080055c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b087      	sub	sp, #28
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6a1b      	ldr	r3, [r3, #32]
 80055d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	f023 0201 	bic.w	r2, r3, #1
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	011b      	lsls	r3, r3, #4
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	f023 030a 	bic.w	r3, r3, #10
 80055fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055fe:	697a      	ldr	r2, [r7, #20]
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	4313      	orrs	r3, r2
 8005604:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	621a      	str	r2, [r3, #32]
}
 8005612:	bf00      	nop
 8005614:	371c      	adds	r7, #28
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr

0800561e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800561e:	b480      	push	{r7}
 8005620:	b087      	sub	sp, #28
 8005622:	af00      	add	r7, sp, #0
 8005624:	60f8      	str	r0, [r7, #12]
 8005626:	60b9      	str	r1, [r7, #8]
 8005628:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	f023 0210 	bic.w	r2, r3, #16
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6a1b      	ldr	r3, [r3, #32]
 8005640:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005648:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	031b      	lsls	r3, r3, #12
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	4313      	orrs	r3, r2
 8005652:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800565a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	011b      	lsls	r3, r3, #4
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	4313      	orrs	r3, r2
 8005664:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	621a      	str	r2, [r3, #32]
}
 8005672:	bf00      	nop
 8005674:	371c      	adds	r7, #28
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800567e:	b480      	push	{r7}
 8005680:	b085      	sub	sp, #20
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
 8005686:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005698:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	4313      	orrs	r3, r2
 80056a0:	f043 0307 	orr.w	r3, r3, #7
 80056a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	609a      	str	r2, [r3, #8]
}
 80056ac:	bf00      	nop
 80056ae:	3714      	adds	r7, #20
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b087      	sub	sp, #28
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	607a      	str	r2, [r7, #4]
 80056c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	021a      	lsls	r2, r3, #8
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	431a      	orrs	r2, r3
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	4313      	orrs	r3, r2
 80056e0:	697a      	ldr	r2, [r7, #20]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	609a      	str	r2, [r3, #8]
}
 80056ec:	bf00      	nop
 80056ee:	371c      	adds	r7, #28
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b087      	sub	sp, #28
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	f003 031f 	and.w	r3, r3, #31
 800570a:	2201      	movs	r2, #1
 800570c:	fa02 f303 	lsl.w	r3, r2, r3
 8005710:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6a1a      	ldr	r2, [r3, #32]
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	43db      	mvns	r3, r3
 800571a:	401a      	ands	r2, r3
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6a1a      	ldr	r2, [r3, #32]
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	f003 031f 	and.w	r3, r3, #31
 800572a:	6879      	ldr	r1, [r7, #4]
 800572c:	fa01 f303 	lsl.w	r3, r1, r3
 8005730:	431a      	orrs	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	621a      	str	r2, [r3, #32]
}
 8005736:	bf00      	nop
 8005738:	371c      	adds	r7, #28
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
	...

08005744 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005754:	2b01      	cmp	r3, #1
 8005756:	d101      	bne.n	800575c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005758:	2302      	movs	r3, #2
 800575a:	e06f      	b.n	800583c <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2202      	movs	r2, #2
 8005768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a31      	ldr	r2, [pc, #196]	; (8005848 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d009      	beq.n	800579a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a30      	ldr	r2, [pc, #192]	; (800584c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d004      	beq.n	800579a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a2e      	ldr	r2, [pc, #184]	; (8005850 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d108      	bne.n	80057ac <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80057a0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80057b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	4313      	orrs	r3, r2
 80057c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a1e      	ldr	r2, [pc, #120]	; (8005848 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d01d      	beq.n	8005810 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057dc:	d018      	beq.n	8005810 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a1c      	ldr	r2, [pc, #112]	; (8005854 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d013      	beq.n	8005810 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a1a      	ldr	r2, [pc, #104]	; (8005858 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d00e      	beq.n	8005810 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a15      	ldr	r2, [pc, #84]	; (800584c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d009      	beq.n	8005810 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a16      	ldr	r2, [pc, #88]	; (800585c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d004      	beq.n	8005810 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a11      	ldr	r2, [pc, #68]	; (8005850 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d10c      	bne.n	800582a <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005816:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	4313      	orrs	r3, r2
 8005820:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68ba      	ldr	r2, [r7, #8]
 8005828:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	3714      	adds	r7, #20
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr
 8005848:	40012c00 	.word	0x40012c00
 800584c:	40013400 	.word	0x40013400
 8005850:	40015000 	.word	0x40015000
 8005854:	40000400 	.word	0x40000400
 8005858:	40000800 	.word	0x40000800
 800585c:	40014000 	.word	0x40014000

08005860 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005868:	bf00      	nop
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800587c:	bf00      	nop
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80058a4:	bf00      	nop
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80058b8:	bf00      	nop
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80058cc:	bf00      	nop
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80058e0:	bf00      	nop
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d101      	bne.n	80058fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e042      	b.n	8005984 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005904:	2b00      	cmp	r3, #0
 8005906:	d106      	bne.n	8005916 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f7fb fa1f 	bl	8000d54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2224      	movs	r2, #36	; 0x24
 800591a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f022 0201 	bic.w	r2, r2, #1
 800592c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 f8c2 	bl	8005ab8 <UART_SetConfig>
 8005934:	4603      	mov	r3, r0
 8005936:	2b01      	cmp	r3, #1
 8005938:	d101      	bne.n	800593e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e022      	b.n	8005984 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005942:	2b00      	cmp	r3, #0
 8005944:	d002      	beq.n	800594c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 fbb2 	bl	80060b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	685a      	ldr	r2, [r3, #4]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800595a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	689a      	ldr	r2, [r3, #8]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800596a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f042 0201 	orr.w	r2, r2, #1
 800597a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 fc39 	bl	80061f4 <UART_CheckIdleState>
 8005982:	4603      	mov	r3, r0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3708      	adds	r7, #8
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b08a      	sub	sp, #40	; 0x28
 8005990:	af02      	add	r7, sp, #8
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	603b      	str	r3, [r7, #0]
 8005998:	4613      	mov	r3, r2
 800599a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059a2:	2b20      	cmp	r3, #32
 80059a4:	f040 8083 	bne.w	8005aae <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d002      	beq.n	80059b4 <HAL_UART_Transmit+0x28>
 80059ae:	88fb      	ldrh	r3, [r7, #6]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d101      	bne.n	80059b8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e07b      	b.n	8005ab0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d101      	bne.n	80059c6 <HAL_UART_Transmit+0x3a>
 80059c2:	2302      	movs	r3, #2
 80059c4:	e074      	b.n	8005ab0 <HAL_UART_Transmit+0x124>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2221      	movs	r2, #33	; 0x21
 80059da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059de:	f7fb fc61 	bl	80012a4 <HAL_GetTick>
 80059e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	88fa      	ldrh	r2, [r7, #6]
 80059e8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	88fa      	ldrh	r2, [r7, #6]
 80059f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059fc:	d108      	bne.n	8005a10 <HAL_UART_Transmit+0x84>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d104      	bne.n	8005a10 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005a06:	2300      	movs	r3, #0
 8005a08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	61bb      	str	r3, [r7, #24]
 8005a0e:	e003      	b.n	8005a18 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a14:	2300      	movs	r3, #0
 8005a16:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005a20:	e02c      	b.n	8005a7c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	9300      	str	r3, [sp, #0]
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	2180      	movs	r1, #128	; 0x80
 8005a2c:	68f8      	ldr	r0, [r7, #12]
 8005a2e:	f000 fc2c 	bl	800628a <UART_WaitOnFlagUntilTimeout>
 8005a32:	4603      	mov	r3, r0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d001      	beq.n	8005a3c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e039      	b.n	8005ab0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d10b      	bne.n	8005a5a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	881b      	ldrh	r3, [r3, #0]
 8005a46:	461a      	mov	r2, r3
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a50:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	3302      	adds	r3, #2
 8005a56:	61bb      	str	r3, [r7, #24]
 8005a58:	e007      	b.n	8005a6a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	781a      	ldrb	r2, [r3, #0]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	3301      	adds	r3, #1
 8005a68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	3b01      	subs	r3, #1
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1cc      	bne.n	8005a22 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	9300      	str	r3, [sp, #0]
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	2140      	movs	r1, #64	; 0x40
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f000 fbf9 	bl	800628a <UART_WaitOnFlagUntilTimeout>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d001      	beq.n	8005aa2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e006      	b.n	8005ab0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2220      	movs	r2, #32
 8005aa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	e000      	b.n	8005ab0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005aae:	2302      	movs	r3, #2
  }
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3720      	adds	r7, #32
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ab8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005abc:	b08c      	sub	sp, #48	; 0x30
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	689a      	ldr	r2, [r3, #8]
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	431a      	orrs	r2, r3
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	431a      	orrs	r2, r3
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	69db      	ldr	r3, [r3, #28]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	4baa      	ldr	r3, [pc, #680]	; (8005d90 <UART_SetConfig+0x2d8>)
 8005ae8:	4013      	ands	r3, r2
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	6812      	ldr	r2, [r2, #0]
 8005aee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005af0:	430b      	orrs	r3, r1
 8005af2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	68da      	ldr	r2, [r3, #12]
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	430a      	orrs	r2, r1
 8005b08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a9f      	ldr	r2, [pc, #636]	; (8005d94 <UART_SetConfig+0x2dc>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d004      	beq.n	8005b24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	6a1b      	ldr	r3, [r3, #32]
 8005b1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b20:	4313      	orrs	r3, r2
 8005b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005b2e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	6812      	ldr	r2, [r2, #0]
 8005b36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b38:	430b      	orrs	r3, r1
 8005b3a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b42:	f023 010f 	bic.w	r1, r3, #15
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a90      	ldr	r2, [pc, #576]	; (8005d98 <UART_SetConfig+0x2e0>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d125      	bne.n	8005ba8 <UART_SetConfig+0xf0>
 8005b5c:	4b8f      	ldr	r3, [pc, #572]	; (8005d9c <UART_SetConfig+0x2e4>)
 8005b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b62:	f003 0303 	and.w	r3, r3, #3
 8005b66:	2b03      	cmp	r3, #3
 8005b68:	d81a      	bhi.n	8005ba0 <UART_SetConfig+0xe8>
 8005b6a:	a201      	add	r2, pc, #4	; (adr r2, 8005b70 <UART_SetConfig+0xb8>)
 8005b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b70:	08005b81 	.word	0x08005b81
 8005b74:	08005b91 	.word	0x08005b91
 8005b78:	08005b89 	.word	0x08005b89
 8005b7c:	08005b99 	.word	0x08005b99
 8005b80:	2301      	movs	r3, #1
 8005b82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b86:	e116      	b.n	8005db6 <UART_SetConfig+0x2fe>
 8005b88:	2302      	movs	r3, #2
 8005b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b8e:	e112      	b.n	8005db6 <UART_SetConfig+0x2fe>
 8005b90:	2304      	movs	r3, #4
 8005b92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b96:	e10e      	b.n	8005db6 <UART_SetConfig+0x2fe>
 8005b98:	2308      	movs	r3, #8
 8005b9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b9e:	e10a      	b.n	8005db6 <UART_SetConfig+0x2fe>
 8005ba0:	2310      	movs	r3, #16
 8005ba2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ba6:	e106      	b.n	8005db6 <UART_SetConfig+0x2fe>
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a7c      	ldr	r2, [pc, #496]	; (8005da0 <UART_SetConfig+0x2e8>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d138      	bne.n	8005c24 <UART_SetConfig+0x16c>
 8005bb2:	4b7a      	ldr	r3, [pc, #488]	; (8005d9c <UART_SetConfig+0x2e4>)
 8005bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bb8:	f003 030c 	and.w	r3, r3, #12
 8005bbc:	2b0c      	cmp	r3, #12
 8005bbe:	d82d      	bhi.n	8005c1c <UART_SetConfig+0x164>
 8005bc0:	a201      	add	r2, pc, #4	; (adr r2, 8005bc8 <UART_SetConfig+0x110>)
 8005bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc6:	bf00      	nop
 8005bc8:	08005bfd 	.word	0x08005bfd
 8005bcc:	08005c1d 	.word	0x08005c1d
 8005bd0:	08005c1d 	.word	0x08005c1d
 8005bd4:	08005c1d 	.word	0x08005c1d
 8005bd8:	08005c0d 	.word	0x08005c0d
 8005bdc:	08005c1d 	.word	0x08005c1d
 8005be0:	08005c1d 	.word	0x08005c1d
 8005be4:	08005c1d 	.word	0x08005c1d
 8005be8:	08005c05 	.word	0x08005c05
 8005bec:	08005c1d 	.word	0x08005c1d
 8005bf0:	08005c1d 	.word	0x08005c1d
 8005bf4:	08005c1d 	.word	0x08005c1d
 8005bf8:	08005c15 	.word	0x08005c15
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c02:	e0d8      	b.n	8005db6 <UART_SetConfig+0x2fe>
 8005c04:	2302      	movs	r3, #2
 8005c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c0a:	e0d4      	b.n	8005db6 <UART_SetConfig+0x2fe>
 8005c0c:	2304      	movs	r3, #4
 8005c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c12:	e0d0      	b.n	8005db6 <UART_SetConfig+0x2fe>
 8005c14:	2308      	movs	r3, #8
 8005c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c1a:	e0cc      	b.n	8005db6 <UART_SetConfig+0x2fe>
 8005c1c:	2310      	movs	r3, #16
 8005c1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c22:	e0c8      	b.n	8005db6 <UART_SetConfig+0x2fe>
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a5e      	ldr	r2, [pc, #376]	; (8005da4 <UART_SetConfig+0x2ec>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d125      	bne.n	8005c7a <UART_SetConfig+0x1c2>
 8005c2e:	4b5b      	ldr	r3, [pc, #364]	; (8005d9c <UART_SetConfig+0x2e4>)
 8005c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c34:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005c38:	2b30      	cmp	r3, #48	; 0x30
 8005c3a:	d016      	beq.n	8005c6a <UART_SetConfig+0x1b2>
 8005c3c:	2b30      	cmp	r3, #48	; 0x30
 8005c3e:	d818      	bhi.n	8005c72 <UART_SetConfig+0x1ba>
 8005c40:	2b20      	cmp	r3, #32
 8005c42:	d00a      	beq.n	8005c5a <UART_SetConfig+0x1a2>
 8005c44:	2b20      	cmp	r3, #32
 8005c46:	d814      	bhi.n	8005c72 <UART_SetConfig+0x1ba>
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d002      	beq.n	8005c52 <UART_SetConfig+0x19a>
 8005c4c:	2b10      	cmp	r3, #16
 8005c4e:	d008      	beq.n	8005c62 <UART_SetConfig+0x1aa>
 8005c50:	e00f      	b.n	8005c72 <UART_SetConfig+0x1ba>
 8005c52:	2300      	movs	r3, #0
 8005c54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c58:	e0ad      	b.n	8005db6 <UART_SetConfig+0x2fe>
 8005c5a:	2302      	movs	r3, #2
 8005c5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c60:	e0a9      	b.n	8005db6 <UART_SetConfig+0x2fe>
 8005c62:	2304      	movs	r3, #4
 8005c64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c68:	e0a5      	b.n	8005db6 <UART_SetConfig+0x2fe>
 8005c6a:	2308      	movs	r3, #8
 8005c6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c70:	e0a1      	b.n	8005db6 <UART_SetConfig+0x2fe>
 8005c72:	2310      	movs	r3, #16
 8005c74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c78:	e09d      	b.n	8005db6 <UART_SetConfig+0x2fe>
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a4a      	ldr	r2, [pc, #296]	; (8005da8 <UART_SetConfig+0x2f0>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d125      	bne.n	8005cd0 <UART_SetConfig+0x218>
 8005c84:	4b45      	ldr	r3, [pc, #276]	; (8005d9c <UART_SetConfig+0x2e4>)
 8005c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c8a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005c8e:	2bc0      	cmp	r3, #192	; 0xc0
 8005c90:	d016      	beq.n	8005cc0 <UART_SetConfig+0x208>
 8005c92:	2bc0      	cmp	r3, #192	; 0xc0
 8005c94:	d818      	bhi.n	8005cc8 <UART_SetConfig+0x210>
 8005c96:	2b80      	cmp	r3, #128	; 0x80
 8005c98:	d00a      	beq.n	8005cb0 <UART_SetConfig+0x1f8>
 8005c9a:	2b80      	cmp	r3, #128	; 0x80
 8005c9c:	d814      	bhi.n	8005cc8 <UART_SetConfig+0x210>
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d002      	beq.n	8005ca8 <UART_SetConfig+0x1f0>
 8005ca2:	2b40      	cmp	r3, #64	; 0x40
 8005ca4:	d008      	beq.n	8005cb8 <UART_SetConfig+0x200>
 8005ca6:	e00f      	b.n	8005cc8 <UART_SetConfig+0x210>
 8005ca8:	2300      	movs	r3, #0
 8005caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cae:	e082      	b.n	8005db6 <UART_SetConfig+0x2fe>
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cb6:	e07e      	b.n	8005db6 <UART_SetConfig+0x2fe>
 8005cb8:	2304      	movs	r3, #4
 8005cba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cbe:	e07a      	b.n	8005db6 <UART_SetConfig+0x2fe>
 8005cc0:	2308      	movs	r3, #8
 8005cc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cc6:	e076      	b.n	8005db6 <UART_SetConfig+0x2fe>
 8005cc8:	2310      	movs	r3, #16
 8005cca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cce:	e072      	b.n	8005db6 <UART_SetConfig+0x2fe>
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a35      	ldr	r2, [pc, #212]	; (8005dac <UART_SetConfig+0x2f4>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d12a      	bne.n	8005d30 <UART_SetConfig+0x278>
 8005cda:	4b30      	ldr	r3, [pc, #192]	; (8005d9c <UART_SetConfig+0x2e4>)
 8005cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ce0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ce4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ce8:	d01a      	beq.n	8005d20 <UART_SetConfig+0x268>
 8005cea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cee:	d81b      	bhi.n	8005d28 <UART_SetConfig+0x270>
 8005cf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cf4:	d00c      	beq.n	8005d10 <UART_SetConfig+0x258>
 8005cf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cfa:	d815      	bhi.n	8005d28 <UART_SetConfig+0x270>
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d003      	beq.n	8005d08 <UART_SetConfig+0x250>
 8005d00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d04:	d008      	beq.n	8005d18 <UART_SetConfig+0x260>
 8005d06:	e00f      	b.n	8005d28 <UART_SetConfig+0x270>
 8005d08:	2300      	movs	r3, #0
 8005d0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d0e:	e052      	b.n	8005db6 <UART_SetConfig+0x2fe>
 8005d10:	2302      	movs	r3, #2
 8005d12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d16:	e04e      	b.n	8005db6 <UART_SetConfig+0x2fe>
 8005d18:	2304      	movs	r3, #4
 8005d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d1e:	e04a      	b.n	8005db6 <UART_SetConfig+0x2fe>
 8005d20:	2308      	movs	r3, #8
 8005d22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d26:	e046      	b.n	8005db6 <UART_SetConfig+0x2fe>
 8005d28:	2310      	movs	r3, #16
 8005d2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d2e:	e042      	b.n	8005db6 <UART_SetConfig+0x2fe>
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a17      	ldr	r2, [pc, #92]	; (8005d94 <UART_SetConfig+0x2dc>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d13a      	bne.n	8005db0 <UART_SetConfig+0x2f8>
 8005d3a:	4b18      	ldr	r3, [pc, #96]	; (8005d9c <UART_SetConfig+0x2e4>)
 8005d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005d44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d48:	d01a      	beq.n	8005d80 <UART_SetConfig+0x2c8>
 8005d4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d4e:	d81b      	bhi.n	8005d88 <UART_SetConfig+0x2d0>
 8005d50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d54:	d00c      	beq.n	8005d70 <UART_SetConfig+0x2b8>
 8005d56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d5a:	d815      	bhi.n	8005d88 <UART_SetConfig+0x2d0>
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d003      	beq.n	8005d68 <UART_SetConfig+0x2b0>
 8005d60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d64:	d008      	beq.n	8005d78 <UART_SetConfig+0x2c0>
 8005d66:	e00f      	b.n	8005d88 <UART_SetConfig+0x2d0>
 8005d68:	2300      	movs	r3, #0
 8005d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d6e:	e022      	b.n	8005db6 <UART_SetConfig+0x2fe>
 8005d70:	2302      	movs	r3, #2
 8005d72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d76:	e01e      	b.n	8005db6 <UART_SetConfig+0x2fe>
 8005d78:	2304      	movs	r3, #4
 8005d7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d7e:	e01a      	b.n	8005db6 <UART_SetConfig+0x2fe>
 8005d80:	2308      	movs	r3, #8
 8005d82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d86:	e016      	b.n	8005db6 <UART_SetConfig+0x2fe>
 8005d88:	2310      	movs	r3, #16
 8005d8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d8e:	e012      	b.n	8005db6 <UART_SetConfig+0x2fe>
 8005d90:	cfff69f3 	.word	0xcfff69f3
 8005d94:	40008000 	.word	0x40008000
 8005d98:	40013800 	.word	0x40013800
 8005d9c:	40021000 	.word	0x40021000
 8005da0:	40004400 	.word	0x40004400
 8005da4:	40004800 	.word	0x40004800
 8005da8:	40004c00 	.word	0x40004c00
 8005dac:	40005000 	.word	0x40005000
 8005db0:	2310      	movs	r3, #16
 8005db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4aae      	ldr	r2, [pc, #696]	; (8006074 <UART_SetConfig+0x5bc>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	f040 8097 	bne.w	8005ef0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005dc2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005dc6:	2b08      	cmp	r3, #8
 8005dc8:	d823      	bhi.n	8005e12 <UART_SetConfig+0x35a>
 8005dca:	a201      	add	r2, pc, #4	; (adr r2, 8005dd0 <UART_SetConfig+0x318>)
 8005dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd0:	08005df5 	.word	0x08005df5
 8005dd4:	08005e13 	.word	0x08005e13
 8005dd8:	08005dfd 	.word	0x08005dfd
 8005ddc:	08005e13 	.word	0x08005e13
 8005de0:	08005e03 	.word	0x08005e03
 8005de4:	08005e13 	.word	0x08005e13
 8005de8:	08005e13 	.word	0x08005e13
 8005dec:	08005e13 	.word	0x08005e13
 8005df0:	08005e0b 	.word	0x08005e0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005df4:	f7fd ffea 	bl	8003dcc <HAL_RCC_GetPCLK1Freq>
 8005df8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005dfa:	e010      	b.n	8005e1e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005dfc:	4b9e      	ldr	r3, [pc, #632]	; (8006078 <UART_SetConfig+0x5c0>)
 8005dfe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005e00:	e00d      	b.n	8005e1e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e02:	f7fd ff75 	bl	8003cf0 <HAL_RCC_GetSysClockFreq>
 8005e06:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e08:	e009      	b.n	8005e1e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005e10:	e005      	b.n	8005e1e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005e12:	2300      	movs	r3, #0
 8005e14:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005e1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f000 8130 	beq.w	8006086 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2a:	4a94      	ldr	r2, [pc, #592]	; (800607c <UART_SetConfig+0x5c4>)
 8005e2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e30:	461a      	mov	r2, r3
 8005e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e34:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e38:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	685a      	ldr	r2, [r3, #4]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	005b      	lsls	r3, r3, #1
 8005e42:	4413      	add	r3, r2
 8005e44:	69ba      	ldr	r2, [r7, #24]
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d305      	bcc.n	8005e56 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e50:	69ba      	ldr	r2, [r7, #24]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d903      	bls.n	8005e5e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005e5c:	e113      	b.n	8006086 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e60:	2200      	movs	r2, #0
 8005e62:	60bb      	str	r3, [r7, #8]
 8005e64:	60fa      	str	r2, [r7, #12]
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6a:	4a84      	ldr	r2, [pc, #528]	; (800607c <UART_SetConfig+0x5c4>)
 8005e6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	2200      	movs	r2, #0
 8005e74:	603b      	str	r3, [r7, #0]
 8005e76:	607a      	str	r2, [r7, #4]
 8005e78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e7c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005e80:	f7fa fa26 	bl	80002d0 <__aeabi_uldivmod>
 8005e84:	4602      	mov	r2, r0
 8005e86:	460b      	mov	r3, r1
 8005e88:	4610      	mov	r0, r2
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	f04f 0200 	mov.w	r2, #0
 8005e90:	f04f 0300 	mov.w	r3, #0
 8005e94:	020b      	lsls	r3, r1, #8
 8005e96:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005e9a:	0202      	lsls	r2, r0, #8
 8005e9c:	6979      	ldr	r1, [r7, #20]
 8005e9e:	6849      	ldr	r1, [r1, #4]
 8005ea0:	0849      	lsrs	r1, r1, #1
 8005ea2:	2000      	movs	r0, #0
 8005ea4:	460c      	mov	r4, r1
 8005ea6:	4605      	mov	r5, r0
 8005ea8:	eb12 0804 	adds.w	r8, r2, r4
 8005eac:	eb43 0905 	adc.w	r9, r3, r5
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	469a      	mov	sl, r3
 8005eb8:	4693      	mov	fp, r2
 8005eba:	4652      	mov	r2, sl
 8005ebc:	465b      	mov	r3, fp
 8005ebe:	4640      	mov	r0, r8
 8005ec0:	4649      	mov	r1, r9
 8005ec2:	f7fa fa05 	bl	80002d0 <__aeabi_uldivmod>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	460b      	mov	r3, r1
 8005eca:	4613      	mov	r3, r2
 8005ecc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ece:	6a3b      	ldr	r3, [r7, #32]
 8005ed0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ed4:	d308      	bcc.n	8005ee8 <UART_SetConfig+0x430>
 8005ed6:	6a3b      	ldr	r3, [r7, #32]
 8005ed8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005edc:	d204      	bcs.n	8005ee8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	6a3a      	ldr	r2, [r7, #32]
 8005ee4:	60da      	str	r2, [r3, #12]
 8005ee6:	e0ce      	b.n	8006086 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005eee:	e0ca      	b.n	8006086 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	69db      	ldr	r3, [r3, #28]
 8005ef4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ef8:	d166      	bne.n	8005fc8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005efa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005efe:	2b08      	cmp	r3, #8
 8005f00:	d827      	bhi.n	8005f52 <UART_SetConfig+0x49a>
 8005f02:	a201      	add	r2, pc, #4	; (adr r2, 8005f08 <UART_SetConfig+0x450>)
 8005f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f08:	08005f2d 	.word	0x08005f2d
 8005f0c:	08005f35 	.word	0x08005f35
 8005f10:	08005f3d 	.word	0x08005f3d
 8005f14:	08005f53 	.word	0x08005f53
 8005f18:	08005f43 	.word	0x08005f43
 8005f1c:	08005f53 	.word	0x08005f53
 8005f20:	08005f53 	.word	0x08005f53
 8005f24:	08005f53 	.word	0x08005f53
 8005f28:	08005f4b 	.word	0x08005f4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f2c:	f7fd ff4e 	bl	8003dcc <HAL_RCC_GetPCLK1Freq>
 8005f30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f32:	e014      	b.n	8005f5e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f34:	f7fd ff60 	bl	8003df8 <HAL_RCC_GetPCLK2Freq>
 8005f38:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f3a:	e010      	b.n	8005f5e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f3c:	4b4e      	ldr	r3, [pc, #312]	; (8006078 <UART_SetConfig+0x5c0>)
 8005f3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f40:	e00d      	b.n	8005f5e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f42:	f7fd fed5 	bl	8003cf0 <HAL_RCC_GetSysClockFreq>
 8005f46:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f48:	e009      	b.n	8005f5e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f50:	e005      	b.n	8005f5e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005f52:	2300      	movs	r3, #0
 8005f54:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005f5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f000 8090 	beq.w	8006086 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6a:	4a44      	ldr	r2, [pc, #272]	; (800607c <UART_SetConfig+0x5c4>)
 8005f6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f70:	461a      	mov	r2, r3
 8005f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f74:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f78:	005a      	lsls	r2, r3, #1
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	085b      	lsrs	r3, r3, #1
 8005f80:	441a      	add	r2, r3
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f8a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f8c:	6a3b      	ldr	r3, [r7, #32]
 8005f8e:	2b0f      	cmp	r3, #15
 8005f90:	d916      	bls.n	8005fc0 <UART_SetConfig+0x508>
 8005f92:	6a3b      	ldr	r3, [r7, #32]
 8005f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f98:	d212      	bcs.n	8005fc0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f9a:	6a3b      	ldr	r3, [r7, #32]
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	f023 030f 	bic.w	r3, r3, #15
 8005fa2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fa4:	6a3b      	ldr	r3, [r7, #32]
 8005fa6:	085b      	lsrs	r3, r3, #1
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	f003 0307 	and.w	r3, r3, #7
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	8bfb      	ldrh	r3, [r7, #30]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	8bfa      	ldrh	r2, [r7, #30]
 8005fbc:	60da      	str	r2, [r3, #12]
 8005fbe:	e062      	b.n	8006086 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005fc6:	e05e      	b.n	8006086 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005fc8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005fcc:	2b08      	cmp	r3, #8
 8005fce:	d828      	bhi.n	8006022 <UART_SetConfig+0x56a>
 8005fd0:	a201      	add	r2, pc, #4	; (adr r2, 8005fd8 <UART_SetConfig+0x520>)
 8005fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd6:	bf00      	nop
 8005fd8:	08005ffd 	.word	0x08005ffd
 8005fdc:	08006005 	.word	0x08006005
 8005fe0:	0800600d 	.word	0x0800600d
 8005fe4:	08006023 	.word	0x08006023
 8005fe8:	08006013 	.word	0x08006013
 8005fec:	08006023 	.word	0x08006023
 8005ff0:	08006023 	.word	0x08006023
 8005ff4:	08006023 	.word	0x08006023
 8005ff8:	0800601b 	.word	0x0800601b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ffc:	f7fd fee6 	bl	8003dcc <HAL_RCC_GetPCLK1Freq>
 8006000:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006002:	e014      	b.n	800602e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006004:	f7fd fef8 	bl	8003df8 <HAL_RCC_GetPCLK2Freq>
 8006008:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800600a:	e010      	b.n	800602e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800600c:	4b1a      	ldr	r3, [pc, #104]	; (8006078 <UART_SetConfig+0x5c0>)
 800600e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006010:	e00d      	b.n	800602e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006012:	f7fd fe6d 	bl	8003cf0 <HAL_RCC_GetSysClockFreq>
 8006016:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006018:	e009      	b.n	800602e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800601a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800601e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006020:	e005      	b.n	800602e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006022:	2300      	movs	r3, #0
 8006024:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800602c:	bf00      	nop
    }

    if (pclk != 0U)
 800602e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006030:	2b00      	cmp	r3, #0
 8006032:	d028      	beq.n	8006086 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006038:	4a10      	ldr	r2, [pc, #64]	; (800607c <UART_SetConfig+0x5c4>)
 800603a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800603e:	461a      	mov	r2, r3
 8006040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006042:	fbb3 f2f2 	udiv	r2, r3, r2
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	085b      	lsrs	r3, r3, #1
 800604c:	441a      	add	r2, r3
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	fbb2 f3f3 	udiv	r3, r2, r3
 8006056:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006058:	6a3b      	ldr	r3, [r7, #32]
 800605a:	2b0f      	cmp	r3, #15
 800605c:	d910      	bls.n	8006080 <UART_SetConfig+0x5c8>
 800605e:	6a3b      	ldr	r3, [r7, #32]
 8006060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006064:	d20c      	bcs.n	8006080 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006066:	6a3b      	ldr	r3, [r7, #32]
 8006068:	b29a      	uxth	r2, r3
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	60da      	str	r2, [r3, #12]
 8006070:	e009      	b.n	8006086 <UART_SetConfig+0x5ce>
 8006072:	bf00      	nop
 8006074:	40008000 	.word	0x40008000
 8006078:	00f42400 	.word	0x00f42400
 800607c:	0800788c 	.word	0x0800788c
      }
      else
      {
        ret = HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	2201      	movs	r2, #1
 800608a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	2201      	movs	r2, #1
 8006092:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	2200      	movs	r2, #0
 800609a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	2200      	movs	r2, #0
 80060a0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80060a2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3730      	adds	r7, #48	; 0x30
 80060aa:	46bd      	mov	sp, r7
 80060ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080060b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060bc:	f003 0301 	and.w	r3, r3, #1
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00a      	beq.n	80060da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	430a      	orrs	r2, r1
 80060d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00a      	beq.n	80060fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	430a      	orrs	r2, r1
 80060fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006100:	f003 0304 	and.w	r3, r3, #4
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00a      	beq.n	800611e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	430a      	orrs	r2, r1
 800611c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006122:	f003 0308 	and.w	r3, r3, #8
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00a      	beq.n	8006140 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	430a      	orrs	r2, r1
 800613e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006144:	f003 0310 	and.w	r3, r3, #16
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00a      	beq.n	8006162 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	430a      	orrs	r2, r1
 8006160:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006166:	f003 0320 	and.w	r3, r3, #32
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00a      	beq.n	8006184 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	430a      	orrs	r2, r1
 8006182:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800618c:	2b00      	cmp	r3, #0
 800618e:	d01a      	beq.n	80061c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	430a      	orrs	r2, r1
 80061a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061ae:	d10a      	bne.n	80061c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	430a      	orrs	r2, r1
 80061c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00a      	beq.n	80061e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	430a      	orrs	r2, r1
 80061e6:	605a      	str	r2, [r3, #4]
  }
}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b086      	sub	sp, #24
 80061f8:	af02      	add	r7, sp, #8
 80061fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006204:	f7fb f84e 	bl	80012a4 <HAL_GetTick>
 8006208:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0308 	and.w	r3, r3, #8
 8006214:	2b08      	cmp	r3, #8
 8006216:	d10e      	bne.n	8006236 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006218:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800621c:	9300      	str	r3, [sp, #0]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2200      	movs	r2, #0
 8006222:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 f82f 	bl	800628a <UART_WaitOnFlagUntilTimeout>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d001      	beq.n	8006236 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e025      	b.n	8006282 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 0304 	and.w	r3, r3, #4
 8006240:	2b04      	cmp	r3, #4
 8006242:	d10e      	bne.n	8006262 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006244:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006248:	9300      	str	r3, [sp, #0]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 f819 	bl	800628a <UART_WaitOnFlagUntilTimeout>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d001      	beq.n	8006262 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e00f      	b.n	8006282 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2220      	movs	r2, #32
 8006266:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2220      	movs	r2, #32
 800626e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b09c      	sub	sp, #112	; 0x70
 800628e:	af00      	add	r7, sp, #0
 8006290:	60f8      	str	r0, [r7, #12]
 8006292:	60b9      	str	r1, [r7, #8]
 8006294:	603b      	str	r3, [r7, #0]
 8006296:	4613      	mov	r3, r2
 8006298:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800629a:	e0a9      	b.n	80063f0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800629c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800629e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a2:	f000 80a5 	beq.w	80063f0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062a6:	f7fa fffd 	bl	80012a4 <HAL_GetTick>
 80062aa:	4602      	mov	r2, r0
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d302      	bcc.n	80062bc <UART_WaitOnFlagUntilTimeout+0x32>
 80062b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d140      	bne.n	800633e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062c4:	e853 3f00 	ldrex	r3, [r3]
 80062c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80062ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80062d0:	667b      	str	r3, [r7, #100]	; 0x64
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	461a      	mov	r2, r3
 80062d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062dc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80062e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80062e2:	e841 2300 	strex	r3, r2, [r1]
 80062e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80062e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d1e6      	bne.n	80062bc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	3308      	adds	r3, #8
 80062f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062f8:	e853 3f00 	ldrex	r3, [r3]
 80062fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006300:	f023 0301 	bic.w	r3, r3, #1
 8006304:	663b      	str	r3, [r7, #96]	; 0x60
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	3308      	adds	r3, #8
 800630c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800630e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006310:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006312:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006314:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006316:	e841 2300 	strex	r3, r2, [r1]
 800631a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800631c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1e5      	bne.n	80062ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2220      	movs	r2, #32
 8006326:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2220      	movs	r2, #32
 800632e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2200      	movs	r2, #0
 8006336:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800633a:	2303      	movs	r3, #3
 800633c:	e069      	b.n	8006412 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0304 	and.w	r3, r3, #4
 8006348:	2b00      	cmp	r3, #0
 800634a:	d051      	beq.n	80063f0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	69db      	ldr	r3, [r3, #28]
 8006352:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006356:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800635a:	d149      	bne.n	80063f0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006364:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636e:	e853 3f00 	ldrex	r3, [r3]
 8006372:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006376:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800637a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	461a      	mov	r2, r3
 8006382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006384:	637b      	str	r3, [r7, #52]	; 0x34
 8006386:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006388:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800638a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800638c:	e841 2300 	strex	r3, r2, [r1]
 8006390:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006394:	2b00      	cmp	r3, #0
 8006396:	d1e6      	bne.n	8006366 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	3308      	adds	r3, #8
 800639e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	e853 3f00 	ldrex	r3, [r3]
 80063a6:	613b      	str	r3, [r7, #16]
   return(result);
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	f023 0301 	bic.w	r3, r3, #1
 80063ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	3308      	adds	r3, #8
 80063b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80063b8:	623a      	str	r2, [r7, #32]
 80063ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063bc:	69f9      	ldr	r1, [r7, #28]
 80063be:	6a3a      	ldr	r2, [r7, #32]
 80063c0:	e841 2300 	strex	r3, r2, [r1]
 80063c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d1e5      	bne.n	8006398 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2220      	movs	r2, #32
 80063d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2220      	movs	r2, #32
 80063d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2220      	movs	r2, #32
 80063e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80063ec:	2303      	movs	r3, #3
 80063ee:	e010      	b.n	8006412 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	69da      	ldr	r2, [r3, #28]
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	4013      	ands	r3, r2
 80063fa:	68ba      	ldr	r2, [r7, #8]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	bf0c      	ite	eq
 8006400:	2301      	moveq	r3, #1
 8006402:	2300      	movne	r3, #0
 8006404:	b2db      	uxtb	r3, r3
 8006406:	461a      	mov	r2, r3
 8006408:	79fb      	ldrb	r3, [r7, #7]
 800640a:	429a      	cmp	r2, r3
 800640c:	f43f af46 	beq.w	800629c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3770      	adds	r7, #112	; 0x70
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}

0800641a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800641a:	b480      	push	{r7}
 800641c:	b085      	sub	sp, #20
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006428:	2b01      	cmp	r3, #1
 800642a:	d101      	bne.n	8006430 <HAL_UARTEx_DisableFifoMode+0x16>
 800642c:	2302      	movs	r3, #2
 800642e:	e027      	b.n	8006480 <HAL_UARTEx_DisableFifoMode+0x66>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2224      	movs	r2, #36	; 0x24
 800643c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f022 0201 	bic.w	r2, r2, #1
 8006456:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800645e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2220      	movs	r2, #32
 8006472:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800647e:	2300      	movs	r3, #0
}
 8006480:	4618      	mov	r0, r3
 8006482:	3714      	adds	r7, #20
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800649c:	2b01      	cmp	r3, #1
 800649e:	d101      	bne.n	80064a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80064a0:	2302      	movs	r3, #2
 80064a2:	e02d      	b.n	8006500 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2224      	movs	r2, #36	; 0x24
 80064b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f022 0201 	bic.w	r2, r2, #1
 80064ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	683a      	ldr	r2, [r7, #0]
 80064dc:	430a      	orrs	r2, r1
 80064de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 f84f 	bl	8006584 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2220      	movs	r2, #32
 80064f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3710      	adds	r7, #16
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006518:	2b01      	cmp	r3, #1
 800651a:	d101      	bne.n	8006520 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800651c:	2302      	movs	r3, #2
 800651e:	e02d      	b.n	800657c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2224      	movs	r2, #36	; 0x24
 800652c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f022 0201 	bic.w	r2, r2, #1
 8006546:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	683a      	ldr	r2, [r7, #0]
 8006558:	430a      	orrs	r2, r1
 800655a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 f811 	bl	8006584 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2220      	movs	r2, #32
 800656e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006590:	2b00      	cmp	r3, #0
 8006592:	d108      	bne.n	80065a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80065a4:	e031      	b.n	800660a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80065a6:	2308      	movs	r3, #8
 80065a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80065aa:	2308      	movs	r3, #8
 80065ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	0e5b      	lsrs	r3, r3, #25
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	f003 0307 	and.w	r3, r3, #7
 80065bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	0f5b      	lsrs	r3, r3, #29
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	f003 0307 	and.w	r3, r3, #7
 80065cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065ce:	7bbb      	ldrb	r3, [r7, #14]
 80065d0:	7b3a      	ldrb	r2, [r7, #12]
 80065d2:	4911      	ldr	r1, [pc, #68]	; (8006618 <UARTEx_SetNbDataToProcess+0x94>)
 80065d4:	5c8a      	ldrb	r2, [r1, r2]
 80065d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80065da:	7b3a      	ldrb	r2, [r7, #12]
 80065dc:	490f      	ldr	r1, [pc, #60]	; (800661c <UARTEx_SetNbDataToProcess+0x98>)
 80065de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80065e4:	b29a      	uxth	r2, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80065ec:	7bfb      	ldrb	r3, [r7, #15]
 80065ee:	7b7a      	ldrb	r2, [r7, #13]
 80065f0:	4909      	ldr	r1, [pc, #36]	; (8006618 <UARTEx_SetNbDataToProcess+0x94>)
 80065f2:	5c8a      	ldrb	r2, [r1, r2]
 80065f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80065f8:	7b7a      	ldrb	r2, [r7, #13]
 80065fa:	4908      	ldr	r1, [pc, #32]	; (800661c <UARTEx_SetNbDataToProcess+0x98>)
 80065fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80065fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8006602:	b29a      	uxth	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800660a:	bf00      	nop
 800660c:	3714      	adds	r7, #20
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr
 8006616:	bf00      	nop
 8006618:	080078a4 	.word	0x080078a4
 800661c:	080078ac 	.word	0x080078ac

08006620 <std>:
 8006620:	2300      	movs	r3, #0
 8006622:	b510      	push	{r4, lr}
 8006624:	4604      	mov	r4, r0
 8006626:	e9c0 3300 	strd	r3, r3, [r0]
 800662a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800662e:	6083      	str	r3, [r0, #8]
 8006630:	8181      	strh	r1, [r0, #12]
 8006632:	6643      	str	r3, [r0, #100]	; 0x64
 8006634:	81c2      	strh	r2, [r0, #14]
 8006636:	6183      	str	r3, [r0, #24]
 8006638:	4619      	mov	r1, r3
 800663a:	2208      	movs	r2, #8
 800663c:	305c      	adds	r0, #92	; 0x5c
 800663e:	f000 f926 	bl	800688e <memset>
 8006642:	4b0d      	ldr	r3, [pc, #52]	; (8006678 <std+0x58>)
 8006644:	6263      	str	r3, [r4, #36]	; 0x24
 8006646:	4b0d      	ldr	r3, [pc, #52]	; (800667c <std+0x5c>)
 8006648:	62a3      	str	r3, [r4, #40]	; 0x28
 800664a:	4b0d      	ldr	r3, [pc, #52]	; (8006680 <std+0x60>)
 800664c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800664e:	4b0d      	ldr	r3, [pc, #52]	; (8006684 <std+0x64>)
 8006650:	6323      	str	r3, [r4, #48]	; 0x30
 8006652:	4b0d      	ldr	r3, [pc, #52]	; (8006688 <std+0x68>)
 8006654:	6224      	str	r4, [r4, #32]
 8006656:	429c      	cmp	r4, r3
 8006658:	d006      	beq.n	8006668 <std+0x48>
 800665a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800665e:	4294      	cmp	r4, r2
 8006660:	d002      	beq.n	8006668 <std+0x48>
 8006662:	33d0      	adds	r3, #208	; 0xd0
 8006664:	429c      	cmp	r4, r3
 8006666:	d105      	bne.n	8006674 <std+0x54>
 8006668:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800666c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006670:	f000 b986 	b.w	8006980 <__retarget_lock_init_recursive>
 8006674:	bd10      	pop	{r4, pc}
 8006676:	bf00      	nop
 8006678:	08006809 	.word	0x08006809
 800667c:	0800682b 	.word	0x0800682b
 8006680:	08006863 	.word	0x08006863
 8006684:	08006887 	.word	0x08006887
 8006688:	200002cc 	.word	0x200002cc

0800668c <stdio_exit_handler>:
 800668c:	4a02      	ldr	r2, [pc, #8]	; (8006698 <stdio_exit_handler+0xc>)
 800668e:	4903      	ldr	r1, [pc, #12]	; (800669c <stdio_exit_handler+0x10>)
 8006690:	4803      	ldr	r0, [pc, #12]	; (80066a0 <stdio_exit_handler+0x14>)
 8006692:	f000 b869 	b.w	8006768 <_fwalk_sglue>
 8006696:	bf00      	nop
 8006698:	2000000c 	.word	0x2000000c
 800669c:	080074dd 	.word	0x080074dd
 80066a0:	20000018 	.word	0x20000018

080066a4 <cleanup_stdio>:
 80066a4:	6841      	ldr	r1, [r0, #4]
 80066a6:	4b0c      	ldr	r3, [pc, #48]	; (80066d8 <cleanup_stdio+0x34>)
 80066a8:	4299      	cmp	r1, r3
 80066aa:	b510      	push	{r4, lr}
 80066ac:	4604      	mov	r4, r0
 80066ae:	d001      	beq.n	80066b4 <cleanup_stdio+0x10>
 80066b0:	f000 ff14 	bl	80074dc <_fflush_r>
 80066b4:	68a1      	ldr	r1, [r4, #8]
 80066b6:	4b09      	ldr	r3, [pc, #36]	; (80066dc <cleanup_stdio+0x38>)
 80066b8:	4299      	cmp	r1, r3
 80066ba:	d002      	beq.n	80066c2 <cleanup_stdio+0x1e>
 80066bc:	4620      	mov	r0, r4
 80066be:	f000 ff0d 	bl	80074dc <_fflush_r>
 80066c2:	68e1      	ldr	r1, [r4, #12]
 80066c4:	4b06      	ldr	r3, [pc, #24]	; (80066e0 <cleanup_stdio+0x3c>)
 80066c6:	4299      	cmp	r1, r3
 80066c8:	d004      	beq.n	80066d4 <cleanup_stdio+0x30>
 80066ca:	4620      	mov	r0, r4
 80066cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066d0:	f000 bf04 	b.w	80074dc <_fflush_r>
 80066d4:	bd10      	pop	{r4, pc}
 80066d6:	bf00      	nop
 80066d8:	200002cc 	.word	0x200002cc
 80066dc:	20000334 	.word	0x20000334
 80066e0:	2000039c 	.word	0x2000039c

080066e4 <global_stdio_init.part.0>:
 80066e4:	b510      	push	{r4, lr}
 80066e6:	4b0b      	ldr	r3, [pc, #44]	; (8006714 <global_stdio_init.part.0+0x30>)
 80066e8:	4c0b      	ldr	r4, [pc, #44]	; (8006718 <global_stdio_init.part.0+0x34>)
 80066ea:	4a0c      	ldr	r2, [pc, #48]	; (800671c <global_stdio_init.part.0+0x38>)
 80066ec:	601a      	str	r2, [r3, #0]
 80066ee:	4620      	mov	r0, r4
 80066f0:	2200      	movs	r2, #0
 80066f2:	2104      	movs	r1, #4
 80066f4:	f7ff ff94 	bl	8006620 <std>
 80066f8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80066fc:	2201      	movs	r2, #1
 80066fe:	2109      	movs	r1, #9
 8006700:	f7ff ff8e 	bl	8006620 <std>
 8006704:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006708:	2202      	movs	r2, #2
 800670a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800670e:	2112      	movs	r1, #18
 8006710:	f7ff bf86 	b.w	8006620 <std>
 8006714:	20000404 	.word	0x20000404
 8006718:	200002cc 	.word	0x200002cc
 800671c:	0800668d 	.word	0x0800668d

08006720 <__sfp_lock_acquire>:
 8006720:	4801      	ldr	r0, [pc, #4]	; (8006728 <__sfp_lock_acquire+0x8>)
 8006722:	f000 b92e 	b.w	8006982 <__retarget_lock_acquire_recursive>
 8006726:	bf00      	nop
 8006728:	2000040d 	.word	0x2000040d

0800672c <__sfp_lock_release>:
 800672c:	4801      	ldr	r0, [pc, #4]	; (8006734 <__sfp_lock_release+0x8>)
 800672e:	f000 b929 	b.w	8006984 <__retarget_lock_release_recursive>
 8006732:	bf00      	nop
 8006734:	2000040d 	.word	0x2000040d

08006738 <__sinit>:
 8006738:	b510      	push	{r4, lr}
 800673a:	4604      	mov	r4, r0
 800673c:	f7ff fff0 	bl	8006720 <__sfp_lock_acquire>
 8006740:	6a23      	ldr	r3, [r4, #32]
 8006742:	b11b      	cbz	r3, 800674c <__sinit+0x14>
 8006744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006748:	f7ff bff0 	b.w	800672c <__sfp_lock_release>
 800674c:	4b04      	ldr	r3, [pc, #16]	; (8006760 <__sinit+0x28>)
 800674e:	6223      	str	r3, [r4, #32]
 8006750:	4b04      	ldr	r3, [pc, #16]	; (8006764 <__sinit+0x2c>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d1f5      	bne.n	8006744 <__sinit+0xc>
 8006758:	f7ff ffc4 	bl	80066e4 <global_stdio_init.part.0>
 800675c:	e7f2      	b.n	8006744 <__sinit+0xc>
 800675e:	bf00      	nop
 8006760:	080066a5 	.word	0x080066a5
 8006764:	20000404 	.word	0x20000404

08006768 <_fwalk_sglue>:
 8006768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800676c:	4607      	mov	r7, r0
 800676e:	4688      	mov	r8, r1
 8006770:	4614      	mov	r4, r2
 8006772:	2600      	movs	r6, #0
 8006774:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006778:	f1b9 0901 	subs.w	r9, r9, #1
 800677c:	d505      	bpl.n	800678a <_fwalk_sglue+0x22>
 800677e:	6824      	ldr	r4, [r4, #0]
 8006780:	2c00      	cmp	r4, #0
 8006782:	d1f7      	bne.n	8006774 <_fwalk_sglue+0xc>
 8006784:	4630      	mov	r0, r6
 8006786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800678a:	89ab      	ldrh	r3, [r5, #12]
 800678c:	2b01      	cmp	r3, #1
 800678e:	d907      	bls.n	80067a0 <_fwalk_sglue+0x38>
 8006790:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006794:	3301      	adds	r3, #1
 8006796:	d003      	beq.n	80067a0 <_fwalk_sglue+0x38>
 8006798:	4629      	mov	r1, r5
 800679a:	4638      	mov	r0, r7
 800679c:	47c0      	blx	r8
 800679e:	4306      	orrs	r6, r0
 80067a0:	3568      	adds	r5, #104	; 0x68
 80067a2:	e7e9      	b.n	8006778 <_fwalk_sglue+0x10>

080067a4 <iprintf>:
 80067a4:	b40f      	push	{r0, r1, r2, r3}
 80067a6:	b507      	push	{r0, r1, r2, lr}
 80067a8:	4906      	ldr	r1, [pc, #24]	; (80067c4 <iprintf+0x20>)
 80067aa:	ab04      	add	r3, sp, #16
 80067ac:	6808      	ldr	r0, [r1, #0]
 80067ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80067b2:	6881      	ldr	r1, [r0, #8]
 80067b4:	9301      	str	r3, [sp, #4]
 80067b6:	f000 fb61 	bl	8006e7c <_vfiprintf_r>
 80067ba:	b003      	add	sp, #12
 80067bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80067c0:	b004      	add	sp, #16
 80067c2:	4770      	bx	lr
 80067c4:	20000064 	.word	0x20000064

080067c8 <siprintf>:
 80067c8:	b40e      	push	{r1, r2, r3}
 80067ca:	b500      	push	{lr}
 80067cc:	b09c      	sub	sp, #112	; 0x70
 80067ce:	ab1d      	add	r3, sp, #116	; 0x74
 80067d0:	9002      	str	r0, [sp, #8]
 80067d2:	9006      	str	r0, [sp, #24]
 80067d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80067d8:	4809      	ldr	r0, [pc, #36]	; (8006800 <siprintf+0x38>)
 80067da:	9107      	str	r1, [sp, #28]
 80067dc:	9104      	str	r1, [sp, #16]
 80067de:	4909      	ldr	r1, [pc, #36]	; (8006804 <siprintf+0x3c>)
 80067e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80067e4:	9105      	str	r1, [sp, #20]
 80067e6:	6800      	ldr	r0, [r0, #0]
 80067e8:	9301      	str	r3, [sp, #4]
 80067ea:	a902      	add	r1, sp, #8
 80067ec:	f000 fa1e 	bl	8006c2c <_svfiprintf_r>
 80067f0:	9b02      	ldr	r3, [sp, #8]
 80067f2:	2200      	movs	r2, #0
 80067f4:	701a      	strb	r2, [r3, #0]
 80067f6:	b01c      	add	sp, #112	; 0x70
 80067f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80067fc:	b003      	add	sp, #12
 80067fe:	4770      	bx	lr
 8006800:	20000064 	.word	0x20000064
 8006804:	ffff0208 	.word	0xffff0208

08006808 <__sread>:
 8006808:	b510      	push	{r4, lr}
 800680a:	460c      	mov	r4, r1
 800680c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006810:	f000 f868 	bl	80068e4 <_read_r>
 8006814:	2800      	cmp	r0, #0
 8006816:	bfab      	itete	ge
 8006818:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800681a:	89a3      	ldrhlt	r3, [r4, #12]
 800681c:	181b      	addge	r3, r3, r0
 800681e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006822:	bfac      	ite	ge
 8006824:	6563      	strge	r3, [r4, #84]	; 0x54
 8006826:	81a3      	strhlt	r3, [r4, #12]
 8006828:	bd10      	pop	{r4, pc}

0800682a <__swrite>:
 800682a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800682e:	461f      	mov	r7, r3
 8006830:	898b      	ldrh	r3, [r1, #12]
 8006832:	05db      	lsls	r3, r3, #23
 8006834:	4605      	mov	r5, r0
 8006836:	460c      	mov	r4, r1
 8006838:	4616      	mov	r6, r2
 800683a:	d505      	bpl.n	8006848 <__swrite+0x1e>
 800683c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006840:	2302      	movs	r3, #2
 8006842:	2200      	movs	r2, #0
 8006844:	f000 f83c 	bl	80068c0 <_lseek_r>
 8006848:	89a3      	ldrh	r3, [r4, #12]
 800684a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800684e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006852:	81a3      	strh	r3, [r4, #12]
 8006854:	4632      	mov	r2, r6
 8006856:	463b      	mov	r3, r7
 8006858:	4628      	mov	r0, r5
 800685a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800685e:	f000 b853 	b.w	8006908 <_write_r>

08006862 <__sseek>:
 8006862:	b510      	push	{r4, lr}
 8006864:	460c      	mov	r4, r1
 8006866:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800686a:	f000 f829 	bl	80068c0 <_lseek_r>
 800686e:	1c43      	adds	r3, r0, #1
 8006870:	89a3      	ldrh	r3, [r4, #12]
 8006872:	bf15      	itete	ne
 8006874:	6560      	strne	r0, [r4, #84]	; 0x54
 8006876:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800687a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800687e:	81a3      	strheq	r3, [r4, #12]
 8006880:	bf18      	it	ne
 8006882:	81a3      	strhne	r3, [r4, #12]
 8006884:	bd10      	pop	{r4, pc}

08006886 <__sclose>:
 8006886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800688a:	f000 b809 	b.w	80068a0 <_close_r>

0800688e <memset>:
 800688e:	4402      	add	r2, r0
 8006890:	4603      	mov	r3, r0
 8006892:	4293      	cmp	r3, r2
 8006894:	d100      	bne.n	8006898 <memset+0xa>
 8006896:	4770      	bx	lr
 8006898:	f803 1b01 	strb.w	r1, [r3], #1
 800689c:	e7f9      	b.n	8006892 <memset+0x4>
	...

080068a0 <_close_r>:
 80068a0:	b538      	push	{r3, r4, r5, lr}
 80068a2:	4d06      	ldr	r5, [pc, #24]	; (80068bc <_close_r+0x1c>)
 80068a4:	2300      	movs	r3, #0
 80068a6:	4604      	mov	r4, r0
 80068a8:	4608      	mov	r0, r1
 80068aa:	602b      	str	r3, [r5, #0]
 80068ac:	f7fa fbef 	bl	800108e <_close>
 80068b0:	1c43      	adds	r3, r0, #1
 80068b2:	d102      	bne.n	80068ba <_close_r+0x1a>
 80068b4:	682b      	ldr	r3, [r5, #0]
 80068b6:	b103      	cbz	r3, 80068ba <_close_r+0x1a>
 80068b8:	6023      	str	r3, [r4, #0]
 80068ba:	bd38      	pop	{r3, r4, r5, pc}
 80068bc:	20000408 	.word	0x20000408

080068c0 <_lseek_r>:
 80068c0:	b538      	push	{r3, r4, r5, lr}
 80068c2:	4d07      	ldr	r5, [pc, #28]	; (80068e0 <_lseek_r+0x20>)
 80068c4:	4604      	mov	r4, r0
 80068c6:	4608      	mov	r0, r1
 80068c8:	4611      	mov	r1, r2
 80068ca:	2200      	movs	r2, #0
 80068cc:	602a      	str	r2, [r5, #0]
 80068ce:	461a      	mov	r2, r3
 80068d0:	f7fa fc04 	bl	80010dc <_lseek>
 80068d4:	1c43      	adds	r3, r0, #1
 80068d6:	d102      	bne.n	80068de <_lseek_r+0x1e>
 80068d8:	682b      	ldr	r3, [r5, #0]
 80068da:	b103      	cbz	r3, 80068de <_lseek_r+0x1e>
 80068dc:	6023      	str	r3, [r4, #0]
 80068de:	bd38      	pop	{r3, r4, r5, pc}
 80068e0:	20000408 	.word	0x20000408

080068e4 <_read_r>:
 80068e4:	b538      	push	{r3, r4, r5, lr}
 80068e6:	4d07      	ldr	r5, [pc, #28]	; (8006904 <_read_r+0x20>)
 80068e8:	4604      	mov	r4, r0
 80068ea:	4608      	mov	r0, r1
 80068ec:	4611      	mov	r1, r2
 80068ee:	2200      	movs	r2, #0
 80068f0:	602a      	str	r2, [r5, #0]
 80068f2:	461a      	mov	r2, r3
 80068f4:	f7fa fb92 	bl	800101c <_read>
 80068f8:	1c43      	adds	r3, r0, #1
 80068fa:	d102      	bne.n	8006902 <_read_r+0x1e>
 80068fc:	682b      	ldr	r3, [r5, #0]
 80068fe:	b103      	cbz	r3, 8006902 <_read_r+0x1e>
 8006900:	6023      	str	r3, [r4, #0]
 8006902:	bd38      	pop	{r3, r4, r5, pc}
 8006904:	20000408 	.word	0x20000408

08006908 <_write_r>:
 8006908:	b538      	push	{r3, r4, r5, lr}
 800690a:	4d07      	ldr	r5, [pc, #28]	; (8006928 <_write_r+0x20>)
 800690c:	4604      	mov	r4, r0
 800690e:	4608      	mov	r0, r1
 8006910:	4611      	mov	r1, r2
 8006912:	2200      	movs	r2, #0
 8006914:	602a      	str	r2, [r5, #0]
 8006916:	461a      	mov	r2, r3
 8006918:	f7fa fb9d 	bl	8001056 <_write>
 800691c:	1c43      	adds	r3, r0, #1
 800691e:	d102      	bne.n	8006926 <_write_r+0x1e>
 8006920:	682b      	ldr	r3, [r5, #0]
 8006922:	b103      	cbz	r3, 8006926 <_write_r+0x1e>
 8006924:	6023      	str	r3, [r4, #0]
 8006926:	bd38      	pop	{r3, r4, r5, pc}
 8006928:	20000408 	.word	0x20000408

0800692c <__errno>:
 800692c:	4b01      	ldr	r3, [pc, #4]	; (8006934 <__errno+0x8>)
 800692e:	6818      	ldr	r0, [r3, #0]
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	20000064 	.word	0x20000064

08006938 <__libc_init_array>:
 8006938:	b570      	push	{r4, r5, r6, lr}
 800693a:	4d0d      	ldr	r5, [pc, #52]	; (8006970 <__libc_init_array+0x38>)
 800693c:	4c0d      	ldr	r4, [pc, #52]	; (8006974 <__libc_init_array+0x3c>)
 800693e:	1b64      	subs	r4, r4, r5
 8006940:	10a4      	asrs	r4, r4, #2
 8006942:	2600      	movs	r6, #0
 8006944:	42a6      	cmp	r6, r4
 8006946:	d109      	bne.n	800695c <__libc_init_array+0x24>
 8006948:	4d0b      	ldr	r5, [pc, #44]	; (8006978 <__libc_init_array+0x40>)
 800694a:	4c0c      	ldr	r4, [pc, #48]	; (800697c <__libc_init_array+0x44>)
 800694c:	f000 ff78 	bl	8007840 <_init>
 8006950:	1b64      	subs	r4, r4, r5
 8006952:	10a4      	asrs	r4, r4, #2
 8006954:	2600      	movs	r6, #0
 8006956:	42a6      	cmp	r6, r4
 8006958:	d105      	bne.n	8006966 <__libc_init_array+0x2e>
 800695a:	bd70      	pop	{r4, r5, r6, pc}
 800695c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006960:	4798      	blx	r3
 8006962:	3601      	adds	r6, #1
 8006964:	e7ee      	b.n	8006944 <__libc_init_array+0xc>
 8006966:	f855 3b04 	ldr.w	r3, [r5], #4
 800696a:	4798      	blx	r3
 800696c:	3601      	adds	r6, #1
 800696e:	e7f2      	b.n	8006956 <__libc_init_array+0x1e>
 8006970:	080078f0 	.word	0x080078f0
 8006974:	080078f0 	.word	0x080078f0
 8006978:	080078f0 	.word	0x080078f0
 800697c:	080078f4 	.word	0x080078f4

08006980 <__retarget_lock_init_recursive>:
 8006980:	4770      	bx	lr

08006982 <__retarget_lock_acquire_recursive>:
 8006982:	4770      	bx	lr

08006984 <__retarget_lock_release_recursive>:
 8006984:	4770      	bx	lr
	...

08006988 <_free_r>:
 8006988:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800698a:	2900      	cmp	r1, #0
 800698c:	d044      	beq.n	8006a18 <_free_r+0x90>
 800698e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006992:	9001      	str	r0, [sp, #4]
 8006994:	2b00      	cmp	r3, #0
 8006996:	f1a1 0404 	sub.w	r4, r1, #4
 800699a:	bfb8      	it	lt
 800699c:	18e4      	addlt	r4, r4, r3
 800699e:	f000 f8df 	bl	8006b60 <__malloc_lock>
 80069a2:	4a1e      	ldr	r2, [pc, #120]	; (8006a1c <_free_r+0x94>)
 80069a4:	9801      	ldr	r0, [sp, #4]
 80069a6:	6813      	ldr	r3, [r2, #0]
 80069a8:	b933      	cbnz	r3, 80069b8 <_free_r+0x30>
 80069aa:	6063      	str	r3, [r4, #4]
 80069ac:	6014      	str	r4, [r2, #0]
 80069ae:	b003      	add	sp, #12
 80069b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80069b4:	f000 b8da 	b.w	8006b6c <__malloc_unlock>
 80069b8:	42a3      	cmp	r3, r4
 80069ba:	d908      	bls.n	80069ce <_free_r+0x46>
 80069bc:	6825      	ldr	r5, [r4, #0]
 80069be:	1961      	adds	r1, r4, r5
 80069c0:	428b      	cmp	r3, r1
 80069c2:	bf01      	itttt	eq
 80069c4:	6819      	ldreq	r1, [r3, #0]
 80069c6:	685b      	ldreq	r3, [r3, #4]
 80069c8:	1949      	addeq	r1, r1, r5
 80069ca:	6021      	streq	r1, [r4, #0]
 80069cc:	e7ed      	b.n	80069aa <_free_r+0x22>
 80069ce:	461a      	mov	r2, r3
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	b10b      	cbz	r3, 80069d8 <_free_r+0x50>
 80069d4:	42a3      	cmp	r3, r4
 80069d6:	d9fa      	bls.n	80069ce <_free_r+0x46>
 80069d8:	6811      	ldr	r1, [r2, #0]
 80069da:	1855      	adds	r5, r2, r1
 80069dc:	42a5      	cmp	r5, r4
 80069de:	d10b      	bne.n	80069f8 <_free_r+0x70>
 80069e0:	6824      	ldr	r4, [r4, #0]
 80069e2:	4421      	add	r1, r4
 80069e4:	1854      	adds	r4, r2, r1
 80069e6:	42a3      	cmp	r3, r4
 80069e8:	6011      	str	r1, [r2, #0]
 80069ea:	d1e0      	bne.n	80069ae <_free_r+0x26>
 80069ec:	681c      	ldr	r4, [r3, #0]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	6053      	str	r3, [r2, #4]
 80069f2:	440c      	add	r4, r1
 80069f4:	6014      	str	r4, [r2, #0]
 80069f6:	e7da      	b.n	80069ae <_free_r+0x26>
 80069f8:	d902      	bls.n	8006a00 <_free_r+0x78>
 80069fa:	230c      	movs	r3, #12
 80069fc:	6003      	str	r3, [r0, #0]
 80069fe:	e7d6      	b.n	80069ae <_free_r+0x26>
 8006a00:	6825      	ldr	r5, [r4, #0]
 8006a02:	1961      	adds	r1, r4, r5
 8006a04:	428b      	cmp	r3, r1
 8006a06:	bf04      	itt	eq
 8006a08:	6819      	ldreq	r1, [r3, #0]
 8006a0a:	685b      	ldreq	r3, [r3, #4]
 8006a0c:	6063      	str	r3, [r4, #4]
 8006a0e:	bf04      	itt	eq
 8006a10:	1949      	addeq	r1, r1, r5
 8006a12:	6021      	streq	r1, [r4, #0]
 8006a14:	6054      	str	r4, [r2, #4]
 8006a16:	e7ca      	b.n	80069ae <_free_r+0x26>
 8006a18:	b003      	add	sp, #12
 8006a1a:	bd30      	pop	{r4, r5, pc}
 8006a1c:	20000410 	.word	0x20000410

08006a20 <sbrk_aligned>:
 8006a20:	b570      	push	{r4, r5, r6, lr}
 8006a22:	4e0e      	ldr	r6, [pc, #56]	; (8006a5c <sbrk_aligned+0x3c>)
 8006a24:	460c      	mov	r4, r1
 8006a26:	6831      	ldr	r1, [r6, #0]
 8006a28:	4605      	mov	r5, r0
 8006a2a:	b911      	cbnz	r1, 8006a32 <sbrk_aligned+0x12>
 8006a2c:	f000 fe2e 	bl	800768c <_sbrk_r>
 8006a30:	6030      	str	r0, [r6, #0]
 8006a32:	4621      	mov	r1, r4
 8006a34:	4628      	mov	r0, r5
 8006a36:	f000 fe29 	bl	800768c <_sbrk_r>
 8006a3a:	1c43      	adds	r3, r0, #1
 8006a3c:	d00a      	beq.n	8006a54 <sbrk_aligned+0x34>
 8006a3e:	1cc4      	adds	r4, r0, #3
 8006a40:	f024 0403 	bic.w	r4, r4, #3
 8006a44:	42a0      	cmp	r0, r4
 8006a46:	d007      	beq.n	8006a58 <sbrk_aligned+0x38>
 8006a48:	1a21      	subs	r1, r4, r0
 8006a4a:	4628      	mov	r0, r5
 8006a4c:	f000 fe1e 	bl	800768c <_sbrk_r>
 8006a50:	3001      	adds	r0, #1
 8006a52:	d101      	bne.n	8006a58 <sbrk_aligned+0x38>
 8006a54:	f04f 34ff 	mov.w	r4, #4294967295
 8006a58:	4620      	mov	r0, r4
 8006a5a:	bd70      	pop	{r4, r5, r6, pc}
 8006a5c:	20000414 	.word	0x20000414

08006a60 <_malloc_r>:
 8006a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a64:	1ccd      	adds	r5, r1, #3
 8006a66:	f025 0503 	bic.w	r5, r5, #3
 8006a6a:	3508      	adds	r5, #8
 8006a6c:	2d0c      	cmp	r5, #12
 8006a6e:	bf38      	it	cc
 8006a70:	250c      	movcc	r5, #12
 8006a72:	2d00      	cmp	r5, #0
 8006a74:	4607      	mov	r7, r0
 8006a76:	db01      	blt.n	8006a7c <_malloc_r+0x1c>
 8006a78:	42a9      	cmp	r1, r5
 8006a7a:	d905      	bls.n	8006a88 <_malloc_r+0x28>
 8006a7c:	230c      	movs	r3, #12
 8006a7e:	603b      	str	r3, [r7, #0]
 8006a80:	2600      	movs	r6, #0
 8006a82:	4630      	mov	r0, r6
 8006a84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a88:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006b5c <_malloc_r+0xfc>
 8006a8c:	f000 f868 	bl	8006b60 <__malloc_lock>
 8006a90:	f8d8 3000 	ldr.w	r3, [r8]
 8006a94:	461c      	mov	r4, r3
 8006a96:	bb5c      	cbnz	r4, 8006af0 <_malloc_r+0x90>
 8006a98:	4629      	mov	r1, r5
 8006a9a:	4638      	mov	r0, r7
 8006a9c:	f7ff ffc0 	bl	8006a20 <sbrk_aligned>
 8006aa0:	1c43      	adds	r3, r0, #1
 8006aa2:	4604      	mov	r4, r0
 8006aa4:	d155      	bne.n	8006b52 <_malloc_r+0xf2>
 8006aa6:	f8d8 4000 	ldr.w	r4, [r8]
 8006aaa:	4626      	mov	r6, r4
 8006aac:	2e00      	cmp	r6, #0
 8006aae:	d145      	bne.n	8006b3c <_malloc_r+0xdc>
 8006ab0:	2c00      	cmp	r4, #0
 8006ab2:	d048      	beq.n	8006b46 <_malloc_r+0xe6>
 8006ab4:	6823      	ldr	r3, [r4, #0]
 8006ab6:	4631      	mov	r1, r6
 8006ab8:	4638      	mov	r0, r7
 8006aba:	eb04 0903 	add.w	r9, r4, r3
 8006abe:	f000 fde5 	bl	800768c <_sbrk_r>
 8006ac2:	4581      	cmp	r9, r0
 8006ac4:	d13f      	bne.n	8006b46 <_malloc_r+0xe6>
 8006ac6:	6821      	ldr	r1, [r4, #0]
 8006ac8:	1a6d      	subs	r5, r5, r1
 8006aca:	4629      	mov	r1, r5
 8006acc:	4638      	mov	r0, r7
 8006ace:	f7ff ffa7 	bl	8006a20 <sbrk_aligned>
 8006ad2:	3001      	adds	r0, #1
 8006ad4:	d037      	beq.n	8006b46 <_malloc_r+0xe6>
 8006ad6:	6823      	ldr	r3, [r4, #0]
 8006ad8:	442b      	add	r3, r5
 8006ada:	6023      	str	r3, [r4, #0]
 8006adc:	f8d8 3000 	ldr.w	r3, [r8]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d038      	beq.n	8006b56 <_malloc_r+0xf6>
 8006ae4:	685a      	ldr	r2, [r3, #4]
 8006ae6:	42a2      	cmp	r2, r4
 8006ae8:	d12b      	bne.n	8006b42 <_malloc_r+0xe2>
 8006aea:	2200      	movs	r2, #0
 8006aec:	605a      	str	r2, [r3, #4]
 8006aee:	e00f      	b.n	8006b10 <_malloc_r+0xb0>
 8006af0:	6822      	ldr	r2, [r4, #0]
 8006af2:	1b52      	subs	r2, r2, r5
 8006af4:	d41f      	bmi.n	8006b36 <_malloc_r+0xd6>
 8006af6:	2a0b      	cmp	r2, #11
 8006af8:	d917      	bls.n	8006b2a <_malloc_r+0xca>
 8006afa:	1961      	adds	r1, r4, r5
 8006afc:	42a3      	cmp	r3, r4
 8006afe:	6025      	str	r5, [r4, #0]
 8006b00:	bf18      	it	ne
 8006b02:	6059      	strne	r1, [r3, #4]
 8006b04:	6863      	ldr	r3, [r4, #4]
 8006b06:	bf08      	it	eq
 8006b08:	f8c8 1000 	streq.w	r1, [r8]
 8006b0c:	5162      	str	r2, [r4, r5]
 8006b0e:	604b      	str	r3, [r1, #4]
 8006b10:	4638      	mov	r0, r7
 8006b12:	f104 060b 	add.w	r6, r4, #11
 8006b16:	f000 f829 	bl	8006b6c <__malloc_unlock>
 8006b1a:	f026 0607 	bic.w	r6, r6, #7
 8006b1e:	1d23      	adds	r3, r4, #4
 8006b20:	1af2      	subs	r2, r6, r3
 8006b22:	d0ae      	beq.n	8006a82 <_malloc_r+0x22>
 8006b24:	1b9b      	subs	r3, r3, r6
 8006b26:	50a3      	str	r3, [r4, r2]
 8006b28:	e7ab      	b.n	8006a82 <_malloc_r+0x22>
 8006b2a:	42a3      	cmp	r3, r4
 8006b2c:	6862      	ldr	r2, [r4, #4]
 8006b2e:	d1dd      	bne.n	8006aec <_malloc_r+0x8c>
 8006b30:	f8c8 2000 	str.w	r2, [r8]
 8006b34:	e7ec      	b.n	8006b10 <_malloc_r+0xb0>
 8006b36:	4623      	mov	r3, r4
 8006b38:	6864      	ldr	r4, [r4, #4]
 8006b3a:	e7ac      	b.n	8006a96 <_malloc_r+0x36>
 8006b3c:	4634      	mov	r4, r6
 8006b3e:	6876      	ldr	r6, [r6, #4]
 8006b40:	e7b4      	b.n	8006aac <_malloc_r+0x4c>
 8006b42:	4613      	mov	r3, r2
 8006b44:	e7cc      	b.n	8006ae0 <_malloc_r+0x80>
 8006b46:	230c      	movs	r3, #12
 8006b48:	603b      	str	r3, [r7, #0]
 8006b4a:	4638      	mov	r0, r7
 8006b4c:	f000 f80e 	bl	8006b6c <__malloc_unlock>
 8006b50:	e797      	b.n	8006a82 <_malloc_r+0x22>
 8006b52:	6025      	str	r5, [r4, #0]
 8006b54:	e7dc      	b.n	8006b10 <_malloc_r+0xb0>
 8006b56:	605b      	str	r3, [r3, #4]
 8006b58:	deff      	udf	#255	; 0xff
 8006b5a:	bf00      	nop
 8006b5c:	20000410 	.word	0x20000410

08006b60 <__malloc_lock>:
 8006b60:	4801      	ldr	r0, [pc, #4]	; (8006b68 <__malloc_lock+0x8>)
 8006b62:	f7ff bf0e 	b.w	8006982 <__retarget_lock_acquire_recursive>
 8006b66:	bf00      	nop
 8006b68:	2000040c 	.word	0x2000040c

08006b6c <__malloc_unlock>:
 8006b6c:	4801      	ldr	r0, [pc, #4]	; (8006b74 <__malloc_unlock+0x8>)
 8006b6e:	f7ff bf09 	b.w	8006984 <__retarget_lock_release_recursive>
 8006b72:	bf00      	nop
 8006b74:	2000040c 	.word	0x2000040c

08006b78 <__ssputs_r>:
 8006b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b7c:	688e      	ldr	r6, [r1, #8]
 8006b7e:	461f      	mov	r7, r3
 8006b80:	42be      	cmp	r6, r7
 8006b82:	680b      	ldr	r3, [r1, #0]
 8006b84:	4682      	mov	sl, r0
 8006b86:	460c      	mov	r4, r1
 8006b88:	4690      	mov	r8, r2
 8006b8a:	d82c      	bhi.n	8006be6 <__ssputs_r+0x6e>
 8006b8c:	898a      	ldrh	r2, [r1, #12]
 8006b8e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b92:	d026      	beq.n	8006be2 <__ssputs_r+0x6a>
 8006b94:	6965      	ldr	r5, [r4, #20]
 8006b96:	6909      	ldr	r1, [r1, #16]
 8006b98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b9c:	eba3 0901 	sub.w	r9, r3, r1
 8006ba0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006ba4:	1c7b      	adds	r3, r7, #1
 8006ba6:	444b      	add	r3, r9
 8006ba8:	106d      	asrs	r5, r5, #1
 8006baa:	429d      	cmp	r5, r3
 8006bac:	bf38      	it	cc
 8006bae:	461d      	movcc	r5, r3
 8006bb0:	0553      	lsls	r3, r2, #21
 8006bb2:	d527      	bpl.n	8006c04 <__ssputs_r+0x8c>
 8006bb4:	4629      	mov	r1, r5
 8006bb6:	f7ff ff53 	bl	8006a60 <_malloc_r>
 8006bba:	4606      	mov	r6, r0
 8006bbc:	b360      	cbz	r0, 8006c18 <__ssputs_r+0xa0>
 8006bbe:	6921      	ldr	r1, [r4, #16]
 8006bc0:	464a      	mov	r2, r9
 8006bc2:	f000 fd73 	bl	80076ac <memcpy>
 8006bc6:	89a3      	ldrh	r3, [r4, #12]
 8006bc8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bd0:	81a3      	strh	r3, [r4, #12]
 8006bd2:	6126      	str	r6, [r4, #16]
 8006bd4:	6165      	str	r5, [r4, #20]
 8006bd6:	444e      	add	r6, r9
 8006bd8:	eba5 0509 	sub.w	r5, r5, r9
 8006bdc:	6026      	str	r6, [r4, #0]
 8006bde:	60a5      	str	r5, [r4, #8]
 8006be0:	463e      	mov	r6, r7
 8006be2:	42be      	cmp	r6, r7
 8006be4:	d900      	bls.n	8006be8 <__ssputs_r+0x70>
 8006be6:	463e      	mov	r6, r7
 8006be8:	6820      	ldr	r0, [r4, #0]
 8006bea:	4632      	mov	r2, r6
 8006bec:	4641      	mov	r1, r8
 8006bee:	f000 fd33 	bl	8007658 <memmove>
 8006bf2:	68a3      	ldr	r3, [r4, #8]
 8006bf4:	1b9b      	subs	r3, r3, r6
 8006bf6:	60a3      	str	r3, [r4, #8]
 8006bf8:	6823      	ldr	r3, [r4, #0]
 8006bfa:	4433      	add	r3, r6
 8006bfc:	6023      	str	r3, [r4, #0]
 8006bfe:	2000      	movs	r0, #0
 8006c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c04:	462a      	mov	r2, r5
 8006c06:	f000 fd5f 	bl	80076c8 <_realloc_r>
 8006c0a:	4606      	mov	r6, r0
 8006c0c:	2800      	cmp	r0, #0
 8006c0e:	d1e0      	bne.n	8006bd2 <__ssputs_r+0x5a>
 8006c10:	6921      	ldr	r1, [r4, #16]
 8006c12:	4650      	mov	r0, sl
 8006c14:	f7ff feb8 	bl	8006988 <_free_r>
 8006c18:	230c      	movs	r3, #12
 8006c1a:	f8ca 3000 	str.w	r3, [sl]
 8006c1e:	89a3      	ldrh	r3, [r4, #12]
 8006c20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c24:	81a3      	strh	r3, [r4, #12]
 8006c26:	f04f 30ff 	mov.w	r0, #4294967295
 8006c2a:	e7e9      	b.n	8006c00 <__ssputs_r+0x88>

08006c2c <_svfiprintf_r>:
 8006c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c30:	4698      	mov	r8, r3
 8006c32:	898b      	ldrh	r3, [r1, #12]
 8006c34:	061b      	lsls	r3, r3, #24
 8006c36:	b09d      	sub	sp, #116	; 0x74
 8006c38:	4607      	mov	r7, r0
 8006c3a:	460d      	mov	r5, r1
 8006c3c:	4614      	mov	r4, r2
 8006c3e:	d50e      	bpl.n	8006c5e <_svfiprintf_r+0x32>
 8006c40:	690b      	ldr	r3, [r1, #16]
 8006c42:	b963      	cbnz	r3, 8006c5e <_svfiprintf_r+0x32>
 8006c44:	2140      	movs	r1, #64	; 0x40
 8006c46:	f7ff ff0b 	bl	8006a60 <_malloc_r>
 8006c4a:	6028      	str	r0, [r5, #0]
 8006c4c:	6128      	str	r0, [r5, #16]
 8006c4e:	b920      	cbnz	r0, 8006c5a <_svfiprintf_r+0x2e>
 8006c50:	230c      	movs	r3, #12
 8006c52:	603b      	str	r3, [r7, #0]
 8006c54:	f04f 30ff 	mov.w	r0, #4294967295
 8006c58:	e0d0      	b.n	8006dfc <_svfiprintf_r+0x1d0>
 8006c5a:	2340      	movs	r3, #64	; 0x40
 8006c5c:	616b      	str	r3, [r5, #20]
 8006c5e:	2300      	movs	r3, #0
 8006c60:	9309      	str	r3, [sp, #36]	; 0x24
 8006c62:	2320      	movs	r3, #32
 8006c64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c68:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c6c:	2330      	movs	r3, #48	; 0x30
 8006c6e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006e14 <_svfiprintf_r+0x1e8>
 8006c72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c76:	f04f 0901 	mov.w	r9, #1
 8006c7a:	4623      	mov	r3, r4
 8006c7c:	469a      	mov	sl, r3
 8006c7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c82:	b10a      	cbz	r2, 8006c88 <_svfiprintf_r+0x5c>
 8006c84:	2a25      	cmp	r2, #37	; 0x25
 8006c86:	d1f9      	bne.n	8006c7c <_svfiprintf_r+0x50>
 8006c88:	ebba 0b04 	subs.w	fp, sl, r4
 8006c8c:	d00b      	beq.n	8006ca6 <_svfiprintf_r+0x7a>
 8006c8e:	465b      	mov	r3, fp
 8006c90:	4622      	mov	r2, r4
 8006c92:	4629      	mov	r1, r5
 8006c94:	4638      	mov	r0, r7
 8006c96:	f7ff ff6f 	bl	8006b78 <__ssputs_r>
 8006c9a:	3001      	adds	r0, #1
 8006c9c:	f000 80a9 	beq.w	8006df2 <_svfiprintf_r+0x1c6>
 8006ca0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ca2:	445a      	add	r2, fp
 8006ca4:	9209      	str	r2, [sp, #36]	; 0x24
 8006ca6:	f89a 3000 	ldrb.w	r3, [sl]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	f000 80a1 	beq.w	8006df2 <_svfiprintf_r+0x1c6>
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8006cb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cba:	f10a 0a01 	add.w	sl, sl, #1
 8006cbe:	9304      	str	r3, [sp, #16]
 8006cc0:	9307      	str	r3, [sp, #28]
 8006cc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006cc6:	931a      	str	r3, [sp, #104]	; 0x68
 8006cc8:	4654      	mov	r4, sl
 8006cca:	2205      	movs	r2, #5
 8006ccc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cd0:	4850      	ldr	r0, [pc, #320]	; (8006e14 <_svfiprintf_r+0x1e8>)
 8006cd2:	f7f9 faad 	bl	8000230 <memchr>
 8006cd6:	9a04      	ldr	r2, [sp, #16]
 8006cd8:	b9d8      	cbnz	r0, 8006d12 <_svfiprintf_r+0xe6>
 8006cda:	06d0      	lsls	r0, r2, #27
 8006cdc:	bf44      	itt	mi
 8006cde:	2320      	movmi	r3, #32
 8006ce0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ce4:	0711      	lsls	r1, r2, #28
 8006ce6:	bf44      	itt	mi
 8006ce8:	232b      	movmi	r3, #43	; 0x2b
 8006cea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cee:	f89a 3000 	ldrb.w	r3, [sl]
 8006cf2:	2b2a      	cmp	r3, #42	; 0x2a
 8006cf4:	d015      	beq.n	8006d22 <_svfiprintf_r+0xf6>
 8006cf6:	9a07      	ldr	r2, [sp, #28]
 8006cf8:	4654      	mov	r4, sl
 8006cfa:	2000      	movs	r0, #0
 8006cfc:	f04f 0c0a 	mov.w	ip, #10
 8006d00:	4621      	mov	r1, r4
 8006d02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d06:	3b30      	subs	r3, #48	; 0x30
 8006d08:	2b09      	cmp	r3, #9
 8006d0a:	d94d      	bls.n	8006da8 <_svfiprintf_r+0x17c>
 8006d0c:	b1b0      	cbz	r0, 8006d3c <_svfiprintf_r+0x110>
 8006d0e:	9207      	str	r2, [sp, #28]
 8006d10:	e014      	b.n	8006d3c <_svfiprintf_r+0x110>
 8006d12:	eba0 0308 	sub.w	r3, r0, r8
 8006d16:	fa09 f303 	lsl.w	r3, r9, r3
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	9304      	str	r3, [sp, #16]
 8006d1e:	46a2      	mov	sl, r4
 8006d20:	e7d2      	b.n	8006cc8 <_svfiprintf_r+0x9c>
 8006d22:	9b03      	ldr	r3, [sp, #12]
 8006d24:	1d19      	adds	r1, r3, #4
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	9103      	str	r1, [sp, #12]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	bfbb      	ittet	lt
 8006d2e:	425b      	neglt	r3, r3
 8006d30:	f042 0202 	orrlt.w	r2, r2, #2
 8006d34:	9307      	strge	r3, [sp, #28]
 8006d36:	9307      	strlt	r3, [sp, #28]
 8006d38:	bfb8      	it	lt
 8006d3a:	9204      	strlt	r2, [sp, #16]
 8006d3c:	7823      	ldrb	r3, [r4, #0]
 8006d3e:	2b2e      	cmp	r3, #46	; 0x2e
 8006d40:	d10c      	bne.n	8006d5c <_svfiprintf_r+0x130>
 8006d42:	7863      	ldrb	r3, [r4, #1]
 8006d44:	2b2a      	cmp	r3, #42	; 0x2a
 8006d46:	d134      	bne.n	8006db2 <_svfiprintf_r+0x186>
 8006d48:	9b03      	ldr	r3, [sp, #12]
 8006d4a:	1d1a      	adds	r2, r3, #4
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	9203      	str	r2, [sp, #12]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	bfb8      	it	lt
 8006d54:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d58:	3402      	adds	r4, #2
 8006d5a:	9305      	str	r3, [sp, #20]
 8006d5c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006e24 <_svfiprintf_r+0x1f8>
 8006d60:	7821      	ldrb	r1, [r4, #0]
 8006d62:	2203      	movs	r2, #3
 8006d64:	4650      	mov	r0, sl
 8006d66:	f7f9 fa63 	bl	8000230 <memchr>
 8006d6a:	b138      	cbz	r0, 8006d7c <_svfiprintf_r+0x150>
 8006d6c:	9b04      	ldr	r3, [sp, #16]
 8006d6e:	eba0 000a 	sub.w	r0, r0, sl
 8006d72:	2240      	movs	r2, #64	; 0x40
 8006d74:	4082      	lsls	r2, r0
 8006d76:	4313      	orrs	r3, r2
 8006d78:	3401      	adds	r4, #1
 8006d7a:	9304      	str	r3, [sp, #16]
 8006d7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d80:	4825      	ldr	r0, [pc, #148]	; (8006e18 <_svfiprintf_r+0x1ec>)
 8006d82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d86:	2206      	movs	r2, #6
 8006d88:	f7f9 fa52 	bl	8000230 <memchr>
 8006d8c:	2800      	cmp	r0, #0
 8006d8e:	d038      	beq.n	8006e02 <_svfiprintf_r+0x1d6>
 8006d90:	4b22      	ldr	r3, [pc, #136]	; (8006e1c <_svfiprintf_r+0x1f0>)
 8006d92:	bb1b      	cbnz	r3, 8006ddc <_svfiprintf_r+0x1b0>
 8006d94:	9b03      	ldr	r3, [sp, #12]
 8006d96:	3307      	adds	r3, #7
 8006d98:	f023 0307 	bic.w	r3, r3, #7
 8006d9c:	3308      	adds	r3, #8
 8006d9e:	9303      	str	r3, [sp, #12]
 8006da0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006da2:	4433      	add	r3, r6
 8006da4:	9309      	str	r3, [sp, #36]	; 0x24
 8006da6:	e768      	b.n	8006c7a <_svfiprintf_r+0x4e>
 8006da8:	fb0c 3202 	mla	r2, ip, r2, r3
 8006dac:	460c      	mov	r4, r1
 8006dae:	2001      	movs	r0, #1
 8006db0:	e7a6      	b.n	8006d00 <_svfiprintf_r+0xd4>
 8006db2:	2300      	movs	r3, #0
 8006db4:	3401      	adds	r4, #1
 8006db6:	9305      	str	r3, [sp, #20]
 8006db8:	4619      	mov	r1, r3
 8006dba:	f04f 0c0a 	mov.w	ip, #10
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006dc4:	3a30      	subs	r2, #48	; 0x30
 8006dc6:	2a09      	cmp	r2, #9
 8006dc8:	d903      	bls.n	8006dd2 <_svfiprintf_r+0x1a6>
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d0c6      	beq.n	8006d5c <_svfiprintf_r+0x130>
 8006dce:	9105      	str	r1, [sp, #20]
 8006dd0:	e7c4      	b.n	8006d5c <_svfiprintf_r+0x130>
 8006dd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8006dd6:	4604      	mov	r4, r0
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e7f0      	b.n	8006dbe <_svfiprintf_r+0x192>
 8006ddc:	ab03      	add	r3, sp, #12
 8006dde:	9300      	str	r3, [sp, #0]
 8006de0:	462a      	mov	r2, r5
 8006de2:	4b0f      	ldr	r3, [pc, #60]	; (8006e20 <_svfiprintf_r+0x1f4>)
 8006de4:	a904      	add	r1, sp, #16
 8006de6:	4638      	mov	r0, r7
 8006de8:	f3af 8000 	nop.w
 8006dec:	1c42      	adds	r2, r0, #1
 8006dee:	4606      	mov	r6, r0
 8006df0:	d1d6      	bne.n	8006da0 <_svfiprintf_r+0x174>
 8006df2:	89ab      	ldrh	r3, [r5, #12]
 8006df4:	065b      	lsls	r3, r3, #25
 8006df6:	f53f af2d 	bmi.w	8006c54 <_svfiprintf_r+0x28>
 8006dfa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006dfc:	b01d      	add	sp, #116	; 0x74
 8006dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e02:	ab03      	add	r3, sp, #12
 8006e04:	9300      	str	r3, [sp, #0]
 8006e06:	462a      	mov	r2, r5
 8006e08:	4b05      	ldr	r3, [pc, #20]	; (8006e20 <_svfiprintf_r+0x1f4>)
 8006e0a:	a904      	add	r1, sp, #16
 8006e0c:	4638      	mov	r0, r7
 8006e0e:	f000 f9bd 	bl	800718c <_printf_i>
 8006e12:	e7eb      	b.n	8006dec <_svfiprintf_r+0x1c0>
 8006e14:	080078b4 	.word	0x080078b4
 8006e18:	080078be 	.word	0x080078be
 8006e1c:	00000000 	.word	0x00000000
 8006e20:	08006b79 	.word	0x08006b79
 8006e24:	080078ba 	.word	0x080078ba

08006e28 <__sfputc_r>:
 8006e28:	6893      	ldr	r3, [r2, #8]
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	b410      	push	{r4}
 8006e30:	6093      	str	r3, [r2, #8]
 8006e32:	da08      	bge.n	8006e46 <__sfputc_r+0x1e>
 8006e34:	6994      	ldr	r4, [r2, #24]
 8006e36:	42a3      	cmp	r3, r4
 8006e38:	db01      	blt.n	8006e3e <__sfputc_r+0x16>
 8006e3a:	290a      	cmp	r1, #10
 8006e3c:	d103      	bne.n	8006e46 <__sfputc_r+0x1e>
 8006e3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e42:	f000 bb73 	b.w	800752c <__swbuf_r>
 8006e46:	6813      	ldr	r3, [r2, #0]
 8006e48:	1c58      	adds	r0, r3, #1
 8006e4a:	6010      	str	r0, [r2, #0]
 8006e4c:	7019      	strb	r1, [r3, #0]
 8006e4e:	4608      	mov	r0, r1
 8006e50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e54:	4770      	bx	lr

08006e56 <__sfputs_r>:
 8006e56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e58:	4606      	mov	r6, r0
 8006e5a:	460f      	mov	r7, r1
 8006e5c:	4614      	mov	r4, r2
 8006e5e:	18d5      	adds	r5, r2, r3
 8006e60:	42ac      	cmp	r4, r5
 8006e62:	d101      	bne.n	8006e68 <__sfputs_r+0x12>
 8006e64:	2000      	movs	r0, #0
 8006e66:	e007      	b.n	8006e78 <__sfputs_r+0x22>
 8006e68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e6c:	463a      	mov	r2, r7
 8006e6e:	4630      	mov	r0, r6
 8006e70:	f7ff ffda 	bl	8006e28 <__sfputc_r>
 8006e74:	1c43      	adds	r3, r0, #1
 8006e76:	d1f3      	bne.n	8006e60 <__sfputs_r+0xa>
 8006e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006e7c <_vfiprintf_r>:
 8006e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e80:	460d      	mov	r5, r1
 8006e82:	b09d      	sub	sp, #116	; 0x74
 8006e84:	4614      	mov	r4, r2
 8006e86:	4698      	mov	r8, r3
 8006e88:	4606      	mov	r6, r0
 8006e8a:	b118      	cbz	r0, 8006e94 <_vfiprintf_r+0x18>
 8006e8c:	6a03      	ldr	r3, [r0, #32]
 8006e8e:	b90b      	cbnz	r3, 8006e94 <_vfiprintf_r+0x18>
 8006e90:	f7ff fc52 	bl	8006738 <__sinit>
 8006e94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e96:	07d9      	lsls	r1, r3, #31
 8006e98:	d405      	bmi.n	8006ea6 <_vfiprintf_r+0x2a>
 8006e9a:	89ab      	ldrh	r3, [r5, #12]
 8006e9c:	059a      	lsls	r2, r3, #22
 8006e9e:	d402      	bmi.n	8006ea6 <_vfiprintf_r+0x2a>
 8006ea0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ea2:	f7ff fd6e 	bl	8006982 <__retarget_lock_acquire_recursive>
 8006ea6:	89ab      	ldrh	r3, [r5, #12]
 8006ea8:	071b      	lsls	r3, r3, #28
 8006eaa:	d501      	bpl.n	8006eb0 <_vfiprintf_r+0x34>
 8006eac:	692b      	ldr	r3, [r5, #16]
 8006eae:	b99b      	cbnz	r3, 8006ed8 <_vfiprintf_r+0x5c>
 8006eb0:	4629      	mov	r1, r5
 8006eb2:	4630      	mov	r0, r6
 8006eb4:	f000 fb78 	bl	80075a8 <__swsetup_r>
 8006eb8:	b170      	cbz	r0, 8006ed8 <_vfiprintf_r+0x5c>
 8006eba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ebc:	07dc      	lsls	r4, r3, #31
 8006ebe:	d504      	bpl.n	8006eca <_vfiprintf_r+0x4e>
 8006ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ec4:	b01d      	add	sp, #116	; 0x74
 8006ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eca:	89ab      	ldrh	r3, [r5, #12]
 8006ecc:	0598      	lsls	r0, r3, #22
 8006ece:	d4f7      	bmi.n	8006ec0 <_vfiprintf_r+0x44>
 8006ed0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ed2:	f7ff fd57 	bl	8006984 <__retarget_lock_release_recursive>
 8006ed6:	e7f3      	b.n	8006ec0 <_vfiprintf_r+0x44>
 8006ed8:	2300      	movs	r3, #0
 8006eda:	9309      	str	r3, [sp, #36]	; 0x24
 8006edc:	2320      	movs	r3, #32
 8006ede:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ee2:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ee6:	2330      	movs	r3, #48	; 0x30
 8006ee8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800709c <_vfiprintf_r+0x220>
 8006eec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ef0:	f04f 0901 	mov.w	r9, #1
 8006ef4:	4623      	mov	r3, r4
 8006ef6:	469a      	mov	sl, r3
 8006ef8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006efc:	b10a      	cbz	r2, 8006f02 <_vfiprintf_r+0x86>
 8006efe:	2a25      	cmp	r2, #37	; 0x25
 8006f00:	d1f9      	bne.n	8006ef6 <_vfiprintf_r+0x7a>
 8006f02:	ebba 0b04 	subs.w	fp, sl, r4
 8006f06:	d00b      	beq.n	8006f20 <_vfiprintf_r+0xa4>
 8006f08:	465b      	mov	r3, fp
 8006f0a:	4622      	mov	r2, r4
 8006f0c:	4629      	mov	r1, r5
 8006f0e:	4630      	mov	r0, r6
 8006f10:	f7ff ffa1 	bl	8006e56 <__sfputs_r>
 8006f14:	3001      	adds	r0, #1
 8006f16:	f000 80a9 	beq.w	800706c <_vfiprintf_r+0x1f0>
 8006f1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f1c:	445a      	add	r2, fp
 8006f1e:	9209      	str	r2, [sp, #36]	; 0x24
 8006f20:	f89a 3000 	ldrb.w	r3, [sl]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	f000 80a1 	beq.w	800706c <_vfiprintf_r+0x1f0>
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8006f30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f34:	f10a 0a01 	add.w	sl, sl, #1
 8006f38:	9304      	str	r3, [sp, #16]
 8006f3a:	9307      	str	r3, [sp, #28]
 8006f3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f40:	931a      	str	r3, [sp, #104]	; 0x68
 8006f42:	4654      	mov	r4, sl
 8006f44:	2205      	movs	r2, #5
 8006f46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f4a:	4854      	ldr	r0, [pc, #336]	; (800709c <_vfiprintf_r+0x220>)
 8006f4c:	f7f9 f970 	bl	8000230 <memchr>
 8006f50:	9a04      	ldr	r2, [sp, #16]
 8006f52:	b9d8      	cbnz	r0, 8006f8c <_vfiprintf_r+0x110>
 8006f54:	06d1      	lsls	r1, r2, #27
 8006f56:	bf44      	itt	mi
 8006f58:	2320      	movmi	r3, #32
 8006f5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f5e:	0713      	lsls	r3, r2, #28
 8006f60:	bf44      	itt	mi
 8006f62:	232b      	movmi	r3, #43	; 0x2b
 8006f64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f68:	f89a 3000 	ldrb.w	r3, [sl]
 8006f6c:	2b2a      	cmp	r3, #42	; 0x2a
 8006f6e:	d015      	beq.n	8006f9c <_vfiprintf_r+0x120>
 8006f70:	9a07      	ldr	r2, [sp, #28]
 8006f72:	4654      	mov	r4, sl
 8006f74:	2000      	movs	r0, #0
 8006f76:	f04f 0c0a 	mov.w	ip, #10
 8006f7a:	4621      	mov	r1, r4
 8006f7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f80:	3b30      	subs	r3, #48	; 0x30
 8006f82:	2b09      	cmp	r3, #9
 8006f84:	d94d      	bls.n	8007022 <_vfiprintf_r+0x1a6>
 8006f86:	b1b0      	cbz	r0, 8006fb6 <_vfiprintf_r+0x13a>
 8006f88:	9207      	str	r2, [sp, #28]
 8006f8a:	e014      	b.n	8006fb6 <_vfiprintf_r+0x13a>
 8006f8c:	eba0 0308 	sub.w	r3, r0, r8
 8006f90:	fa09 f303 	lsl.w	r3, r9, r3
 8006f94:	4313      	orrs	r3, r2
 8006f96:	9304      	str	r3, [sp, #16]
 8006f98:	46a2      	mov	sl, r4
 8006f9a:	e7d2      	b.n	8006f42 <_vfiprintf_r+0xc6>
 8006f9c:	9b03      	ldr	r3, [sp, #12]
 8006f9e:	1d19      	adds	r1, r3, #4
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	9103      	str	r1, [sp, #12]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	bfbb      	ittet	lt
 8006fa8:	425b      	neglt	r3, r3
 8006faa:	f042 0202 	orrlt.w	r2, r2, #2
 8006fae:	9307      	strge	r3, [sp, #28]
 8006fb0:	9307      	strlt	r3, [sp, #28]
 8006fb2:	bfb8      	it	lt
 8006fb4:	9204      	strlt	r2, [sp, #16]
 8006fb6:	7823      	ldrb	r3, [r4, #0]
 8006fb8:	2b2e      	cmp	r3, #46	; 0x2e
 8006fba:	d10c      	bne.n	8006fd6 <_vfiprintf_r+0x15a>
 8006fbc:	7863      	ldrb	r3, [r4, #1]
 8006fbe:	2b2a      	cmp	r3, #42	; 0x2a
 8006fc0:	d134      	bne.n	800702c <_vfiprintf_r+0x1b0>
 8006fc2:	9b03      	ldr	r3, [sp, #12]
 8006fc4:	1d1a      	adds	r2, r3, #4
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	9203      	str	r2, [sp, #12]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	bfb8      	it	lt
 8006fce:	f04f 33ff 	movlt.w	r3, #4294967295
 8006fd2:	3402      	adds	r4, #2
 8006fd4:	9305      	str	r3, [sp, #20]
 8006fd6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80070ac <_vfiprintf_r+0x230>
 8006fda:	7821      	ldrb	r1, [r4, #0]
 8006fdc:	2203      	movs	r2, #3
 8006fde:	4650      	mov	r0, sl
 8006fe0:	f7f9 f926 	bl	8000230 <memchr>
 8006fe4:	b138      	cbz	r0, 8006ff6 <_vfiprintf_r+0x17a>
 8006fe6:	9b04      	ldr	r3, [sp, #16]
 8006fe8:	eba0 000a 	sub.w	r0, r0, sl
 8006fec:	2240      	movs	r2, #64	; 0x40
 8006fee:	4082      	lsls	r2, r0
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	3401      	adds	r4, #1
 8006ff4:	9304      	str	r3, [sp, #16]
 8006ff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ffa:	4829      	ldr	r0, [pc, #164]	; (80070a0 <_vfiprintf_r+0x224>)
 8006ffc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007000:	2206      	movs	r2, #6
 8007002:	f7f9 f915 	bl	8000230 <memchr>
 8007006:	2800      	cmp	r0, #0
 8007008:	d03f      	beq.n	800708a <_vfiprintf_r+0x20e>
 800700a:	4b26      	ldr	r3, [pc, #152]	; (80070a4 <_vfiprintf_r+0x228>)
 800700c:	bb1b      	cbnz	r3, 8007056 <_vfiprintf_r+0x1da>
 800700e:	9b03      	ldr	r3, [sp, #12]
 8007010:	3307      	adds	r3, #7
 8007012:	f023 0307 	bic.w	r3, r3, #7
 8007016:	3308      	adds	r3, #8
 8007018:	9303      	str	r3, [sp, #12]
 800701a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800701c:	443b      	add	r3, r7
 800701e:	9309      	str	r3, [sp, #36]	; 0x24
 8007020:	e768      	b.n	8006ef4 <_vfiprintf_r+0x78>
 8007022:	fb0c 3202 	mla	r2, ip, r2, r3
 8007026:	460c      	mov	r4, r1
 8007028:	2001      	movs	r0, #1
 800702a:	e7a6      	b.n	8006f7a <_vfiprintf_r+0xfe>
 800702c:	2300      	movs	r3, #0
 800702e:	3401      	adds	r4, #1
 8007030:	9305      	str	r3, [sp, #20]
 8007032:	4619      	mov	r1, r3
 8007034:	f04f 0c0a 	mov.w	ip, #10
 8007038:	4620      	mov	r0, r4
 800703a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800703e:	3a30      	subs	r2, #48	; 0x30
 8007040:	2a09      	cmp	r2, #9
 8007042:	d903      	bls.n	800704c <_vfiprintf_r+0x1d0>
 8007044:	2b00      	cmp	r3, #0
 8007046:	d0c6      	beq.n	8006fd6 <_vfiprintf_r+0x15a>
 8007048:	9105      	str	r1, [sp, #20]
 800704a:	e7c4      	b.n	8006fd6 <_vfiprintf_r+0x15a>
 800704c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007050:	4604      	mov	r4, r0
 8007052:	2301      	movs	r3, #1
 8007054:	e7f0      	b.n	8007038 <_vfiprintf_r+0x1bc>
 8007056:	ab03      	add	r3, sp, #12
 8007058:	9300      	str	r3, [sp, #0]
 800705a:	462a      	mov	r2, r5
 800705c:	4b12      	ldr	r3, [pc, #72]	; (80070a8 <_vfiprintf_r+0x22c>)
 800705e:	a904      	add	r1, sp, #16
 8007060:	4630      	mov	r0, r6
 8007062:	f3af 8000 	nop.w
 8007066:	4607      	mov	r7, r0
 8007068:	1c78      	adds	r0, r7, #1
 800706a:	d1d6      	bne.n	800701a <_vfiprintf_r+0x19e>
 800706c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800706e:	07d9      	lsls	r1, r3, #31
 8007070:	d405      	bmi.n	800707e <_vfiprintf_r+0x202>
 8007072:	89ab      	ldrh	r3, [r5, #12]
 8007074:	059a      	lsls	r2, r3, #22
 8007076:	d402      	bmi.n	800707e <_vfiprintf_r+0x202>
 8007078:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800707a:	f7ff fc83 	bl	8006984 <__retarget_lock_release_recursive>
 800707e:	89ab      	ldrh	r3, [r5, #12]
 8007080:	065b      	lsls	r3, r3, #25
 8007082:	f53f af1d 	bmi.w	8006ec0 <_vfiprintf_r+0x44>
 8007086:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007088:	e71c      	b.n	8006ec4 <_vfiprintf_r+0x48>
 800708a:	ab03      	add	r3, sp, #12
 800708c:	9300      	str	r3, [sp, #0]
 800708e:	462a      	mov	r2, r5
 8007090:	4b05      	ldr	r3, [pc, #20]	; (80070a8 <_vfiprintf_r+0x22c>)
 8007092:	a904      	add	r1, sp, #16
 8007094:	4630      	mov	r0, r6
 8007096:	f000 f879 	bl	800718c <_printf_i>
 800709a:	e7e4      	b.n	8007066 <_vfiprintf_r+0x1ea>
 800709c:	080078b4 	.word	0x080078b4
 80070a0:	080078be 	.word	0x080078be
 80070a4:	00000000 	.word	0x00000000
 80070a8:	08006e57 	.word	0x08006e57
 80070ac:	080078ba 	.word	0x080078ba

080070b0 <_printf_common>:
 80070b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070b4:	4616      	mov	r6, r2
 80070b6:	4699      	mov	r9, r3
 80070b8:	688a      	ldr	r2, [r1, #8]
 80070ba:	690b      	ldr	r3, [r1, #16]
 80070bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80070c0:	4293      	cmp	r3, r2
 80070c2:	bfb8      	it	lt
 80070c4:	4613      	movlt	r3, r2
 80070c6:	6033      	str	r3, [r6, #0]
 80070c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80070cc:	4607      	mov	r7, r0
 80070ce:	460c      	mov	r4, r1
 80070d0:	b10a      	cbz	r2, 80070d6 <_printf_common+0x26>
 80070d2:	3301      	adds	r3, #1
 80070d4:	6033      	str	r3, [r6, #0]
 80070d6:	6823      	ldr	r3, [r4, #0]
 80070d8:	0699      	lsls	r1, r3, #26
 80070da:	bf42      	ittt	mi
 80070dc:	6833      	ldrmi	r3, [r6, #0]
 80070de:	3302      	addmi	r3, #2
 80070e0:	6033      	strmi	r3, [r6, #0]
 80070e2:	6825      	ldr	r5, [r4, #0]
 80070e4:	f015 0506 	ands.w	r5, r5, #6
 80070e8:	d106      	bne.n	80070f8 <_printf_common+0x48>
 80070ea:	f104 0a19 	add.w	sl, r4, #25
 80070ee:	68e3      	ldr	r3, [r4, #12]
 80070f0:	6832      	ldr	r2, [r6, #0]
 80070f2:	1a9b      	subs	r3, r3, r2
 80070f4:	42ab      	cmp	r3, r5
 80070f6:	dc26      	bgt.n	8007146 <_printf_common+0x96>
 80070f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80070fc:	1e13      	subs	r3, r2, #0
 80070fe:	6822      	ldr	r2, [r4, #0]
 8007100:	bf18      	it	ne
 8007102:	2301      	movne	r3, #1
 8007104:	0692      	lsls	r2, r2, #26
 8007106:	d42b      	bmi.n	8007160 <_printf_common+0xb0>
 8007108:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800710c:	4649      	mov	r1, r9
 800710e:	4638      	mov	r0, r7
 8007110:	47c0      	blx	r8
 8007112:	3001      	adds	r0, #1
 8007114:	d01e      	beq.n	8007154 <_printf_common+0xa4>
 8007116:	6823      	ldr	r3, [r4, #0]
 8007118:	6922      	ldr	r2, [r4, #16]
 800711a:	f003 0306 	and.w	r3, r3, #6
 800711e:	2b04      	cmp	r3, #4
 8007120:	bf02      	ittt	eq
 8007122:	68e5      	ldreq	r5, [r4, #12]
 8007124:	6833      	ldreq	r3, [r6, #0]
 8007126:	1aed      	subeq	r5, r5, r3
 8007128:	68a3      	ldr	r3, [r4, #8]
 800712a:	bf0c      	ite	eq
 800712c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007130:	2500      	movne	r5, #0
 8007132:	4293      	cmp	r3, r2
 8007134:	bfc4      	itt	gt
 8007136:	1a9b      	subgt	r3, r3, r2
 8007138:	18ed      	addgt	r5, r5, r3
 800713a:	2600      	movs	r6, #0
 800713c:	341a      	adds	r4, #26
 800713e:	42b5      	cmp	r5, r6
 8007140:	d11a      	bne.n	8007178 <_printf_common+0xc8>
 8007142:	2000      	movs	r0, #0
 8007144:	e008      	b.n	8007158 <_printf_common+0xa8>
 8007146:	2301      	movs	r3, #1
 8007148:	4652      	mov	r2, sl
 800714a:	4649      	mov	r1, r9
 800714c:	4638      	mov	r0, r7
 800714e:	47c0      	blx	r8
 8007150:	3001      	adds	r0, #1
 8007152:	d103      	bne.n	800715c <_printf_common+0xac>
 8007154:	f04f 30ff 	mov.w	r0, #4294967295
 8007158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800715c:	3501      	adds	r5, #1
 800715e:	e7c6      	b.n	80070ee <_printf_common+0x3e>
 8007160:	18e1      	adds	r1, r4, r3
 8007162:	1c5a      	adds	r2, r3, #1
 8007164:	2030      	movs	r0, #48	; 0x30
 8007166:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800716a:	4422      	add	r2, r4
 800716c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007170:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007174:	3302      	adds	r3, #2
 8007176:	e7c7      	b.n	8007108 <_printf_common+0x58>
 8007178:	2301      	movs	r3, #1
 800717a:	4622      	mov	r2, r4
 800717c:	4649      	mov	r1, r9
 800717e:	4638      	mov	r0, r7
 8007180:	47c0      	blx	r8
 8007182:	3001      	adds	r0, #1
 8007184:	d0e6      	beq.n	8007154 <_printf_common+0xa4>
 8007186:	3601      	adds	r6, #1
 8007188:	e7d9      	b.n	800713e <_printf_common+0x8e>
	...

0800718c <_printf_i>:
 800718c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007190:	7e0f      	ldrb	r7, [r1, #24]
 8007192:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007194:	2f78      	cmp	r7, #120	; 0x78
 8007196:	4691      	mov	r9, r2
 8007198:	4680      	mov	r8, r0
 800719a:	460c      	mov	r4, r1
 800719c:	469a      	mov	sl, r3
 800719e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80071a2:	d807      	bhi.n	80071b4 <_printf_i+0x28>
 80071a4:	2f62      	cmp	r7, #98	; 0x62
 80071a6:	d80a      	bhi.n	80071be <_printf_i+0x32>
 80071a8:	2f00      	cmp	r7, #0
 80071aa:	f000 80d4 	beq.w	8007356 <_printf_i+0x1ca>
 80071ae:	2f58      	cmp	r7, #88	; 0x58
 80071b0:	f000 80c0 	beq.w	8007334 <_printf_i+0x1a8>
 80071b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80071bc:	e03a      	b.n	8007234 <_printf_i+0xa8>
 80071be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80071c2:	2b15      	cmp	r3, #21
 80071c4:	d8f6      	bhi.n	80071b4 <_printf_i+0x28>
 80071c6:	a101      	add	r1, pc, #4	; (adr r1, 80071cc <_printf_i+0x40>)
 80071c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80071cc:	08007225 	.word	0x08007225
 80071d0:	08007239 	.word	0x08007239
 80071d4:	080071b5 	.word	0x080071b5
 80071d8:	080071b5 	.word	0x080071b5
 80071dc:	080071b5 	.word	0x080071b5
 80071e0:	080071b5 	.word	0x080071b5
 80071e4:	08007239 	.word	0x08007239
 80071e8:	080071b5 	.word	0x080071b5
 80071ec:	080071b5 	.word	0x080071b5
 80071f0:	080071b5 	.word	0x080071b5
 80071f4:	080071b5 	.word	0x080071b5
 80071f8:	0800733d 	.word	0x0800733d
 80071fc:	08007265 	.word	0x08007265
 8007200:	080072f7 	.word	0x080072f7
 8007204:	080071b5 	.word	0x080071b5
 8007208:	080071b5 	.word	0x080071b5
 800720c:	0800735f 	.word	0x0800735f
 8007210:	080071b5 	.word	0x080071b5
 8007214:	08007265 	.word	0x08007265
 8007218:	080071b5 	.word	0x080071b5
 800721c:	080071b5 	.word	0x080071b5
 8007220:	080072ff 	.word	0x080072ff
 8007224:	682b      	ldr	r3, [r5, #0]
 8007226:	1d1a      	adds	r2, r3, #4
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	602a      	str	r2, [r5, #0]
 800722c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007230:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007234:	2301      	movs	r3, #1
 8007236:	e09f      	b.n	8007378 <_printf_i+0x1ec>
 8007238:	6820      	ldr	r0, [r4, #0]
 800723a:	682b      	ldr	r3, [r5, #0]
 800723c:	0607      	lsls	r7, r0, #24
 800723e:	f103 0104 	add.w	r1, r3, #4
 8007242:	6029      	str	r1, [r5, #0]
 8007244:	d501      	bpl.n	800724a <_printf_i+0xbe>
 8007246:	681e      	ldr	r6, [r3, #0]
 8007248:	e003      	b.n	8007252 <_printf_i+0xc6>
 800724a:	0646      	lsls	r6, r0, #25
 800724c:	d5fb      	bpl.n	8007246 <_printf_i+0xba>
 800724e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007252:	2e00      	cmp	r6, #0
 8007254:	da03      	bge.n	800725e <_printf_i+0xd2>
 8007256:	232d      	movs	r3, #45	; 0x2d
 8007258:	4276      	negs	r6, r6
 800725a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800725e:	485a      	ldr	r0, [pc, #360]	; (80073c8 <_printf_i+0x23c>)
 8007260:	230a      	movs	r3, #10
 8007262:	e012      	b.n	800728a <_printf_i+0xfe>
 8007264:	682b      	ldr	r3, [r5, #0]
 8007266:	6820      	ldr	r0, [r4, #0]
 8007268:	1d19      	adds	r1, r3, #4
 800726a:	6029      	str	r1, [r5, #0]
 800726c:	0605      	lsls	r5, r0, #24
 800726e:	d501      	bpl.n	8007274 <_printf_i+0xe8>
 8007270:	681e      	ldr	r6, [r3, #0]
 8007272:	e002      	b.n	800727a <_printf_i+0xee>
 8007274:	0641      	lsls	r1, r0, #25
 8007276:	d5fb      	bpl.n	8007270 <_printf_i+0xe4>
 8007278:	881e      	ldrh	r6, [r3, #0]
 800727a:	4853      	ldr	r0, [pc, #332]	; (80073c8 <_printf_i+0x23c>)
 800727c:	2f6f      	cmp	r7, #111	; 0x6f
 800727e:	bf0c      	ite	eq
 8007280:	2308      	moveq	r3, #8
 8007282:	230a      	movne	r3, #10
 8007284:	2100      	movs	r1, #0
 8007286:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800728a:	6865      	ldr	r5, [r4, #4]
 800728c:	60a5      	str	r5, [r4, #8]
 800728e:	2d00      	cmp	r5, #0
 8007290:	bfa2      	ittt	ge
 8007292:	6821      	ldrge	r1, [r4, #0]
 8007294:	f021 0104 	bicge.w	r1, r1, #4
 8007298:	6021      	strge	r1, [r4, #0]
 800729a:	b90e      	cbnz	r6, 80072a0 <_printf_i+0x114>
 800729c:	2d00      	cmp	r5, #0
 800729e:	d04b      	beq.n	8007338 <_printf_i+0x1ac>
 80072a0:	4615      	mov	r5, r2
 80072a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80072a6:	fb03 6711 	mls	r7, r3, r1, r6
 80072aa:	5dc7      	ldrb	r7, [r0, r7]
 80072ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80072b0:	4637      	mov	r7, r6
 80072b2:	42bb      	cmp	r3, r7
 80072b4:	460e      	mov	r6, r1
 80072b6:	d9f4      	bls.n	80072a2 <_printf_i+0x116>
 80072b8:	2b08      	cmp	r3, #8
 80072ba:	d10b      	bne.n	80072d4 <_printf_i+0x148>
 80072bc:	6823      	ldr	r3, [r4, #0]
 80072be:	07de      	lsls	r6, r3, #31
 80072c0:	d508      	bpl.n	80072d4 <_printf_i+0x148>
 80072c2:	6923      	ldr	r3, [r4, #16]
 80072c4:	6861      	ldr	r1, [r4, #4]
 80072c6:	4299      	cmp	r1, r3
 80072c8:	bfde      	ittt	le
 80072ca:	2330      	movle	r3, #48	; 0x30
 80072cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80072d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80072d4:	1b52      	subs	r2, r2, r5
 80072d6:	6122      	str	r2, [r4, #16]
 80072d8:	f8cd a000 	str.w	sl, [sp]
 80072dc:	464b      	mov	r3, r9
 80072de:	aa03      	add	r2, sp, #12
 80072e0:	4621      	mov	r1, r4
 80072e2:	4640      	mov	r0, r8
 80072e4:	f7ff fee4 	bl	80070b0 <_printf_common>
 80072e8:	3001      	adds	r0, #1
 80072ea:	d14a      	bne.n	8007382 <_printf_i+0x1f6>
 80072ec:	f04f 30ff 	mov.w	r0, #4294967295
 80072f0:	b004      	add	sp, #16
 80072f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072f6:	6823      	ldr	r3, [r4, #0]
 80072f8:	f043 0320 	orr.w	r3, r3, #32
 80072fc:	6023      	str	r3, [r4, #0]
 80072fe:	4833      	ldr	r0, [pc, #204]	; (80073cc <_printf_i+0x240>)
 8007300:	2778      	movs	r7, #120	; 0x78
 8007302:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007306:	6823      	ldr	r3, [r4, #0]
 8007308:	6829      	ldr	r1, [r5, #0]
 800730a:	061f      	lsls	r7, r3, #24
 800730c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007310:	d402      	bmi.n	8007318 <_printf_i+0x18c>
 8007312:	065f      	lsls	r7, r3, #25
 8007314:	bf48      	it	mi
 8007316:	b2b6      	uxthmi	r6, r6
 8007318:	07df      	lsls	r7, r3, #31
 800731a:	bf48      	it	mi
 800731c:	f043 0320 	orrmi.w	r3, r3, #32
 8007320:	6029      	str	r1, [r5, #0]
 8007322:	bf48      	it	mi
 8007324:	6023      	strmi	r3, [r4, #0]
 8007326:	b91e      	cbnz	r6, 8007330 <_printf_i+0x1a4>
 8007328:	6823      	ldr	r3, [r4, #0]
 800732a:	f023 0320 	bic.w	r3, r3, #32
 800732e:	6023      	str	r3, [r4, #0]
 8007330:	2310      	movs	r3, #16
 8007332:	e7a7      	b.n	8007284 <_printf_i+0xf8>
 8007334:	4824      	ldr	r0, [pc, #144]	; (80073c8 <_printf_i+0x23c>)
 8007336:	e7e4      	b.n	8007302 <_printf_i+0x176>
 8007338:	4615      	mov	r5, r2
 800733a:	e7bd      	b.n	80072b8 <_printf_i+0x12c>
 800733c:	682b      	ldr	r3, [r5, #0]
 800733e:	6826      	ldr	r6, [r4, #0]
 8007340:	6961      	ldr	r1, [r4, #20]
 8007342:	1d18      	adds	r0, r3, #4
 8007344:	6028      	str	r0, [r5, #0]
 8007346:	0635      	lsls	r5, r6, #24
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	d501      	bpl.n	8007350 <_printf_i+0x1c4>
 800734c:	6019      	str	r1, [r3, #0]
 800734e:	e002      	b.n	8007356 <_printf_i+0x1ca>
 8007350:	0670      	lsls	r0, r6, #25
 8007352:	d5fb      	bpl.n	800734c <_printf_i+0x1c0>
 8007354:	8019      	strh	r1, [r3, #0]
 8007356:	2300      	movs	r3, #0
 8007358:	6123      	str	r3, [r4, #16]
 800735a:	4615      	mov	r5, r2
 800735c:	e7bc      	b.n	80072d8 <_printf_i+0x14c>
 800735e:	682b      	ldr	r3, [r5, #0]
 8007360:	1d1a      	adds	r2, r3, #4
 8007362:	602a      	str	r2, [r5, #0]
 8007364:	681d      	ldr	r5, [r3, #0]
 8007366:	6862      	ldr	r2, [r4, #4]
 8007368:	2100      	movs	r1, #0
 800736a:	4628      	mov	r0, r5
 800736c:	f7f8 ff60 	bl	8000230 <memchr>
 8007370:	b108      	cbz	r0, 8007376 <_printf_i+0x1ea>
 8007372:	1b40      	subs	r0, r0, r5
 8007374:	6060      	str	r0, [r4, #4]
 8007376:	6863      	ldr	r3, [r4, #4]
 8007378:	6123      	str	r3, [r4, #16]
 800737a:	2300      	movs	r3, #0
 800737c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007380:	e7aa      	b.n	80072d8 <_printf_i+0x14c>
 8007382:	6923      	ldr	r3, [r4, #16]
 8007384:	462a      	mov	r2, r5
 8007386:	4649      	mov	r1, r9
 8007388:	4640      	mov	r0, r8
 800738a:	47d0      	blx	sl
 800738c:	3001      	adds	r0, #1
 800738e:	d0ad      	beq.n	80072ec <_printf_i+0x160>
 8007390:	6823      	ldr	r3, [r4, #0]
 8007392:	079b      	lsls	r3, r3, #30
 8007394:	d413      	bmi.n	80073be <_printf_i+0x232>
 8007396:	68e0      	ldr	r0, [r4, #12]
 8007398:	9b03      	ldr	r3, [sp, #12]
 800739a:	4298      	cmp	r0, r3
 800739c:	bfb8      	it	lt
 800739e:	4618      	movlt	r0, r3
 80073a0:	e7a6      	b.n	80072f0 <_printf_i+0x164>
 80073a2:	2301      	movs	r3, #1
 80073a4:	4632      	mov	r2, r6
 80073a6:	4649      	mov	r1, r9
 80073a8:	4640      	mov	r0, r8
 80073aa:	47d0      	blx	sl
 80073ac:	3001      	adds	r0, #1
 80073ae:	d09d      	beq.n	80072ec <_printf_i+0x160>
 80073b0:	3501      	adds	r5, #1
 80073b2:	68e3      	ldr	r3, [r4, #12]
 80073b4:	9903      	ldr	r1, [sp, #12]
 80073b6:	1a5b      	subs	r3, r3, r1
 80073b8:	42ab      	cmp	r3, r5
 80073ba:	dcf2      	bgt.n	80073a2 <_printf_i+0x216>
 80073bc:	e7eb      	b.n	8007396 <_printf_i+0x20a>
 80073be:	2500      	movs	r5, #0
 80073c0:	f104 0619 	add.w	r6, r4, #25
 80073c4:	e7f5      	b.n	80073b2 <_printf_i+0x226>
 80073c6:	bf00      	nop
 80073c8:	080078c5 	.word	0x080078c5
 80073cc:	080078d6 	.word	0x080078d6

080073d0 <__sflush_r>:
 80073d0:	898a      	ldrh	r2, [r1, #12]
 80073d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073d6:	4605      	mov	r5, r0
 80073d8:	0710      	lsls	r0, r2, #28
 80073da:	460c      	mov	r4, r1
 80073dc:	d458      	bmi.n	8007490 <__sflush_r+0xc0>
 80073de:	684b      	ldr	r3, [r1, #4]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	dc05      	bgt.n	80073f0 <__sflush_r+0x20>
 80073e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	dc02      	bgt.n	80073f0 <__sflush_r+0x20>
 80073ea:	2000      	movs	r0, #0
 80073ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80073f2:	2e00      	cmp	r6, #0
 80073f4:	d0f9      	beq.n	80073ea <__sflush_r+0x1a>
 80073f6:	2300      	movs	r3, #0
 80073f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80073fc:	682f      	ldr	r7, [r5, #0]
 80073fe:	6a21      	ldr	r1, [r4, #32]
 8007400:	602b      	str	r3, [r5, #0]
 8007402:	d032      	beq.n	800746a <__sflush_r+0x9a>
 8007404:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007406:	89a3      	ldrh	r3, [r4, #12]
 8007408:	075a      	lsls	r2, r3, #29
 800740a:	d505      	bpl.n	8007418 <__sflush_r+0x48>
 800740c:	6863      	ldr	r3, [r4, #4]
 800740e:	1ac0      	subs	r0, r0, r3
 8007410:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007412:	b10b      	cbz	r3, 8007418 <__sflush_r+0x48>
 8007414:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007416:	1ac0      	subs	r0, r0, r3
 8007418:	2300      	movs	r3, #0
 800741a:	4602      	mov	r2, r0
 800741c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800741e:	6a21      	ldr	r1, [r4, #32]
 8007420:	4628      	mov	r0, r5
 8007422:	47b0      	blx	r6
 8007424:	1c43      	adds	r3, r0, #1
 8007426:	89a3      	ldrh	r3, [r4, #12]
 8007428:	d106      	bne.n	8007438 <__sflush_r+0x68>
 800742a:	6829      	ldr	r1, [r5, #0]
 800742c:	291d      	cmp	r1, #29
 800742e:	d82b      	bhi.n	8007488 <__sflush_r+0xb8>
 8007430:	4a29      	ldr	r2, [pc, #164]	; (80074d8 <__sflush_r+0x108>)
 8007432:	410a      	asrs	r2, r1
 8007434:	07d6      	lsls	r6, r2, #31
 8007436:	d427      	bmi.n	8007488 <__sflush_r+0xb8>
 8007438:	2200      	movs	r2, #0
 800743a:	6062      	str	r2, [r4, #4]
 800743c:	04d9      	lsls	r1, r3, #19
 800743e:	6922      	ldr	r2, [r4, #16]
 8007440:	6022      	str	r2, [r4, #0]
 8007442:	d504      	bpl.n	800744e <__sflush_r+0x7e>
 8007444:	1c42      	adds	r2, r0, #1
 8007446:	d101      	bne.n	800744c <__sflush_r+0x7c>
 8007448:	682b      	ldr	r3, [r5, #0]
 800744a:	b903      	cbnz	r3, 800744e <__sflush_r+0x7e>
 800744c:	6560      	str	r0, [r4, #84]	; 0x54
 800744e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007450:	602f      	str	r7, [r5, #0]
 8007452:	2900      	cmp	r1, #0
 8007454:	d0c9      	beq.n	80073ea <__sflush_r+0x1a>
 8007456:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800745a:	4299      	cmp	r1, r3
 800745c:	d002      	beq.n	8007464 <__sflush_r+0x94>
 800745e:	4628      	mov	r0, r5
 8007460:	f7ff fa92 	bl	8006988 <_free_r>
 8007464:	2000      	movs	r0, #0
 8007466:	6360      	str	r0, [r4, #52]	; 0x34
 8007468:	e7c0      	b.n	80073ec <__sflush_r+0x1c>
 800746a:	2301      	movs	r3, #1
 800746c:	4628      	mov	r0, r5
 800746e:	47b0      	blx	r6
 8007470:	1c41      	adds	r1, r0, #1
 8007472:	d1c8      	bne.n	8007406 <__sflush_r+0x36>
 8007474:	682b      	ldr	r3, [r5, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d0c5      	beq.n	8007406 <__sflush_r+0x36>
 800747a:	2b1d      	cmp	r3, #29
 800747c:	d001      	beq.n	8007482 <__sflush_r+0xb2>
 800747e:	2b16      	cmp	r3, #22
 8007480:	d101      	bne.n	8007486 <__sflush_r+0xb6>
 8007482:	602f      	str	r7, [r5, #0]
 8007484:	e7b1      	b.n	80073ea <__sflush_r+0x1a>
 8007486:	89a3      	ldrh	r3, [r4, #12]
 8007488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800748c:	81a3      	strh	r3, [r4, #12]
 800748e:	e7ad      	b.n	80073ec <__sflush_r+0x1c>
 8007490:	690f      	ldr	r7, [r1, #16]
 8007492:	2f00      	cmp	r7, #0
 8007494:	d0a9      	beq.n	80073ea <__sflush_r+0x1a>
 8007496:	0793      	lsls	r3, r2, #30
 8007498:	680e      	ldr	r6, [r1, #0]
 800749a:	bf08      	it	eq
 800749c:	694b      	ldreq	r3, [r1, #20]
 800749e:	600f      	str	r7, [r1, #0]
 80074a0:	bf18      	it	ne
 80074a2:	2300      	movne	r3, #0
 80074a4:	eba6 0807 	sub.w	r8, r6, r7
 80074a8:	608b      	str	r3, [r1, #8]
 80074aa:	f1b8 0f00 	cmp.w	r8, #0
 80074ae:	dd9c      	ble.n	80073ea <__sflush_r+0x1a>
 80074b0:	6a21      	ldr	r1, [r4, #32]
 80074b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80074b4:	4643      	mov	r3, r8
 80074b6:	463a      	mov	r2, r7
 80074b8:	4628      	mov	r0, r5
 80074ba:	47b0      	blx	r6
 80074bc:	2800      	cmp	r0, #0
 80074be:	dc06      	bgt.n	80074ce <__sflush_r+0xfe>
 80074c0:	89a3      	ldrh	r3, [r4, #12]
 80074c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074c6:	81a3      	strh	r3, [r4, #12]
 80074c8:	f04f 30ff 	mov.w	r0, #4294967295
 80074cc:	e78e      	b.n	80073ec <__sflush_r+0x1c>
 80074ce:	4407      	add	r7, r0
 80074d0:	eba8 0800 	sub.w	r8, r8, r0
 80074d4:	e7e9      	b.n	80074aa <__sflush_r+0xda>
 80074d6:	bf00      	nop
 80074d8:	dfbffffe 	.word	0xdfbffffe

080074dc <_fflush_r>:
 80074dc:	b538      	push	{r3, r4, r5, lr}
 80074de:	690b      	ldr	r3, [r1, #16]
 80074e0:	4605      	mov	r5, r0
 80074e2:	460c      	mov	r4, r1
 80074e4:	b913      	cbnz	r3, 80074ec <_fflush_r+0x10>
 80074e6:	2500      	movs	r5, #0
 80074e8:	4628      	mov	r0, r5
 80074ea:	bd38      	pop	{r3, r4, r5, pc}
 80074ec:	b118      	cbz	r0, 80074f6 <_fflush_r+0x1a>
 80074ee:	6a03      	ldr	r3, [r0, #32]
 80074f0:	b90b      	cbnz	r3, 80074f6 <_fflush_r+0x1a>
 80074f2:	f7ff f921 	bl	8006738 <__sinit>
 80074f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d0f3      	beq.n	80074e6 <_fflush_r+0xa>
 80074fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007500:	07d0      	lsls	r0, r2, #31
 8007502:	d404      	bmi.n	800750e <_fflush_r+0x32>
 8007504:	0599      	lsls	r1, r3, #22
 8007506:	d402      	bmi.n	800750e <_fflush_r+0x32>
 8007508:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800750a:	f7ff fa3a 	bl	8006982 <__retarget_lock_acquire_recursive>
 800750e:	4628      	mov	r0, r5
 8007510:	4621      	mov	r1, r4
 8007512:	f7ff ff5d 	bl	80073d0 <__sflush_r>
 8007516:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007518:	07da      	lsls	r2, r3, #31
 800751a:	4605      	mov	r5, r0
 800751c:	d4e4      	bmi.n	80074e8 <_fflush_r+0xc>
 800751e:	89a3      	ldrh	r3, [r4, #12]
 8007520:	059b      	lsls	r3, r3, #22
 8007522:	d4e1      	bmi.n	80074e8 <_fflush_r+0xc>
 8007524:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007526:	f7ff fa2d 	bl	8006984 <__retarget_lock_release_recursive>
 800752a:	e7dd      	b.n	80074e8 <_fflush_r+0xc>

0800752c <__swbuf_r>:
 800752c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800752e:	460e      	mov	r6, r1
 8007530:	4614      	mov	r4, r2
 8007532:	4605      	mov	r5, r0
 8007534:	b118      	cbz	r0, 800753e <__swbuf_r+0x12>
 8007536:	6a03      	ldr	r3, [r0, #32]
 8007538:	b90b      	cbnz	r3, 800753e <__swbuf_r+0x12>
 800753a:	f7ff f8fd 	bl	8006738 <__sinit>
 800753e:	69a3      	ldr	r3, [r4, #24]
 8007540:	60a3      	str	r3, [r4, #8]
 8007542:	89a3      	ldrh	r3, [r4, #12]
 8007544:	071a      	lsls	r2, r3, #28
 8007546:	d525      	bpl.n	8007594 <__swbuf_r+0x68>
 8007548:	6923      	ldr	r3, [r4, #16]
 800754a:	b31b      	cbz	r3, 8007594 <__swbuf_r+0x68>
 800754c:	6823      	ldr	r3, [r4, #0]
 800754e:	6922      	ldr	r2, [r4, #16]
 8007550:	1a98      	subs	r0, r3, r2
 8007552:	6963      	ldr	r3, [r4, #20]
 8007554:	b2f6      	uxtb	r6, r6
 8007556:	4283      	cmp	r3, r0
 8007558:	4637      	mov	r7, r6
 800755a:	dc04      	bgt.n	8007566 <__swbuf_r+0x3a>
 800755c:	4621      	mov	r1, r4
 800755e:	4628      	mov	r0, r5
 8007560:	f7ff ffbc 	bl	80074dc <_fflush_r>
 8007564:	b9e0      	cbnz	r0, 80075a0 <__swbuf_r+0x74>
 8007566:	68a3      	ldr	r3, [r4, #8]
 8007568:	3b01      	subs	r3, #1
 800756a:	60a3      	str	r3, [r4, #8]
 800756c:	6823      	ldr	r3, [r4, #0]
 800756e:	1c5a      	adds	r2, r3, #1
 8007570:	6022      	str	r2, [r4, #0]
 8007572:	701e      	strb	r6, [r3, #0]
 8007574:	6962      	ldr	r2, [r4, #20]
 8007576:	1c43      	adds	r3, r0, #1
 8007578:	429a      	cmp	r2, r3
 800757a:	d004      	beq.n	8007586 <__swbuf_r+0x5a>
 800757c:	89a3      	ldrh	r3, [r4, #12]
 800757e:	07db      	lsls	r3, r3, #31
 8007580:	d506      	bpl.n	8007590 <__swbuf_r+0x64>
 8007582:	2e0a      	cmp	r6, #10
 8007584:	d104      	bne.n	8007590 <__swbuf_r+0x64>
 8007586:	4621      	mov	r1, r4
 8007588:	4628      	mov	r0, r5
 800758a:	f7ff ffa7 	bl	80074dc <_fflush_r>
 800758e:	b938      	cbnz	r0, 80075a0 <__swbuf_r+0x74>
 8007590:	4638      	mov	r0, r7
 8007592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007594:	4621      	mov	r1, r4
 8007596:	4628      	mov	r0, r5
 8007598:	f000 f806 	bl	80075a8 <__swsetup_r>
 800759c:	2800      	cmp	r0, #0
 800759e:	d0d5      	beq.n	800754c <__swbuf_r+0x20>
 80075a0:	f04f 37ff 	mov.w	r7, #4294967295
 80075a4:	e7f4      	b.n	8007590 <__swbuf_r+0x64>
	...

080075a8 <__swsetup_r>:
 80075a8:	b538      	push	{r3, r4, r5, lr}
 80075aa:	4b2a      	ldr	r3, [pc, #168]	; (8007654 <__swsetup_r+0xac>)
 80075ac:	4605      	mov	r5, r0
 80075ae:	6818      	ldr	r0, [r3, #0]
 80075b0:	460c      	mov	r4, r1
 80075b2:	b118      	cbz	r0, 80075bc <__swsetup_r+0x14>
 80075b4:	6a03      	ldr	r3, [r0, #32]
 80075b6:	b90b      	cbnz	r3, 80075bc <__swsetup_r+0x14>
 80075b8:	f7ff f8be 	bl	8006738 <__sinit>
 80075bc:	89a3      	ldrh	r3, [r4, #12]
 80075be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80075c2:	0718      	lsls	r0, r3, #28
 80075c4:	d422      	bmi.n	800760c <__swsetup_r+0x64>
 80075c6:	06d9      	lsls	r1, r3, #27
 80075c8:	d407      	bmi.n	80075da <__swsetup_r+0x32>
 80075ca:	2309      	movs	r3, #9
 80075cc:	602b      	str	r3, [r5, #0]
 80075ce:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80075d2:	81a3      	strh	r3, [r4, #12]
 80075d4:	f04f 30ff 	mov.w	r0, #4294967295
 80075d8:	e034      	b.n	8007644 <__swsetup_r+0x9c>
 80075da:	0758      	lsls	r0, r3, #29
 80075dc:	d512      	bpl.n	8007604 <__swsetup_r+0x5c>
 80075de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80075e0:	b141      	cbz	r1, 80075f4 <__swsetup_r+0x4c>
 80075e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80075e6:	4299      	cmp	r1, r3
 80075e8:	d002      	beq.n	80075f0 <__swsetup_r+0x48>
 80075ea:	4628      	mov	r0, r5
 80075ec:	f7ff f9cc 	bl	8006988 <_free_r>
 80075f0:	2300      	movs	r3, #0
 80075f2:	6363      	str	r3, [r4, #52]	; 0x34
 80075f4:	89a3      	ldrh	r3, [r4, #12]
 80075f6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80075fa:	81a3      	strh	r3, [r4, #12]
 80075fc:	2300      	movs	r3, #0
 80075fe:	6063      	str	r3, [r4, #4]
 8007600:	6923      	ldr	r3, [r4, #16]
 8007602:	6023      	str	r3, [r4, #0]
 8007604:	89a3      	ldrh	r3, [r4, #12]
 8007606:	f043 0308 	orr.w	r3, r3, #8
 800760a:	81a3      	strh	r3, [r4, #12]
 800760c:	6923      	ldr	r3, [r4, #16]
 800760e:	b94b      	cbnz	r3, 8007624 <__swsetup_r+0x7c>
 8007610:	89a3      	ldrh	r3, [r4, #12]
 8007612:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007616:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800761a:	d003      	beq.n	8007624 <__swsetup_r+0x7c>
 800761c:	4621      	mov	r1, r4
 800761e:	4628      	mov	r0, r5
 8007620:	f000 f8a7 	bl	8007772 <__smakebuf_r>
 8007624:	89a0      	ldrh	r0, [r4, #12]
 8007626:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800762a:	f010 0301 	ands.w	r3, r0, #1
 800762e:	d00a      	beq.n	8007646 <__swsetup_r+0x9e>
 8007630:	2300      	movs	r3, #0
 8007632:	60a3      	str	r3, [r4, #8]
 8007634:	6963      	ldr	r3, [r4, #20]
 8007636:	425b      	negs	r3, r3
 8007638:	61a3      	str	r3, [r4, #24]
 800763a:	6923      	ldr	r3, [r4, #16]
 800763c:	b943      	cbnz	r3, 8007650 <__swsetup_r+0xa8>
 800763e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007642:	d1c4      	bne.n	80075ce <__swsetup_r+0x26>
 8007644:	bd38      	pop	{r3, r4, r5, pc}
 8007646:	0781      	lsls	r1, r0, #30
 8007648:	bf58      	it	pl
 800764a:	6963      	ldrpl	r3, [r4, #20]
 800764c:	60a3      	str	r3, [r4, #8]
 800764e:	e7f4      	b.n	800763a <__swsetup_r+0x92>
 8007650:	2000      	movs	r0, #0
 8007652:	e7f7      	b.n	8007644 <__swsetup_r+0x9c>
 8007654:	20000064 	.word	0x20000064

08007658 <memmove>:
 8007658:	4288      	cmp	r0, r1
 800765a:	b510      	push	{r4, lr}
 800765c:	eb01 0402 	add.w	r4, r1, r2
 8007660:	d902      	bls.n	8007668 <memmove+0x10>
 8007662:	4284      	cmp	r4, r0
 8007664:	4623      	mov	r3, r4
 8007666:	d807      	bhi.n	8007678 <memmove+0x20>
 8007668:	1e43      	subs	r3, r0, #1
 800766a:	42a1      	cmp	r1, r4
 800766c:	d008      	beq.n	8007680 <memmove+0x28>
 800766e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007672:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007676:	e7f8      	b.n	800766a <memmove+0x12>
 8007678:	4402      	add	r2, r0
 800767a:	4601      	mov	r1, r0
 800767c:	428a      	cmp	r2, r1
 800767e:	d100      	bne.n	8007682 <memmove+0x2a>
 8007680:	bd10      	pop	{r4, pc}
 8007682:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007686:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800768a:	e7f7      	b.n	800767c <memmove+0x24>

0800768c <_sbrk_r>:
 800768c:	b538      	push	{r3, r4, r5, lr}
 800768e:	4d06      	ldr	r5, [pc, #24]	; (80076a8 <_sbrk_r+0x1c>)
 8007690:	2300      	movs	r3, #0
 8007692:	4604      	mov	r4, r0
 8007694:	4608      	mov	r0, r1
 8007696:	602b      	str	r3, [r5, #0]
 8007698:	f7f9 fd2e 	bl	80010f8 <_sbrk>
 800769c:	1c43      	adds	r3, r0, #1
 800769e:	d102      	bne.n	80076a6 <_sbrk_r+0x1a>
 80076a0:	682b      	ldr	r3, [r5, #0]
 80076a2:	b103      	cbz	r3, 80076a6 <_sbrk_r+0x1a>
 80076a4:	6023      	str	r3, [r4, #0]
 80076a6:	bd38      	pop	{r3, r4, r5, pc}
 80076a8:	20000408 	.word	0x20000408

080076ac <memcpy>:
 80076ac:	440a      	add	r2, r1
 80076ae:	4291      	cmp	r1, r2
 80076b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80076b4:	d100      	bne.n	80076b8 <memcpy+0xc>
 80076b6:	4770      	bx	lr
 80076b8:	b510      	push	{r4, lr}
 80076ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076c2:	4291      	cmp	r1, r2
 80076c4:	d1f9      	bne.n	80076ba <memcpy+0xe>
 80076c6:	bd10      	pop	{r4, pc}

080076c8 <_realloc_r>:
 80076c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076cc:	4680      	mov	r8, r0
 80076ce:	4614      	mov	r4, r2
 80076d0:	460e      	mov	r6, r1
 80076d2:	b921      	cbnz	r1, 80076de <_realloc_r+0x16>
 80076d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076d8:	4611      	mov	r1, r2
 80076da:	f7ff b9c1 	b.w	8006a60 <_malloc_r>
 80076de:	b92a      	cbnz	r2, 80076ec <_realloc_r+0x24>
 80076e0:	f7ff f952 	bl	8006988 <_free_r>
 80076e4:	4625      	mov	r5, r4
 80076e6:	4628      	mov	r0, r5
 80076e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076ec:	f000 f8a0 	bl	8007830 <_malloc_usable_size_r>
 80076f0:	4284      	cmp	r4, r0
 80076f2:	4607      	mov	r7, r0
 80076f4:	d802      	bhi.n	80076fc <_realloc_r+0x34>
 80076f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80076fa:	d812      	bhi.n	8007722 <_realloc_r+0x5a>
 80076fc:	4621      	mov	r1, r4
 80076fe:	4640      	mov	r0, r8
 8007700:	f7ff f9ae 	bl	8006a60 <_malloc_r>
 8007704:	4605      	mov	r5, r0
 8007706:	2800      	cmp	r0, #0
 8007708:	d0ed      	beq.n	80076e6 <_realloc_r+0x1e>
 800770a:	42bc      	cmp	r4, r7
 800770c:	4622      	mov	r2, r4
 800770e:	4631      	mov	r1, r6
 8007710:	bf28      	it	cs
 8007712:	463a      	movcs	r2, r7
 8007714:	f7ff ffca 	bl	80076ac <memcpy>
 8007718:	4631      	mov	r1, r6
 800771a:	4640      	mov	r0, r8
 800771c:	f7ff f934 	bl	8006988 <_free_r>
 8007720:	e7e1      	b.n	80076e6 <_realloc_r+0x1e>
 8007722:	4635      	mov	r5, r6
 8007724:	e7df      	b.n	80076e6 <_realloc_r+0x1e>

08007726 <__swhatbuf_r>:
 8007726:	b570      	push	{r4, r5, r6, lr}
 8007728:	460c      	mov	r4, r1
 800772a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800772e:	2900      	cmp	r1, #0
 8007730:	b096      	sub	sp, #88	; 0x58
 8007732:	4615      	mov	r5, r2
 8007734:	461e      	mov	r6, r3
 8007736:	da0d      	bge.n	8007754 <__swhatbuf_r+0x2e>
 8007738:	89a3      	ldrh	r3, [r4, #12]
 800773a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800773e:	f04f 0100 	mov.w	r1, #0
 8007742:	bf0c      	ite	eq
 8007744:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007748:	2340      	movne	r3, #64	; 0x40
 800774a:	2000      	movs	r0, #0
 800774c:	6031      	str	r1, [r6, #0]
 800774e:	602b      	str	r3, [r5, #0]
 8007750:	b016      	add	sp, #88	; 0x58
 8007752:	bd70      	pop	{r4, r5, r6, pc}
 8007754:	466a      	mov	r2, sp
 8007756:	f000 f849 	bl	80077ec <_fstat_r>
 800775a:	2800      	cmp	r0, #0
 800775c:	dbec      	blt.n	8007738 <__swhatbuf_r+0x12>
 800775e:	9901      	ldr	r1, [sp, #4]
 8007760:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007764:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007768:	4259      	negs	r1, r3
 800776a:	4159      	adcs	r1, r3
 800776c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007770:	e7eb      	b.n	800774a <__swhatbuf_r+0x24>

08007772 <__smakebuf_r>:
 8007772:	898b      	ldrh	r3, [r1, #12]
 8007774:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007776:	079d      	lsls	r5, r3, #30
 8007778:	4606      	mov	r6, r0
 800777a:	460c      	mov	r4, r1
 800777c:	d507      	bpl.n	800778e <__smakebuf_r+0x1c>
 800777e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007782:	6023      	str	r3, [r4, #0]
 8007784:	6123      	str	r3, [r4, #16]
 8007786:	2301      	movs	r3, #1
 8007788:	6163      	str	r3, [r4, #20]
 800778a:	b002      	add	sp, #8
 800778c:	bd70      	pop	{r4, r5, r6, pc}
 800778e:	ab01      	add	r3, sp, #4
 8007790:	466a      	mov	r2, sp
 8007792:	f7ff ffc8 	bl	8007726 <__swhatbuf_r>
 8007796:	9900      	ldr	r1, [sp, #0]
 8007798:	4605      	mov	r5, r0
 800779a:	4630      	mov	r0, r6
 800779c:	f7ff f960 	bl	8006a60 <_malloc_r>
 80077a0:	b948      	cbnz	r0, 80077b6 <__smakebuf_r+0x44>
 80077a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077a6:	059a      	lsls	r2, r3, #22
 80077a8:	d4ef      	bmi.n	800778a <__smakebuf_r+0x18>
 80077aa:	f023 0303 	bic.w	r3, r3, #3
 80077ae:	f043 0302 	orr.w	r3, r3, #2
 80077b2:	81a3      	strh	r3, [r4, #12]
 80077b4:	e7e3      	b.n	800777e <__smakebuf_r+0xc>
 80077b6:	89a3      	ldrh	r3, [r4, #12]
 80077b8:	6020      	str	r0, [r4, #0]
 80077ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077be:	81a3      	strh	r3, [r4, #12]
 80077c0:	9b00      	ldr	r3, [sp, #0]
 80077c2:	6163      	str	r3, [r4, #20]
 80077c4:	9b01      	ldr	r3, [sp, #4]
 80077c6:	6120      	str	r0, [r4, #16]
 80077c8:	b15b      	cbz	r3, 80077e2 <__smakebuf_r+0x70>
 80077ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077ce:	4630      	mov	r0, r6
 80077d0:	f000 f81e 	bl	8007810 <_isatty_r>
 80077d4:	b128      	cbz	r0, 80077e2 <__smakebuf_r+0x70>
 80077d6:	89a3      	ldrh	r3, [r4, #12]
 80077d8:	f023 0303 	bic.w	r3, r3, #3
 80077dc:	f043 0301 	orr.w	r3, r3, #1
 80077e0:	81a3      	strh	r3, [r4, #12]
 80077e2:	89a3      	ldrh	r3, [r4, #12]
 80077e4:	431d      	orrs	r5, r3
 80077e6:	81a5      	strh	r5, [r4, #12]
 80077e8:	e7cf      	b.n	800778a <__smakebuf_r+0x18>
	...

080077ec <_fstat_r>:
 80077ec:	b538      	push	{r3, r4, r5, lr}
 80077ee:	4d07      	ldr	r5, [pc, #28]	; (800780c <_fstat_r+0x20>)
 80077f0:	2300      	movs	r3, #0
 80077f2:	4604      	mov	r4, r0
 80077f4:	4608      	mov	r0, r1
 80077f6:	4611      	mov	r1, r2
 80077f8:	602b      	str	r3, [r5, #0]
 80077fa:	f7f9 fc54 	bl	80010a6 <_fstat>
 80077fe:	1c43      	adds	r3, r0, #1
 8007800:	d102      	bne.n	8007808 <_fstat_r+0x1c>
 8007802:	682b      	ldr	r3, [r5, #0]
 8007804:	b103      	cbz	r3, 8007808 <_fstat_r+0x1c>
 8007806:	6023      	str	r3, [r4, #0]
 8007808:	bd38      	pop	{r3, r4, r5, pc}
 800780a:	bf00      	nop
 800780c:	20000408 	.word	0x20000408

08007810 <_isatty_r>:
 8007810:	b538      	push	{r3, r4, r5, lr}
 8007812:	4d06      	ldr	r5, [pc, #24]	; (800782c <_isatty_r+0x1c>)
 8007814:	2300      	movs	r3, #0
 8007816:	4604      	mov	r4, r0
 8007818:	4608      	mov	r0, r1
 800781a:	602b      	str	r3, [r5, #0]
 800781c:	f7f9 fc53 	bl	80010c6 <_isatty>
 8007820:	1c43      	adds	r3, r0, #1
 8007822:	d102      	bne.n	800782a <_isatty_r+0x1a>
 8007824:	682b      	ldr	r3, [r5, #0]
 8007826:	b103      	cbz	r3, 800782a <_isatty_r+0x1a>
 8007828:	6023      	str	r3, [r4, #0]
 800782a:	bd38      	pop	{r3, r4, r5, pc}
 800782c:	20000408 	.word	0x20000408

08007830 <_malloc_usable_size_r>:
 8007830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007834:	1f18      	subs	r0, r3, #4
 8007836:	2b00      	cmp	r3, #0
 8007838:	bfbc      	itt	lt
 800783a:	580b      	ldrlt	r3, [r1, r0]
 800783c:	18c0      	addlt	r0, r0, r3
 800783e:	4770      	bx	lr

08007840 <_init>:
 8007840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007842:	bf00      	nop
 8007844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007846:	bc08      	pop	{r3}
 8007848:	469e      	mov	lr, r3
 800784a:	4770      	bx	lr

0800784c <_fini>:
 800784c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800784e:	bf00      	nop
 8007850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007852:	bc08      	pop	{r3}
 8007854:	469e      	mov	lr, r3
 8007856:	4770      	bx	lr
